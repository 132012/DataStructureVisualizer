[{"/Users/juvenal/Desktop/projects/StructureVisualizer/structure-vis/src/index.js":"1","/Users/juvenal/Desktop/projects/StructureVisualizer/structure-vis/src/App.js":"2","/Users/juvenal/Desktop/projects/StructureVisualizer/structure-vis/src/reportWebVitals.js":"3","/Users/juvenal/Desktop/projects/StructureVisualizer/structure-vis/src/DataStructureVisualizer/DataStructureVisualizer.js":"4","/Users/juvenal/Desktop/projects/StructureVisualizer/structure-vis/src/DataStructureVisualizer/MyNavbar.js":"5","/Users/juvenal/Desktop/projects/StructureVisualizer/structure-vis/src/DataStructureVisualizer/Grid.js":"6","/Users/juvenal/Desktop/projects/StructureVisualizer/structure-vis/src/DataStructureVisualizer/Tile.js":"7","/Users/juvenal/Desktop/projects/StructureVisualizer/structure-vis/src/DataStructureVisualizer/StrucFuncs/ArrayOp.js":"8","/Users/juvenal/Desktop/projects/StructureVisualizer/structure-vis/src/DataStructureVisualizer/StrucFuncs/StackOp.js":"9","/Users/juvenal/Desktop/projects/StructureVisualizer/structure-vis/src/DataStructureVisualizer/StrucFuncs/QueueOp.js":"10","/Users/juvenal/Desktop/projects/StructureVisualizer/structure-vis/src/DataStructureVisualizer/StrucFuncs/HashMapOp.js":"11","/Users/juvenal/Desktop/projects/StructureVisualizer/structure-vis/src/DataStructureVisualizer/StrucFuncs/TreeOp.js":"12","/Users/juvenal/Desktop/projects/StructureVisualizer/structure-vis/src/DataStructureVisualizer/StrucFuncs/GraphOp.js":"13"},{"size":500,"mtime":1630205849917,"results":"14","hashOfConfig":"15"},{"size":235,"mtime":1629731015822,"results":"16","hashOfConfig":"15"},{"size":362,"mtime":1629698677693,"results":"17","hashOfConfig":"15"},{"size":393,"mtime":1631321163407,"results":"18","hashOfConfig":"15"},{"size":867,"mtime":1631327300020,"results":"19","hashOfConfig":"15"},{"size":6328,"mtime":1631334469626,"results":"20","hashOfConfig":"15"},{"size":8635,"mtime":1637212238532,"results":"21","hashOfConfig":"15"},{"size":7899,"mtime":1631406273700,"results":"22","hashOfConfig":"15"},{"size":2648,"mtime":1631334518047,"results":"23","hashOfConfig":"15"},{"size":1973,"mtime":1631334543636,"results":"24","hashOfConfig":"15"},{"size":2926,"mtime":1631404971556,"results":"25","hashOfConfig":"15"},{"size":2597,"mtime":1643557875872,"results":"26","hashOfConfig":"15"},{"size":8320,"mtime":1643557736272,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"1nk148d",{"filePath":"31","messages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"33","messages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"35","messages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"30"},{"filePath":"38","messages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"30"},{"filePath":"41","messages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"30"},{"filePath":"44","messages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"46","messages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"30"},{"filePath":"49","messages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"51","messages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"30"},{"filePath":"54","messages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"30"},{"filePath":"57","messages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"59","messages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/juvenal/Desktop/projects/StructureVisualizer/structure-vis/src/index.js",[],["61","62"],"/Users/juvenal/Desktop/projects/StructureVisualizer/structure-vis/src/App.js",[],"/Users/juvenal/Desktop/projects/StructureVisualizer/structure-vis/src/reportWebVitals.js",[],"/Users/juvenal/Desktop/projects/StructureVisualizer/structure-vis/src/DataStructureVisualizer/DataStructureVisualizer.js",["63"],"import React, {useState, useEffect} from 'react'\nimport MyNavbar from './MyNavbar'\nimport Grid from './Grid'\n\nfunction DataStructureVisualizer() {\n\n    const [option,setOption] = useState(\"\")\n\n    return (\n        <div>\n            <MyNavbar op ={option} setOp ={setOption}/>\n            <Grid op ={option} setOp ={setOption}/>\n        </div>\n    )\n}\n\nexport default DataStructureVisualizer\n\n\n","/Users/juvenal/Desktop/projects/StructureVisualizer/structure-vis/src/DataStructureVisualizer/MyNavbar.js",["64"],"import React from 'react'\n\nfunction MyNavbar(props) {\n    const {op,setOp} = props\n\n    const click = (e) => {\n        let str = e.target.innerText\n        setOp(str)\n    }\n\n    return (\n        <div className=\"MyNavbar\">\n            <div className = \"title\">Data Structure Visualizer</div>\n            <div className = \"options\">\n                <div><button onClick = {e => {click(e)}}>Array</button></div>\n                <div><button onClick = {e => {click(e)}}>Stack</button></div>\n                <div><button onClick = {e => {click(e)}}>Queue</button></div>\n                <div><button onClick = {e => {click(e)}}>HashMap</button></div>\n                <div><button onClick = {e => {click(e)}}>Tree</button></div>\n                <div><button onClick = {e => {click(e)}}>Graph</button></div>\n            </div>\n        </div>\n    )\n}\n\nexport default MyNavbar\n","/Users/juvenal/Desktop/projects/StructureVisualizer/structure-vis/src/DataStructureVisualizer/Grid.js",["65","66","67","68"],"import React, {useState, useEffect} from 'react'\nimport Tile from './Tile'\nimport ArrayOp from './StrucFuncs/ArrayOp'\nimport StackOp from './StrucFuncs/StackOp'\nimport QueueOp from './StrucFuncs/QueueOp'\nimport HashMapOp from './StrucFuncs/HashMapOp'\nimport TreeOp from './StrucFuncs/TreeOp'\nimport GraphOp from './StrucFuncs/GraphOp'\nimport Xarrow from \"react-xarrows\";\n\n\nfunction Grid(props) {\n    const [grid,setGrid] = useState([])\n    const [curStruc,setCurStruc] = useState([]) //all current structures in the grid\n    const [chosen,setChosen] = useState({}) //id/type of Structure clicked\n    const [counter,setCounter] = useState(1) //generate new  structure id\n    const [lines,setLines] = useState([])\n    const [strClick,setStrClick] = useState(\"\") //ty\n    \n    const {op,setOp} = props \n    const type = {\n        ARRAY: \"Array\",\n        STACK: \"Stack\",\n        QUEUE: \"Queue\",\n        MAP: \"HashMap\",\n        TREE:\"Tree\",\n        GRAPH:\"Graph\"\n    }\n\n    useEffect(() => {\n        const newGrid = initializeGrid()\n        setGrid(newGrid)\n    },[])\n    \n    useEffect(() => {\n        let theLines=[]\n         //svg building edges for all trees\n        let trees = curStruc.filter(e => e.type===\"tree\") //all tree structures\n        trees.map(e =>{\n            let coor = e.tile,r,c,rr,cc,rr1,cc1,j,k\n            for(let i =0;i<coor.length;i++){\n                if(typeof(coor[i])===\"undefined\")\n                     continue\n                [r,c] = coor[i]\n                j = 2*i +1\n                let parentKey = r+\",\"+c          //parent\n\n                if(!(typeof(coor[j]) === \"undefined\")){\n                    [rr,cc] = coor[j]\n                    let leftChild =  rr+\",\"+cc    //child\n                    theLines.push([parentKey,leftChild])\n                }\n                k = 2*i +2\n\n                if(!(typeof(coor[k]) === \"undefined\")){\n                    [rr1,cc1] = coor[k]\n                    let rightChild =  rr1+\",\"+cc1    //child\n                    theLines.push([parentKey,rightChild])\n                    \n\n                }\n            }            \n\n        })\n\n        //graph edges\n        let graphs = curStruc.filter(e => e.type===\"graph\") //all graph structures\n        graphs.map(e =>{\n            let edge = e.edges \n            \n            edge.forEach((from) => {\n                from.forEach((to) => {\n                    theLines.push([to[0],to[1],to[2],to[3]])\n                })\n            });\n\n        })\n        setLines(theLines)\n    },[curStruc])\n\n    \n\n    let option \n\n    if(chosen.type===\"Array\"){\n        option = <ArrayOp \n            gr = {grid}\n            setGr = {setGrid}\n            ch = {chosen}\n            st = {curStruc}\n            type ={type}\n            setSt = {setCurStruc}\n            count = {counter} />\n    }\n    else if(chosen.type===\"Stack\"){\n        option = <StackOp \n            gr = {grid}\n            setGr = {setGrid}\n            ch = {chosen}\n            st = {curStruc}\n            type ={type}\n            setSt = {setCurStruc}\n            count = {counter} />\n    }\n    else if(chosen.type===\"Queue\"){\n        option = <QueueOp \n            gr = {grid}\n            setGr = {setGrid}\n            ch = {chosen}\n            st = {curStruc}\n            type ={type}\n            setSt = {setCurStruc}\n            count = {counter} />\n    }\n    else if(chosen.type===\"HashMap\"){\n        option = <HashMapOp \n            gr = {grid}\n            setGr = {setGrid}\n            ch = {chosen}\n            st = {curStruc}\n            type ={type}\n            setSt = {setCurStruc}\n            count = {counter} />\n    }\n    else if(chosen.type===\"Tree\"){\n        option = <TreeOp \n            gr = {grid}\n            setGr = {setGrid}\n            ch = {chosen}\n            st = {curStruc}\n            type ={type}\n            setSt = {setCurStruc}\n            count = {counter} />\n    }\n    else if(chosen.type===\"Graph\"){\n        option = <GraphOp \n            gr = {grid}\n            setGr = {setGrid}\n            ch = {chosen}\n            st = {curStruc}\n            setOp = {setOp}\n            type ={type}\n            setSt = {setCurStruc}\n            count = {counter}\n            op={op}\n            setCh = {setChosen} />\n    }\n\n    \n    return (\n        <div className =\"myGrid\">\n            {lines.map((e,i)=> \n                <Xarrow\n                key ={i}\n                \n                headSize = {4}\n                path={'straight'}\n                start={e[0]} \n                end={e[1]} \n                showHead = {e[3]}\n                labels= {<div style={{ fontSize: \"2.5vw\"}}>{e[2]}</div> }\n                a/>\n            )} \n            \n            {grid.map((row,rId) =>(\n                 <div className = \"myRow\" key={rId}>\n\n                     {row.map((tile,tId) =>(\n                        <Tile\n                         key ={rId+\",\"+tId} \n                         col = {tile.col}\n                         row = {tile.row}\n                         sType = {tile.strType}\n                         sId = {tile.strId}\n                         st = {curStruc}\n                         setSt = {setCurStruc}\n                         ch = {chosen}\n                         setCh = {setChosen}\n                         gr = {grid}\n                         setGr = {setGrid}\n                         isP ={tile.isPicked}\n                         op = {op}\n                         setOp ={setOp}\n                         type ={type}\n                         count = {counter}\n                         setCount = {setCounter}\n                         txt = {tile.txt}\n                         aKey ={rId+\",\"+tId}\n                          \n                         />\n                        \n                     ))}\n                 </div>\n            ))}\n           \n            {option}\n            </div>\n            \n            \n        \n    )\n}\n\nexport default Grid\n\nconst initializeGrid = () => {\n    const grid = []\n    for(let row = 0; row <17;row++){\n        const aRow = []\n        for(let col = 0; col<39;col++){\n            aRow.push(createTile(col,row))\n        }\n        grid.push(aRow)\n    }\n    return grid\n}\n\nconst createTile = (col,row) => {\n    return{\n        col,\n        row,\n        txt:\"\",\n        strType: ``,\n        strId: 0,\n        isPicked: false,\n        myKey:\"\"\n    }\n}\n\n\n\n","/Users/juvenal/Desktop/projects/StructureVisualizer/structure-vis/src/DataStructureVisualizer/Tile.js",[],"/Users/juvenal/Desktop/projects/StructureVisualizer/structure-vis/src/DataStructureVisualizer/StrucFuncs/ArrayOp.js",["69","70","71","72","73","74"],"import React from 'react'\n\nfunction ArrayOp(props) {\n    const {gr,setGr,ch,st} = props\n\n    const addValue = (e) => {\n        e.preventDefault()\n        let index = document.getElementById(\"input1\").value\n        index = parseInt(index,10)\n        const value = document.getElementById(\"input2\").value\n        \n\n\n        const myStruc = (st.find(e => e.id === ch.id).tile) //array of coordinates\n        if(index<0 || index > myStruc.length) return\n\n        const newGrid = gr.slice()\n        const myIndex = myStruc[index]\n        const i0 = myIndex[0]\n        const i1 = myIndex[1]\n        const tile = newGrid[i0][i1] \n        const newTile= {\n            ...tile,\n            txt:`${value}`\n\n            }\n        newGrid[i0][i1] = newTile\n        setGr(newGrid)\n        \n    } \n\n    const removeValue = (e) => {\n        e.preventDefault()\n        let index = document.getElementById(\"input3\").value\n        index = parseInt(index,10)\n        if(!index) return\n        \n        \n\n\n        const myStruc = (st.find(e => e.id === ch.id).tile) //array of coordinates\n        const newGrid = gr.slice()\n        const myIndex = myStruc[index]\n        const i0 = myIndex[0]\n        const i1 = myIndex[1]\n        const tile = newGrid[i0][i1] \n        const newTile= {\n            ...tile,\n            txt:``\n\n            }\n        newGrid[i0][i1] = newTile\n        setGr(newGrid)\n\n    } \n    const fillArray = (e) =>{\n        e.preventDefault()\n        const myStruc = (st.find(e => e.id === ch.id).tile) //array of coordinates\n        const newGrid = gr.slice()\n\n        for(let i = 0; i <myStruc.length;i++){\n\n            const myIndex = myStruc[i]\n    \n            const i0 = myIndex[0]\n            const i1 = myIndex[1]\n            const tile = newGrid[i0][i1] \n            const newTile= {\n                ...tile,\n                txt: Math.floor(Math.random() *100)\n\n\n                }\n            newGrid[i0][i1] = newTile\n        \n        }\n        setGr(newGrid)\n\n    }\n\n    const bubbleSort = async (e) => {\n        e.preventDefault()\n        const myStruc = (st.find(e => e.id === ch.id).tile) //array of coordinates\n        let  keepGoing,t1,t2\n\n\n        do{\n            keepGoing = false\n            for(let i = 0; i <myStruc.length-1;i++){\n                let til1 = document.getElementById(myStruc[i].join())\n                let til2 = document.getElementById(myStruc[i+1].join())\n                t1 = parseInt(til1.innerText,10)\n                t2 = parseInt(til2.innerText,10)\n                til1.classList.add(\"look\")\n                til2.classList.add(\"look\")\n                if(t1 > t2  || isNaN(t1) && !isNaN(t2) ){\n                    til1.innerText = isNaN(t2) ? \"\" : t2\n                    til2.innerText = isNaN(t1) ? \"\" : t1\n                    keepGoing = true\n                }\n                await new Promise(r => setTimeout(r, 70));\n                til1.classList.remove(\"look\")\n                til2.classList.remove(\"look\")\n    \n            }\n        }while(keepGoing)\n        updateGrid(myStruc)\n\n    } \n\n    const insertionSort = async (e) => {\n        e.preventDefault()\n        const myStruc = (st.find(e => e.id === ch.id).tile) //array of coordinates\n        let  hole,t1,t2,til1,til2,hold2\n\n \n        for(let i = 1; i <myStruc.length;i++){\n\n            til1 = document.getElementById(myStruc[i-1].join())\n            til2 = document.getElementById(myStruc[i].join())\n            hold2 = til2\n            t1 = parseInt(til1.innerText,10)\n            t2 = parseInt(til2.innerText,10)\n            til2.classList.add(\"look\")\n            hole = i-1\n            while(hole>=0 && t1 > t2 || isNaN(t1) && !isNaN(t2) ){\n                til1.innerText = isNaN(t2) ? \"\" : t2\n                til2.innerText = isNaN(t1) ? \"\" : t1\n\n                til2 = til1\n                t2 = parseInt(til2.innerText,10)\n                til1.classList.add(\"look-1\")\n                await new Promise(r => setTimeout(r, 70));\n                til1.classList.remove(\"look-1\")\n                hole =hole-1\n                if(hole ===-1) break\n                til1 = document.getElementById(myStruc[hole].join())\n\n                t1 = parseInt(til1.innerText,10)\n\n                \n\n\n            }\n            hold2.classList.remove(\"look\")\n\n        }\n        updateGrid(myStruc)\n    } \n    const quickSort =   (e) => {\n        e.preventDefault()\n        const myStruc = (st.find(e => e.id === ch.id).tile) //array of coordinates\n        qSort(myStruc, 0,myStruc.length -1)\n        updateGrid(myStruc)\n\n    }\n    async function  qSort( tiles,left, right) {\n        let index;\n        if (left < right) {\n\n            index =  await partition( tiles,left, right); \n         \n            qSort( tiles,left, index - 1);\n            \n           \n            qSort(tiles,index+1, right);\n           \n        }\n    }\n\n    const  partition = async (items, left, right)=> {\n        let pivotEl = document.getElementById(items[right].join())  \n        let pivotVal = parseInt(pivotEl.innerText,10)\n        pivotEl.classList.add(\"look\")\n\n        let i = (left - 1)\n        let compEl2,compVal2  \n        for (let j = left; j <= right- 1; j++)\n        {\n            // If current element is smaller than the pivot\n            let compEl = document.getElementById(items[j].join())  \n\n            let compVal = parseInt(compEl.innerText,10)\n\n            if (compVal < pivotVal) //if compVal is smaller than pivot\n            {\n                compEl.classList.add(\"look-1\")\n\n                i++;    \n                //swap smaller and larger tiles\n                compEl2 = document.getElementById(items[i].join())\n                compEl2.classList.add(\"look-1\")\n\n                compVal2 = parseInt(compEl2.innerText,10)\n                compEl2.innerHTML = isNaN(compVal) ? \"\" : compVal \n                compEl.innerHTML = isNaN(compVal2) ? \"\" : compVal2\n\n                await new Promise(r => setTimeout(r, 70))\n                compEl.classList.remove(\"look-1\")\n                compEl2.classList.remove(\"look-1\")\n\n            }\n      }\n        //putting pivot in correct index\n        let compEl3 = document.getElementById(items[i+1].join())\n        let compVal3 = parseInt(compEl3.innerText,10)\n        pivotEl.innerText = isNaN(compVal3) ? \"\" : compVal3\n        compEl3.innerText = isNaN(pivotVal) ? \"\" : pivotVal  \n        pivotEl.classList.remove(\"look\")\n\n        return (i + 1)\n    }\n\n    const updateGrid = (myStruc) => {\n        const newGrid = gr.slice()\n        for(let index =0; index < myStruc.length ; index++ ){\n            const myIndex = myStruc[index]\n            const i0 = myIndex[0]\n            const i1 = myIndex[1]\n            const tile = newGrid[i0][i1] \n            const newTile= {\n                ...tile,\n                txt: document.getElementById(myStruc[index]).innerText\n\n                }\n            newGrid[i0][i1] = newTile\n        }\n        setGr(newGrid) \n    }\n    \n    // first call to quick sort\n\n    \n    \n    return (\n            <div className = \"controls\" >\n                <form onSubmit = {addValue}>\n                    <input id=\"input1\" type=\"number\" placeholder=\"index\" />\n                    <input id=\"input2\" type=\"text\" placeholder=\"value\" />\n                    <button>Add</button>\n\n                </form>\n\n                <form onSubmit = {removeValue}>\n                    <input id=\"input3\"  type=\"number\" placeholder=\"index\" />\n                    <button>Delete</button>\n\n                </form>\n                \n                <div>\n                    <button onClick={bubbleSort}> bubble sort</button>\n                    <button onClick={insertionSort}> Insertion </button>\n                    <button onClick={quickSort}> Quick sort</button>\n                </div>\n                <div>\n                    <button onClick={fillArray}> Fill Array</button>\n                  </div>\n            </div>    )\n}\n\nexport default ArrayOp\n\n\n","/Users/juvenal/Desktop/projects/StructureVisualizer/structure-vis/src/DataStructureVisualizer/StrucFuncs/StackOp.js",[],"/Users/juvenal/Desktop/projects/StructureVisualizer/structure-vis/src/DataStructureVisualizer/StrucFuncs/QueueOp.js",["75"],"import React from 'react'\n\nfunction QueueOp(props) {\n    const {gr,setGr,ch,st} = props\n\n    const enqueue = (e) => {\n        e.preventDefault()\n        const value = document.getElementById(\"input1\").value\n        \n        console.log( st)\n        console.log( ch.id)\n\n        const myStruc = (st.find(e => e.id === ch.id).tile) //array of coordinates\n        let top =-1\n        for(let i =myStruc.length-1;i>=0;i--){\n            let [row,col] = myStruc[i]\n            let a = ((gr[row][col]))\n            if(a.txt === \"\"){\n                top = i\n                break\n            }\n        }\n\n        if(top > -1){\n            const newGrid = gr.slice()\n            const [r,c] = myStruc[top]\n            const tile = newGrid[r][c] \n            const newTile= {\n                ...tile,\n                txt:`${value}`\n\n                }\n            newGrid[r][c] = newTile\n            setGr(newGrid)\n        }\n\n\n    }\n\n    const dequeue = (e) => {\n        e.preventDefault()\n\n        const myStruc = (st.find(e => e.id === ch.id).tile) //array of coordinates\n        let top =-1,tile,carry =\"\"\n        const newGrid = gr.slice()\n\n        for(let i =0;i<myStruc.length;i++){\n            let [row,col] = myStruc[i]\n            let a = ((gr[row][col]))\n            if(a.txt === \"\"){\n                continue\n            }\n            tile = newGrid[row][col] \n            const newTile= {\n                ...tile,\n                txt:`${carry}`\n\n                }\n            carry = tile.txt \n\n            newGrid[row][col] = newTile\n\n        }\n        setGr(newGrid)\n\n\n\n\n    }\n \n    return (\n        \n        <div className = \"controls\" >\n            <form onSubmit = {enqueue}>\n                <input id=\"input1\" type=\"text\" placeholder=\"value\" />\n                <button>Enqueue</button>\n\n            </form>\n\n            <form onSubmit = {dequeue}>\n                <button>Dequeue</button>\n\n            </form>\n        </div>\n        \n    )\n}\n\nexport default QueueOp\n","/Users/juvenal/Desktop/projects/StructureVisualizer/structure-vis/src/DataStructureVisualizer/StrucFuncs/HashMapOp.js",["76"],"import React from 'react'\n\nfunction HashMapOp(props) {\n\n    const {gr,setGr,ch,st} = props\n\n    const put = (e) => {\n        e.preventDefault()\n        const key = document.getElementById(\"input1\").value\n        const value = document.getElementById(\"input2\").value\n\n\n        const myStruc = (st.find(e => e.id === ch.id).tile) //array of coordinates\n        let loc =-1, i,empty\n        for(i =myStruc.length-1;i>=0;i--){\n            let [row,col] = myStruc[i][0] //key coordinate\n            let a = ((gr[row][col]))\n            if(a.txt ===\"\"){\n                empty =i\n            }\n            if(a.txt === key){\n                loc = i\n                break\n            }\n        }\n\n        if(loc > -1 || empty >-1){\n\n            const pos = loc > -1 ? loc :empty\n            const newGrid = gr.slice()\n            const keyVal = myStruc[pos] //found specific key/value array coordinates [k,>,v] \n            const item = [key,\">\",value]\n            for(let j = 0;j<3; j++){\n                const tile = newGrid[keyVal[j][0]][keyVal[j][1]] \n                const newTile= {\n                ...tile,\n                txt:`${item[j]}`\n\n                }\n                newGrid[keyVal[j][0]][keyVal[j][1]] = newTile\n            }\n            setGr(newGrid)\n        }\n        else{\n            console.log(\"no more room\")\n        }\n\n\n    }\n\n    const remove = (e) => {\n        e.preventDefault()\n        const key = document.getElementById(\"input3\").value\n\n\n        const myStruc = (st.find(e => e.id === ch.id).tile) //array of coordinates\n        let loc =-1,empty\n        for(let i =0;i<myStruc.length;i++){\n            let [row,col] = myStruc[i][0] //key coordinate\n            let a = ((gr[row][col]))\n            if(a.txt === key){\n                loc = i\n                break\n            }\n        }\n        \n        if(loc > -1 ){\n            const newGrid = gr.slice()\n            const keyVal = myStruc[loc] //found specific key/value array coordinates [k,>,v] \n            const item = [key,\"\",\"\"]\n            for(let j = 0;j<3; j++){\n                const tile = newGrid[keyVal[j][0]][keyVal[j][1]] \n                const newTile= {\n                ...tile,\n                txt:`${item[j]}`\n\n                }\n                newGrid[keyVal[j][0]][keyVal[j][1]] = newTile\n            }\n            setGr(newGrid)\n        }\n        else{\n            console.log(\"no more room\")\n        }\n\n\n    }\n\n    return (\n        <div className = \"controls\" >\n            <form onSubmit = {put}>\n                <input id=\"input1\" type=\"text\" placeholder=\"key\" />\n                <input id=\"input2\" type=\"text\" placeholder=\"value\" />\n                <button>Put</button>\n\n            </form>\n\n            <form onSubmit = {remove}>\n                <input id=\"input3\" type=\"text\" placeholder=\"key\" />\n                <button>Remove</button>\n\n            </form>\n            \n        </div>\n    )\n}\n\nexport default HashMapOp\n","/Users/juvenal/Desktop/projects/StructureVisualizer/structure-vis/src/DataStructureVisualizer/StrucFuncs/TreeOp.js",["77","78"],"/Users/juvenal/Desktop/projects/StructureVisualizer/structure-vis/src/DataStructureVisualizer/StrucFuncs/GraphOp.js",["79","80"],{"ruleId":"81","replacedBy":"82"},{"ruleId":"83","replacedBy":"84"},{"ruleId":"85","severity":1,"message":"86","line":1,"column":26,"nodeType":"87","messageId":"88","endLine":1,"endColumn":35},{"ruleId":"85","severity":1,"message":"89","line":4,"column":12,"nodeType":"87","messageId":"88","endLine":4,"endColumn":14},{"ruleId":"85","severity":1,"message":"90","line":18,"column":12,"nodeType":"87","messageId":"88","endLine":18,"endColumn":20},{"ruleId":"85","severity":1,"message":"91","line":18,"column":21,"nodeType":"87","messageId":"88","endLine":18,"endColumn":32},{"ruleId":"92","severity":1,"message":"93","line":39,"column":21,"nodeType":"94","messageId":"95","endLine":39,"endColumn":23},{"ruleId":"92","severity":1,"message":"93","line":68,"column":22,"nodeType":"94","messageId":"95","endLine":68,"endColumn":24},{"ruleId":"96","severity":1,"message":"97","line":96,"column":29,"nodeType":"98","messageId":"99","endLine":96,"endColumn":31},{"ruleId":"96","severity":1,"message":"97","line":96,"column":42,"nodeType":"98","messageId":"99","endLine":96,"endColumn":44},{"ruleId":"96","severity":1,"message":"100","line":126,"column":27,"nodeType":"98","messageId":"99","endLine":126,"endColumn":29},{"ruleId":"96","severity":1,"message":"100","line":126,"column":38,"nodeType":"98","messageId":"99","endLine":126,"endColumn":40},{"ruleId":"96","severity":1,"message":"97","line":126,"column":38,"nodeType":"98","messageId":"99","endLine":126,"endColumn":40},{"ruleId":"96","severity":1,"message":"97","line":126,"column":51,"nodeType":"98","messageId":"99","endLine":126,"endColumn":53},{"ruleId":"85","severity":1,"message":"101","line":44,"column":13,"nodeType":"87","messageId":"88","endLine":44,"endColumn":16},{"ruleId":"85","severity":1,"message":"102","line":57,"column":21,"nodeType":"87","messageId":"88","endLine":57,"endColumn":26},{"ruleId":"85","severity":1,"message":"103","line":6,"column":38,"nodeType":"87","messageId":"88","endLine":6,"endColumn":43},{"ruleId":"104","severity":1,"message":"105","line":10,"column":18,"nodeType":"106","messageId":"107","endLine":10,"endColumn":20},{"ruleId":"85","severity":1,"message":"108","line":6,"column":15,"nodeType":"87","messageId":"88","endLine":6,"endColumn":20},{"ruleId":"85","severity":1,"message":"109","line":6,"column":27,"nodeType":"87","messageId":"88","endLine":6,"endColumn":31},"no-native-reassign",["110"],"no-negated-in-lhs",["111"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'op' is assigned a value but never used.","'strClick' is assigned a value but never used.","'setStrClick' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","no-mixed-operators","Unexpected mix of '||' and '&&'. Use parentheses to clarify the intended order of operations.","LogicalExpression","unexpectedMixedOperator","Unexpected mix of '&&' and '||'. Use parentheses to clarify the intended order of operations.","'top' is assigned a value but never used.","'empty' is defined but never used.","'count' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'setGr' is assigned a value but never used.","'type' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]