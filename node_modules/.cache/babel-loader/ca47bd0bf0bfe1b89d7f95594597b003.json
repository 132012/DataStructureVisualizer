{"ast":null,"code":"var _jsxFileName = \"/Users/juvenal/Desktop/projects/StructureVisualizer/structure-vis/src/DataStructureVisualizer/Tile.js\";\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Tile(props) {\n  let {\n    col,\n    row,\n    sType,\n    sId,\n    ch,\n    setCh,\n    pr,\n    setPr,\n    gr,\n    setGr,\n    isP\n  } = props; //console.log(col +\" \"+ row+\" \"+sType+ \" \"+sId)\n\n  const stackGrid = size => {\n    const newGrid = gr.slice();\n    let tile, newTile;\n\n    for (let i = 0; i < size; i++) {\n      tile = newGrid[row - i][col];\n      newTile = { ...tile,\n        isPicked: !isP\n      };\n      console.log(\"hello\");\n      newGrid[row - i][col] = newTile;\n    }\n\n    return newGrid;\n  };\n\n  const arrayGrid = size => {\n    console.log(ty);\n\n    if (col + size <= 39) {\n      const newGrid = gr.slice();\n      let tile, newTile;\n\n      for (let i = 0; i < size; i++) {\n        tile = newGrid[row][col + i];\n        newTile = { ...tile,\n          isPicked: !isP\n        };\n        console.log(\"hello\");\n        newGrid[row][col + i] = newTile;\n      }\n\n      setGr(newGrid);\n    }\n  };\n  /*\n      const mouseDown = (aRow,aCol) => {\n          const newAr = ch.slice()\n          newAr.push({aRow,aCol})\n          setCh(newAr)\n  \n          const newGrid = updateGrid(gr,row,col)\n          setGr(newGrid)\n  \n          setPr(true)\n      }\n      \n      const mouseLift = () => {\n          setPr(false)\n          setCh([])\n          let ans= prompt(\"Size:\")\n          console.log(ans +\"\")\n      }\n      \n      const mouseEnter =(aRow,aCol)=> {\n  \n          if(!pr) return \n          const newAr = ch.slice()\n          newAr.push({aRow,aCol})\n          setCh(newAr)\n  \n          const newGrid = updateGrid(gr,row,col)\n          setGr(newGrid)\n      }\n  \n      */\n\n\n  const click = () => {\n    let size = prompt(\"Size:\");\n    arrayGrid(size);\n  };\n\n  let extra = isP ? 'bground' : '';\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `myTile ${extra}`,\n    onClick: () => click()\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 9\n  }, this);\n}\n\n_c = Tile;\nexport default Tile;\n\nvar _c;\n\n$RefreshReg$(_c, \"Tile\");","map":{"version":3,"sources":["/Users/juvenal/Desktop/projects/StructureVisualizer/structure-vis/src/DataStructureVisualizer/Tile.js"],"names":["React","Tile","props","col","row","sType","sId","ch","setCh","pr","setPr","gr","setGr","isP","stackGrid","size","newGrid","slice","tile","newTile","i","isPicked","console","log","arrayGrid","ty","click","prompt","extra"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;;;AAEA,SAASC,IAAT,CAAcC,KAAd,EAAqB;AACjB,MAAI;AAACC,IAAAA,GAAD;AAAKC,IAAAA,GAAL;AAASC,IAAAA,KAAT;AAAeC,IAAAA,GAAf;AAAmBC,IAAAA,EAAnB;AAAsBC,IAAAA,KAAtB;AAA4BC,IAAAA,EAA5B;AAA+BC,IAAAA,KAA/B;AAAqCC,IAAAA,EAArC;AAAwCC,IAAAA,KAAxC;AAA8CC,IAAAA;AAA9C,MAAqDX,KAAzD,CADiB,CAEjB;;AAGA,QAAMY,SAAS,GAAKC,IAAF,IAAW;AACzB,UAAMC,OAAO,GAAGL,EAAE,CAACM,KAAH,EAAhB;AACA,QAAIC,IAAJ,EAASC,OAAT;;AACA,SAAI,IAAIC,CAAC,GAAE,CAAX,EAAaA,CAAC,GAACL,IAAf,EAAoBK,CAAC,EAArB,EAAwB;AACpBF,MAAAA,IAAI,GAAGF,OAAO,CAACZ,GAAG,GAACgB,CAAL,CAAP,CAAejB,GAAf,CAAP;AACAgB,MAAAA,OAAO,GAAE,EACP,GAAGD,IADI;AAEPG,QAAAA,QAAQ,EAAE,CAACR;AAFJ,OAAT;AAIAS,MAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AAEAP,MAAAA,OAAO,CAACZ,GAAG,GAACgB,CAAL,CAAP,CAAejB,GAAf,IAAsBgB,OAAtB;AACH;;AACD,WAAOH,OAAP;AACD,GAdH;;AAgBA,QAAMQ,SAAS,GAAIT,IAAD,IAAS;AACvBO,IAAAA,OAAO,CAACC,GAAR,CAAYE,EAAZ;;AACA,QAAItB,GAAG,GAAEY,IAAN,IAAe,EAAlB,EAAqB;AAEjB,YAAMC,OAAO,GAAGL,EAAE,CAACM,KAAH,EAAhB;AACA,UAAIC,IAAJ,EAAUC,OAAV;;AACA,WAAI,IAAIC,CAAC,GAAE,CAAX,EAAaA,CAAC,GAACL,IAAf,EAAoBK,CAAC,EAArB,EAAwB;AACpBF,QAAAA,IAAI,GAAGF,OAAO,CAACZ,GAAD,CAAP,CAAaD,GAAG,GAACiB,CAAjB,CAAP;AACAD,QAAAA,OAAO,GAAE,EACT,GAAGD,IADM;AAETG,UAAAA,QAAQ,EAAE,CAACR;AAFF,SAAT;AAIAS,QAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AAEAP,QAAAA,OAAO,CAACZ,GAAD,CAAP,CAAaD,GAAG,GAACiB,CAAjB,IAAsBD,OAAtB;AACH;;AACDP,MAAAA,KAAK,CAACI,OAAD,CAAL;AACH;AAEJ,GAnBD;AAoBJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEI,QAAMU,KAAK,GAAE,MAAK;AACd,QAAIX,IAAI,GAAEY,MAAM,CAAC,OAAD,CAAhB;AACAH,IAAAA,SAAS,CAACT,IAAD,CAAT;AAEH,GAJD;;AAMA,MAAIa,KAAK,GAAGf,GAAG,GAAG,SAAH,GAAe,EAA9B;AACA,sBACI;AAAK,IAAA,SAAS,EAAK,UAASe,KAAM,EAAlC;AACI,IAAA,OAAO,EAAI,MAAMF,KAAK;AAD1B;AAAA;AAAA;AAAA;AAAA,UADJ;AAMH;;KAtFQzB,I;AAwFT,eAAeA,IAAf","sourcesContent":["import React from 'react'\n\nfunction Tile(props) {\n    let {col,row,sType,sId,ch,setCh,pr,setPr,gr,setGr,isP} = props\n    //console.log(col +\" \"+ row+\" \"+sType+ \" \"+sId)\n\n\n    const stackGrid = ( size) => {\n        const newGrid = gr.slice();\n        let tile,newTile;\n        for(let i =0;i<size;i++){\n            tile = newGrid[row-i][col];\n            newTile= {\n              ...tile,\n              isPicked: !isP,\n            };\n            console.log(\"hello\")\n\n            newGrid[row-i][col] = newTile;\n        }\n        return newGrid;\n      }\n      \n    const arrayGrid = (size) =>{\n        console.log(ty)\n        if((col +size) <= 39){\n\n            const newGrid = gr.slice();\n            let tile, newTile;\n            for(let i =0;i<size;i++){\n                tile = newGrid[row][col+i];\n                newTile= {\n                ...tile,\n                isPicked: !isP,\n                };\n                console.log(\"hello\")\n\n                newGrid[row][col+i] = newTile;\n            }\n            setGr(newGrid)\n        }\n\n    }\n/*\n    const mouseDown = (aRow,aCol) => {\n        const newAr = ch.slice()\n        newAr.push({aRow,aCol})\n        setCh(newAr)\n\n        const newGrid = updateGrid(gr,row,col)\n        setGr(newGrid)\n\n        setPr(true)\n    }\n    \n    const mouseLift = () => {\n        setPr(false)\n        setCh([])\n        let ans= prompt(\"Size:\")\n        console.log(ans +\"\")\n    }\n    \n    const mouseEnter =(aRow,aCol)=> {\n\n        if(!pr) return \n        const newAr = ch.slice()\n        newAr.push({aRow,aCol})\n        setCh(newAr)\n\n        const newGrid = updateGrid(gr,row,col)\n        setGr(newGrid)\n    }\n\n    */\n    \n    const click =() =>{\n        let size= prompt(\"Size:\")\n        arrayGrid(size)\n\n    }\n    \n    let extra = isP ? 'bground' : ''\n    return (\n        <div className = {`myTile ${extra}`} \n            onClick = {() => click()} >\n        \n        </div>\n    )\n}\n\nexport default Tile\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}