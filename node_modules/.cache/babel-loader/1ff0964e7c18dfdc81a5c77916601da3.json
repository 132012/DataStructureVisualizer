{"ast":null,"code":"var _jsxFileName = \"/Users/juvenal/Desktop/projects/StructureVisualizer/structure-vis/src/DataStructureVisualizer/StrucFuncs/TreeOp.js\";\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction TreeOp(props) {\n  const {\n    gr,\n    setGr,\n    ch,\n    st,\n    type,\n    setSt,\n    count\n  } = props;\n\n  const addValue = e => {\n    e.preventDefault();\n    let value = document.getElementById(\"input1\").value;\n    value = parseInt(value, 10); //reinsert coordinates of tree in each add\n\n    const fullStruc = st.find(e => e.id === ch.id);\n    let myStruc = fullStruc.tile; //array of coordinates\n\n    const newGrid = gr.slice();\n    let [r, c] = myStruc[0];\n    let tp = newGrid[r][c]; //root tile on grid\n\n    let tc = [tp.row, tp.col],\n        g;\n    tp = tc.slice();\n    console.log(myStruc); //tile = [ti.row,ti.col]\n\n    for (let i = 0; i < 15;) {\n      /*tc = [r,c]\n      g = gr[r][c]\n      if(typeof(tp) ===\"object\"  && !(tp.txt ===\"\")){\n          //r=tile[0]\n          //c = tile[1]\n          tp =tc.slice()\n      */\n      console.log(\"in there\");\n\n      if (g.txt > value) {\n        console.log(\"in here\");\n        i = 2 * i + 1;\n        if (myStruct[i] === \"undefined\") break;\n        /*r = myStruc[i][0] //left child\n        c = myStruc[i][1] //left child*/\n      } else {\n        i = 2 * i + 2;\n        if (myStruct[i] === \"undefined\") break;\n        /*i = 2*i+2\n        r = myStruc[i][0] //right child\n        c = myStruc[i][1] //right child*/\n      }\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"controls\",\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: addValue,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"input1\",\n        type: \"number\",\n        placeholder: \"value\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Add\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"see items\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 9\n  }, this);\n}\n\n_c = TreeOp;\nexport default TreeOp;\n\nvar _c;\n\n$RefreshReg$(_c, \"TreeOp\");","map":{"version":3,"sources":["/Users/juvenal/Desktop/projects/StructureVisualizer/structure-vis/src/DataStructureVisualizer/StrucFuncs/TreeOp.js"],"names":["React","TreeOp","props","gr","setGr","ch","st","type","setSt","count","addValue","e","preventDefault","value","document","getElementById","parseInt","fullStruc","find","id","myStruc","tile","newGrid","slice","r","c","tp","tc","row","col","g","console","log","i","txt","myStruct"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;;;AAGA,SAASC,MAAT,CAAgBC,KAAhB,EAAuB;AAEnB,QAAM;AAACC,IAAAA,EAAD;AAAIC,IAAAA,KAAJ;AAAUC,IAAAA,EAAV;AAAaC,IAAAA,EAAb;AAAgBC,IAAAA,IAAhB;AAAqBC,IAAAA,KAArB;AAA2BC,IAAAA;AAA3B,MAAoCP,KAA1C;;AAEA,QAAMQ,QAAQ,GAAIC,CAAD,IAAO;AACpBA,IAAAA,CAAC,CAACC,cAAF;AACA,QAAIC,KAAK,GAAGC,QAAQ,CAACC,cAAT,CAAwB,QAAxB,EAAkCF,KAA9C;AACAA,IAAAA,KAAK,GAAGG,QAAQ,CAACH,KAAD,EAAO,EAAP,CAAhB,CAHoB,CAKpB;;AAIA,UAAMI,SAAS,GAAIX,EAAE,CAACY,IAAH,CAAQP,CAAC,IAAIA,CAAC,CAACQ,EAAF,KAASd,EAAE,CAACc,EAAzB,CAAnB;AACA,QAAIC,OAAO,GAAGH,SAAS,CAACI,IAAxB,CAVoB,CAUS;;AAC7B,UAAMC,OAAO,GAAGnB,EAAE,CAACoB,KAAH,EAAhB;AACA,QAAI,CAACC,CAAD,EAAGC,CAAH,IAAQL,OAAO,CAAC,CAAD,CAAnB;AAEA,QAAIM,EAAE,GAAGJ,OAAO,CAACE,CAAD,CAAP,CAAWC,CAAX,CAAT,CAdoB,CAcG;;AACvB,QAAIE,EAAE,GAAG,CAACD,EAAE,CAACE,GAAJ,EAAQF,EAAE,CAACG,GAAX,CAAT;AAAA,QAA0BC,CAA1B;AACAJ,IAAAA,EAAE,GAAGC,EAAE,CAACJ,KAAH,EAAL;AACAQ,IAAAA,OAAO,CAACC,GAAR,CAAYZ,OAAZ,EAjBoB,CAkBpB;;AACA,SAAI,IAAIa,CAAC,GAAE,CAAX,EAAcA,CAAC,GAAC,EAAhB,GAAoB;AAChB;AACZ;AACA;AACA;AACA;AACA;AACA;AACgBF,MAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ;;AACA,UAAGF,CAAC,CAACI,GAAF,GAAQrB,KAAX,EAAiB;AACbkB,QAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ;AACAC,QAAAA,CAAC,GAAG,IAAEA,CAAF,GAAI,CAAR;AACA,YAAGE,QAAQ,CAACF,CAAD,CAAR,KAAc,WAAjB,EACA;AACA;AACpB;AACiB,OAPD,MAQI;AACAA,QAAAA,CAAC,GAAG,IAAEA,CAAF,GAAI,CAAR;AACA,YAAGE,QAAQ,CAACF,CAAD,CAAR,KAAc,WAAjB,EACA;AACA;AACpB;AACA;AACiB;AAEJ;AAGJ,GAhDL;;AAqDA,sBACI;AAAK,IAAA,SAAS,EAAG,UAAjB;AAAA,4BACQ;AAAM,MAAA,QAAQ,EAAIvB,QAAlB;AAAA,8BACI;AAAO,QAAA,EAAE,EAAC,QAAV;AAAmB,QAAA,IAAI,EAAC,QAAxB;AAAiC,QAAA,WAAW,EAAC;AAA7C;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADR,eAQQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YARR;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAcH;;KAvEQT,M;AAyET,eAAeA,MAAf","sourcesContent":["import React from 'react'\n\n\nfunction TreeOp(props) {\n\n    const {gr,setGr,ch,st,type,setSt,count} = props\n\n    const addValue = (e) => {\n        e.preventDefault()\n        let value = document.getElementById(\"input1\").value\n        value = parseInt(value,10)\n\n        //reinsert coordinates of tree in each add\n        \n\n\n        const fullStruc = (st.find(e => e.id === ch.id))\n        let myStruc = fullStruc.tile //array of coordinates\n        const newGrid = gr.slice()\n        let [r,c] = myStruc[0]\n        \n        let tp = newGrid[r][c] //root tile on grid\n        let tc = [tp.row,tp.col], g\n        tp = tc.slice()\n        console.log(myStruc)\n        //tile = [ti.row,ti.col]\n        for(let i =0; i<15;){\n            /*tc = [r,c]\n            g = gr[r][c]\n            if(typeof(tp) ===\"object\"  && !(tp.txt ===\"\")){\n                //r=tile[0]\n                //c = tile[1]\n                tp =tc.slice()\n            */\n                console.log(\"in there\")\n                if(g.txt > value){\n                    console.log(\"in here\")\n                    i = 2*i+1 \n                    if(myStruct[i]===\"undefined\")\n                    break\n                    /*r = myStruc[i][0] //left child\n                    c = myStruc[i][1] //left child*/\n                }\n                else{\n                    i = 2*i+2\n                    if(myStruct[i]===\"undefined\")\n                    break\n                    /*i = 2*i+2\n                    r = myStruc[i][0] //right child\n                    c = myStruc[i][1] //right child*/\n                }\n            \n            }\n\n        \n        }\n        \n\n    \n\n    return (\n        <div className = \"controls\" >\n                <form onSubmit = {addValue}>\n                    <input id=\"input1\" type=\"number\" placeholder=\"value\" />\n                    <button>Add</button>\n\n                </form>\n\n\n                <div>\n                    see items\n                </div>\n            </div>\n    )\n}\n\nexport default TreeOp\n"]},"metadata":{},"sourceType":"module"}