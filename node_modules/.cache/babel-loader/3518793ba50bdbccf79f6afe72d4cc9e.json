{"ast":null,"code":"var _jsxFileName = \"/Users/juvenal/Desktop/projects/StructureVisualizer/structure-vis/src/DataStructureVisualizer/StrucFuncs/ArrayOp.js\";\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction ArrayOp(props) {\n  const {\n    gr,\n    setGr,\n    ch,\n    st\n  } = props;\n\n  const addValue = e => {\n    e.preventDefault();\n    let index = document.getElementById(\"input1\").value;\n    index = parseInt(index, 10);\n    const value = document.getElementById(\"input2\").value;\n    const myStruc = st.find(e => e.id === ch.id).tile; //array of coordinates\n\n    const newGrid = gr.slice();\n    const myIndex = myStruc[index];\n    const i0 = myIndex[0];\n    const i1 = myIndex[1];\n    const tile = newGrid[i0][i1];\n    const newTile = { ...tile,\n      txt: `${value}`\n    };\n    newGrid[i0][i1] = newTile;\n    setGr(newGrid);\n  };\n\n  const removeValue = e => {\n    e.preventDefault();\n    let index = document.getElementById(\"input3\").value;\n    index = parseInt(index, 10);\n    const myStruc = st.find(e => e.id === ch.id).tile; //array of coordinates\n\n    const newGrid = gr.slice();\n    const myIndex = myStruc[index];\n    console.log(index);\n    console.log(myStruc);\n    const i0 = myIndex[0];\n    const i1 = myIndex[1];\n    const tile = newGrid[i0][i1];\n    const newTile = { ...tile,\n      txt: ``\n    };\n    newGrid[i0][i1] = newTile;\n    console.log(\"nooow\");\n    setGr(newGrid);\n  };\n\n  const fillArray = e => {\n    e.preventDefault();\n    const myStruc = st.find(e => e.id === ch.id).tile; //array of coordinates\n\n    for (let i = 0; i < myStruc.length; i++) {\n      let til1 = document.getElementById(myStruc[i].join());\n      til1.innerText = Math.floor(Math.random() * 100);\n    }\n  };\n\n  const bubbleSort = async e => {\n    e.preventDefault();\n    const myStruc = st.find(e => e.id === ch.id).tile; //array of coordinates\n\n    let keepGoing, t1, t2;\n\n    do {\n      keepGoing = false;\n\n      for (let i = 0; i < myStruc.length - 1; i++) {\n        let til1 = document.getElementById(myStruc[i].join());\n        let til2 = document.getElementById(myStruc[i + 1].join());\n        t1 = parseInt(til1.innerText, 10);\n        t2 = parseInt(til2.innerText, 10);\n        til1.classList.add(\"look\");\n        til2.classList.add(\"look\");\n\n        if (t1 > t2 || isNaN(t1) && !isNaN(t2)) {\n          til1.innerText = isNaN(t2) ? \"\" : t2;\n          til2.innerText = isNaN(t1) ? \"\" : t1;\n          keepGoing = true;\n        }\n\n        await new Promise(r => setTimeout(r, 50));\n        til1.classList.remove(\"look\");\n        til2.classList.remove(\"look\");\n      }\n    } while (keepGoing);\n  };\n\n  const insertionSort = async e => {\n    e.preventDefault();\n    const myStruc = st.find(e => e.id === ch.id).tile; //array of coordinates\n\n    let hole, t1, t2, til1, til2, hold2;\n\n    for (let i = 1; i < myStruc.length; i++) {\n      til1 = document.getElementById(myStruc[i - 1].join());\n      til2 = document.getElementById(myStruc[i].join());\n      hold2 = til2;\n      t1 = parseInt(til1.innerText, 10);\n      t2 = parseInt(til2.innerText, 10);\n      til2.classList.add(\"look\");\n      hole = i - 1;\n\n      while (hole >= 0 && t1 > t2 || isNaN(t1) && !isNaN(t2)) {\n        til1.innerText = isNaN(t2) ? \"\" : t2;\n        til2.innerText = isNaN(t1) ? \"\" : t1;\n        til2 = til1;\n        t2 = parseInt(til2.innerText, 10);\n        til1.classList.add(\"look-1\");\n        await new Promise(r => setTimeout(r, 50));\n        til1.classList.remove(\"look-1\");\n        hole = hole - 1;\n        if (hole === -1) break;\n        til1 = document.getElementById(myStruc[hole].join());\n        t1 = parseInt(til1.innerText, 10);\n      }\n\n      hold2.classList.remove(\"look\");\n    }\n  };\n\n  const quickSort = e => {\n    e.preventDefault();\n    const myStruc = st.find(e => e.id === ch.id).tile; //array of coordinates\n\n    qSort(myStruc, 0, myStruc.length - 1);\n  };\n\n  async function qSort(tiles, left, right) {\n    let index;\n\n    if (left < right) {\n      index = await partition(tiles, left, right);\n      qSort(tiles, left, index - 1);\n      qSort(tiles, index + 1, right);\n    }\n  }\n\n  const partition = async (items, left, right) => {\n    let pivotEl = document.getElementById(items[right].join());\n    let pivotVal = parseInt(pivotEl.innerText, 10);\n    pivotEl.classList.add(\"look\");\n    let i = left - 1;\n    let compEl2, compVal2;\n\n    for (let j = left; j <= right - 1; j++) {\n      // If current element is smaller than the pivot\n      let compEl = document.getElementById(items[j].join());\n      let compVal = parseInt(compEl.innerText, 10);\n      compEl.classList.add(\"look-1\");\n\n      if (compVal < pivotVal) //if compVal is smaller than pivot\n        {\n          i++; //swap smaller and larger tiles\n\n          compEl2 = document.getElementById(items[i].join());\n          compVal2 = parseInt(compEl2.innerText, 10);\n          compEl2.innerHTML = isNaN(compVal) ? \"\" : compVal;\n          compEl.innerHTML = isNaN(compVal2) ? \"\" : compVal2;\n        }\n\n      await new Promise(r => setTimeout(r, 50));\n      compEl.classList.remove(\"look-1\");\n    } //putting pivot in correct index\n\n\n    let compEl3 = document.getElementById(items[i + 1].join());\n    let compVal3 = parseInt(compEl3.innerText, 10);\n    pivotEl.innerText = isNaN(compVal3) ? \"\" : compVal3;\n    compEl3.innerText = isNaN(pivotVal) ? \"\" : pivotVal;\n    pivotEl.classList.remove(\"look\");\n    return i + 1;\n  }; // first call to quick sort\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"controls\",\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: addValue,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"input1\",\n        type: \"number\",\n        placeholder: \"index\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"input2\",\n        type: \"text\",\n        placeholder: \"value\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Add\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: removeValue,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"input3\",\n        type: \"number\",\n        placeholder: \"index\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Delete\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: bubbleSort,\n      children: \" bubble sort\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: insertionSort,\n      children: \" Insertion sort\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: quickSort,\n      children: \" Quick sort\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: fillArray,\n      children: \" Fill Array\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 200,\n    columnNumber: 13\n  }, this);\n}\n\n_c = ArrayOp;\nexport default ArrayOp;\n\nvar _c;\n\n$RefreshReg$(_c, \"ArrayOp\");","map":{"version":3,"sources":["/Users/juvenal/Desktop/projects/StructureVisualizer/structure-vis/src/DataStructureVisualizer/StrucFuncs/ArrayOp.js"],"names":["React","ArrayOp","props","gr","setGr","ch","st","addValue","e","preventDefault","index","document","getElementById","value","parseInt","myStruc","find","id","tile","newGrid","slice","myIndex","i0","i1","newTile","txt","removeValue","console","log","fillArray","i","length","til1","join","innerText","Math","floor","random","bubbleSort","keepGoing","t1","t2","til2","classList","add","isNaN","Promise","r","setTimeout","remove","insertionSort","hole","hold2","quickSort","qSort","tiles","left","right","partition","items","pivotEl","pivotVal","compEl2","compVal2","j","compEl","compVal","innerHTML","compEl3","compVal3"],"mappings":"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","sourcesContent":["import React from 'react'\n\nfunction ArrayOp(props) {\n    const {gr,setGr,ch,st} = props\n\n    const addValue = (e) => {\n        e.preventDefault()\n        let index = document.getElementById(\"input1\").value\n        index = parseInt(index,10)\n        const value = document.getElementById(\"input2\").value\n        \n\n\n        const myStruc = (st.find(e => e.id === ch.id).tile) //array of coordinates\n        const newGrid = gr.slice()\n        const myIndex = myStruc[index]\n        const i0 = myIndex[0]\n        const i1 = myIndex[1]\n        const tile = newGrid[i0][i1] \n        const newTile= {\n            ...tile,\n            txt:`${value}`\n\n            }\n        newGrid[i0][i1] = newTile\n        setGr(newGrid)\n        \n    } \n\n    const removeValue = (e) => {\n        e.preventDefault()\n        let index = document.getElementById(\"input3\").value\n        index = parseInt(index,10)\n        \n        \n\n\n        const myStruc = (st.find(e => e.id === ch.id).tile) //array of coordinates\n        const newGrid = gr.slice()\n        const myIndex = myStruc[index]\n        console.log(index)\n        console.log(myStruc)\n        const i0 = myIndex[0]\n        const i1 = myIndex[1]\n        const tile = newGrid[i0][i1] \n        const newTile= {\n            ...tile,\n            txt:``\n\n            }\n        newGrid[i0][i1] = newTile\n        console.log(\"nooow\")\n        setGr(newGrid)\n\n    } \n    const fillArray = (e) =>{\n        e.preventDefault()\n        const myStruc = (st.find(e => e.id === ch.id).tile) //array of coordinates\n        for(let i = 0; i <myStruc.length;i++){\n            let til1 = document.getElementById(myStruc[i].join())\n            til1.innerText = Math.floor(Math.random() *100)\n        \n        }\n    }\n\n    const bubbleSort = async (e) => {\n        e.preventDefault()\n        const myStruc = (st.find(e => e.id === ch.id).tile) //array of coordinates\n        let  keepGoing,t1,t2\n\n\n        do{\n            keepGoing = false\n            for(let i = 0; i <myStruc.length-1;i++){\n                let til1 = document.getElementById(myStruc[i].join())\n                let til2 = document.getElementById(myStruc[i+1].join())\n                t1 = parseInt(til1.innerText,10)\n                t2 = parseInt(til2.innerText,10)\n                til1.classList.add(\"look\")\n                til2.classList.add(\"look\")\n                if(t1 > t2  || isNaN(t1) && !isNaN(t2) ){\n                    til1.innerText = isNaN(t2) ? \"\" : t2\n                    til2.innerText = isNaN(t1) ? \"\" : t1\n                    keepGoing = true\n                }\n                await new Promise(r => setTimeout(r, 50));\n                til1.classList.remove(\"look\")\n                til2.classList.remove(\"look\")\n    \n            }\n        }while(keepGoing)\n    } \n\n    const insertionSort = async (e) => {\n        e.preventDefault()\n        const myStruc = (st.find(e => e.id === ch.id).tile) //array of coordinates\n        let  hole,t1,t2,til1,til2,hold2\n\n \n        for(let i = 1; i <myStruc.length;i++){\n\n            til1 = document.getElementById(myStruc[i-1].join())\n            til2 = document.getElementById(myStruc[i].join())\n            hold2 = til2\n            t1 = parseInt(til1.innerText,10)\n            t2 = parseInt(til2.innerText,10)\n            til2.classList.add(\"look\")\n            hole = i-1\n            while(hole>=0 && t1 > t2 || isNaN(t1) && !isNaN(t2) ){\n                til1.innerText = isNaN(t2) ? \"\" : t2\n                til2.innerText = isNaN(t1) ? \"\" : t1\n\n                til2 = til1\n                t2 = parseInt(til2.innerText,10)\n                til1.classList.add(\"look-1\")\n                await new Promise(r => setTimeout(r, 50));\n                til1.classList.remove(\"look-1\")\n                hole =hole-1\n                if(hole ===-1) break\n                til1 = document.getElementById(myStruc[hole].join())\n\n                t1 = parseInt(til1.innerText,10)\n\n                \n\n\n            }\n            hold2.classList.remove(\"look\")\n\n        }\n        \n    } \n    const quickSort =   (e) => {\n        e.preventDefault()\n        const myStruc = (st.find(e => e.id === ch.id).tile) //array of coordinates\n        qSort(myStruc, 0,myStruc.length -1)\n    }\n    async function  qSort( tiles,left, right) {\n        let index;\n        if (left < right) {\n\n            index =  await partition( tiles,left, right); \n         \n            qSort( tiles,left, index - 1);\n            \n           \n            qSort(tiles,index+1, right);\n           \n        }\n    }\n\n    const  partition = async (items, left, right)=> {\n        let pivotEl = document.getElementById(items[right].join())  \n        let pivotVal = parseInt(pivotEl.innerText,10)\n        pivotEl.classList.add(\"look\")\n\n        let i = (left - 1)\n        let compEl2,compVal2  \n        for (let j = left; j <= right- 1; j++)\n        {\n            // If current element is smaller than the pivot\n            let compEl = document.getElementById(items[j].join())  \n\n            let compVal = parseInt(compEl.innerText,10)\n            compEl.classList.add(\"look-1\")\n\n            if (compVal < pivotVal) //if compVal is smaller than pivot\n            {\n                i++;    \n                //swap smaller and larger tiles\n                compEl2 = document.getElementById(items[i].join())\n                compVal2 = parseInt(compEl2.innerText,10)\n                compEl2.innerHTML = isNaN(compVal) ? \"\" : compVal \n                compEl.innerHTML = isNaN(compVal2) ? \"\" : compVal2\n\n            }\n            await new Promise(r => setTimeout(r, 50))\n            compEl.classList.remove(\"look-1\")\n\n\n\n        }\n\n\n        //putting pivot in correct index\n        let compEl3 = document.getElementById(items[i+1].join())\n        let compVal3 = parseInt(compEl3.innerText,10)\n        pivotEl.innerText = isNaN(compVal3) ? \"\" : compVal3\n        compEl3.innerText = isNaN(pivotVal) ? \"\" : pivotVal  \n        pivotEl.classList.remove(\"look\")\n\n        return (i + 1)\n    }\n    \n    // first call to quick sort\n\n    \n    \n    return (\n            <div className = \"controls\" >\n                <form onSubmit = {addValue}>\n                    <input id=\"input1\" type=\"number\" placeholder=\"index\" />\n                    <input id=\"input2\" type=\"text\" placeholder=\"value\" />\n                    <button>Add</button>\n\n                </form>\n\n                <form onSubmit = {removeValue}>\n                    <input id=\"input3\"  type=\"number\" placeholder=\"index\" />\n                    <button>Delete</button>\n\n                </form>\n                \n                <button onClick={bubbleSort}> bubble sort</button>\n                <button onClick={insertionSort}> Insertion sort</button>\n                <button onClick={quickSort}> Quick sort</button>\n                <button onClick={fillArray}> Fill Array</button>\n            </div>    )\n}\n\nexport default ArrayOp\n\n\n"]},"metadata":{},"sourceType":"module"}