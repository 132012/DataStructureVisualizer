{"ast":null,"code":"var _jsxFileName = \"/Users/juvenal/Desktop/projects/StructureVisualizer/structure-vis/src/DataStructureVisualizer/Tile.js\";\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Tile(props) {\n  let {\n    col,\n    row,\n    sType,\n    sId,\n    ch,\n    setCh,\n    pr,\n    setPr,\n    gr,\n    setGr\n  } = props; //console.log(col +\" \"+ row+\" \"+sType+ \" \"+sId)\n\n  const mouseDown = (aRow, aCol) => {\n    const newAr = ch.slice();\n    newAr.push({\n      aRow,\n      aCol\n    });\n    setCh(newAr);\n    const newGrid = updateGrid(gr, row, col);\n    setPr(true);\n  };\n\n  const mouseLift = () => {\n    setPr(false);\n    console.log(ch);\n  };\n\n  const mouseEnter = (aRow, aCol) => {\n    if (!pr) return;\n    const newAr = ch.slice();\n    newAr.push({\n      aRow,\n      aCol\n    });\n    setCh(newAr);\n  }; //let extra = color ? 'bground' : ''\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `myTile ${extra}`,\n    onMouseDown: () => mouseDown(row, col),\n    onMouseUp: () => mouseLift(),\n    onMouseEnter: () => mouseEnter(row, col)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 9\n  }, this);\n}\n\n_c = Tile;\nexport default Tile;\n\nconst updateGrid = (grid, row, col) => {\n  const newGrid = grid.slice();\n  const tile = newGrid[row][col];\n  const newTile = { ...tile,\n    isPicked: !isPicked\n  };\n  newGrid[row][col] = newTile;\n  return newGrid;\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"Tile\");","map":{"version":3,"sources":["/Users/juvenal/Desktop/projects/StructureVisualizer/structure-vis/src/DataStructureVisualizer/Tile.js"],"names":["React","Tile","props","col","row","sType","sId","ch","setCh","pr","setPr","gr","setGr","mouseDown","aRow","aCol","newAr","slice","push","newGrid","updateGrid","mouseLift","console","log","mouseEnter","extra","grid","tile","newTile","isPicked"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;;;AAEA,SAASC,IAAT,CAAcC,KAAd,EAAqB;AACjB,MAAI;AAACC,IAAAA,GAAD;AAAKC,IAAAA,GAAL;AAASC,IAAAA,KAAT;AAAeC,IAAAA,GAAf;AAAmBC,IAAAA,EAAnB;AAAsBC,IAAAA,KAAtB;AAA4BC,IAAAA,EAA5B;AAA+BC,IAAAA,KAA/B;AAAqCC,IAAAA,EAArC;AAAwCC,IAAAA;AAAxC,MAAiDV,KAArD,CADiB,CAEjB;;AAEA,QAAMW,SAAS,GAAG,CAACC,IAAD,EAAMC,IAAN,KAAe;AAC7B,UAAMC,KAAK,GAAGT,EAAE,CAACU,KAAH,EAAd;AACAD,IAAAA,KAAK,CAACE,IAAN,CAAW;AAACJ,MAAAA,IAAD;AAAMC,MAAAA;AAAN,KAAX;AACAP,IAAAA,KAAK,CAACQ,KAAD,CAAL;AAEA,UAAMG,OAAO,GAAGC,UAAU,CAACT,EAAD,EAAIP,GAAJ,EAAQD,GAAR,CAA1B;AAEAO,IAAAA,KAAK,CAAC,IAAD,CAAL;AACH,GARD;;AAUA,QAAMW,SAAS,GAAG,MAAM;AACpBX,IAAAA,KAAK,CAAC,KAAD,CAAL;AACAY,IAAAA,OAAO,CAACC,GAAR,CAAYhB,EAAZ;AACH,GAHD;;AAKA,QAAMiB,UAAU,GAAE,CAACV,IAAD,EAAMC,IAAN,KAAc;AAE5B,QAAG,CAACN,EAAJ,EAAQ;AACR,UAAMO,KAAK,GAAGT,EAAE,CAACU,KAAH,EAAd;AACAD,IAAAA,KAAK,CAACE,IAAN,CAAW;AAACJ,MAAAA,IAAD;AAAMC,MAAAA;AAAN,KAAX;AACAP,IAAAA,KAAK,CAACQ,KAAD,CAAL;AACH,GAND,CAnBiB,CA2BjB;;;AACA,sBACI;AAAK,IAAA,SAAS,EAAK,UAASS,KAAM,EAAlC;AACK,IAAA,WAAW,EAAI,MAAMZ,SAAS,CAACT,GAAD,EAAKD,GAAL,CADnC;AAEK,IAAA,SAAS,EAAI,MAAMkB,SAAS,EAFjC;AAGK,IAAA,YAAY,EAAK,MAAMG,UAAU,CAACpB,GAAD,EAAKD,GAAL;AAHtC;AAAA;AAAA;AAAA;AAAA,UADJ;AASH;;KArCQF,I;AAuCT,eAAeA,IAAf;;AAGA,MAAMmB,UAAU,GAAG,CAACM,IAAD,EAAOtB,GAAP,EAAYD,GAAZ,KAAoB;AACnC,QAAMgB,OAAO,GAAGO,IAAI,CAACT,KAAL,EAAhB;AACA,QAAMU,IAAI,GAAGR,OAAO,CAACf,GAAD,CAAP,CAAaD,GAAb,CAAb;AACA,QAAMyB,OAAO,GAAE,EACb,GAAGD,IADU;AAEbE,IAAAA,QAAQ,EAAE,CAACA;AAFE,GAAf;AAIAV,EAAAA,OAAO,CAACf,GAAD,CAAP,CAAaD,GAAb,IAAoByB,OAApB;AACA,SAAOT,OAAP;AACD,CATH","sourcesContent":["import React from 'react'\n\nfunction Tile(props) {\n    let {col,row,sType,sId,ch,setCh,pr,setPr,gr,setGr} = props\n    //console.log(col +\" \"+ row+\" \"+sType+ \" \"+sId)\n\n    const mouseDown = (aRow,aCol) => {\n        const newAr = ch.slice()\n        newAr.push({aRow,aCol})\n        setCh(newAr)\n\n        const newGrid = updateGrid(gr,row,col)\n\n        setPr(true)\n    }\n    \n    const mouseLift = () => {\n        setPr(false)\n        console.log(ch)\n    }\n    \n    const mouseEnter =(aRow,aCol)=> {\n\n        if(!pr) return \n        const newAr = ch.slice()\n        newAr.push({aRow,aCol})\n        setCh(newAr)\n    }\n    \n    //let extra = color ? 'bground' : ''\n    return (\n        <div className = {`myTile ${extra}`} \n             onMouseDown = {() => mouseDown(row,col)}\n             onMouseUp = {() => mouseLift()}\n             onMouseEnter = { () => mouseEnter(row,col) }>\n             \n        \n        </div>\n    )\n}\n\nexport default Tile\n\n\nconst updateGrid = (grid, row, col) => {\n    const newGrid = grid.slice();\n    const tile = newGrid[row][col];\n    const newTile= {\n      ...tile,\n      isPicked: !isPicked,\n    };\n    newGrid[row][col] = newTile;\n    return newGrid;\n  };\n\n"]},"metadata":{},"sourceType":"module"}