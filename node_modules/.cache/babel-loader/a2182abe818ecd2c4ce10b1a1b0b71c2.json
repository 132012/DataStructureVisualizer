{"ast":null,"code":"var _jsxFileName = \"/Users/juvenal/Desktop/projects/StructureVisualizer/structure-vis/src/DataStructureVisualizer/Tile.js\";\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Tile(props) {\n  const {\n    col,\n    row,\n    sType,\n    sId,\n    ch,\n    setCh\n  } = props;\n  /*const mouseDown = (aRow,aCol) => {\n      const newAr = ch.slice()\n      newAr.push({aRow,aCol})\n      setCh({cTiles:newAr,hold:true})\n  }\n  \n  const mouseLift = () => {\n      //pop up\n      setCh({hold:false})\n  }\n  \n  const mouseEnter =(aRow,aCol)=> {\n      if(!ch.hold) return \n      const newAr = ch.slice()\n      newAr.push({aRow,aCol})\n      setCh({cTiles:newAr})\n  }\n  */\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"myTile\"\n    /*onMouseDown = {mouseDown(row,col)}\n    onMouseUp = {mouseLift()}\n    onMouseEnter = {mouseEnter(row,col)}>\n    \n    */\n\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 9\n  }, this);\n}\n\n_c = Tile;\nexport default Tile;\n\nvar _c;\n\n$RefreshReg$(_c, \"Tile\");","map":{"version":3,"sources":["/Users/juvenal/Desktop/projects/StructureVisualizer/structure-vis/src/DataStructureVisualizer/Tile.js"],"names":["React","Tile","props","col","row","sType","sId","ch","setCh"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;;;AAEA,SAASC,IAAT,CAAcC,KAAd,EAAqB;AACjB,QAAM;AAACC,IAAAA,GAAD;AAAKC,IAAAA,GAAL;AAASC,IAAAA,KAAT;AAAeC,IAAAA,GAAf;AAAmBC,IAAAA,EAAnB;AAAsBC,IAAAA;AAAtB,MAA+BN,KAArC;AAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACI,sBACI;AAAK,IAAA,SAAS,EAAG;AACZ;AACb;AACA;AACA;AACA;;AALQ;AAAA;AAAA;AAAA;AAAA,UADJ;AASH;;KA9BQD,I;AAgCT,eAAeA,IAAf","sourcesContent":["import React from 'react'\n\nfunction Tile(props) {\n    const {col,row,sType,sId,ch,setCh} = props\n\n    /*const mouseDown = (aRow,aCol) => {\n        const newAr = ch.slice()\n        newAr.push({aRow,aCol})\n        setCh({cTiles:newAr,hold:true})\n    }\n    \n    const mouseLift = () => {\n        //pop up\n        setCh({hold:false})\n    }\n    \n    const mouseEnter =(aRow,aCol)=> {\n        if(!ch.hold) return \n        const newAr = ch.slice()\n        newAr.push({aRow,aCol})\n        setCh({cTiles:newAr})\n    }\n    */\n    return (\n        <div className = \"myTile\" \n             /*onMouseDown = {mouseDown(row,col)}\n             onMouseUp = {mouseLift()}\n             onMouseEnter = {mouseEnter(row,col)}>\n             \n        */>\n        </div>\n    )\n}\n\nexport default Tile\n\n"]},"metadata":{},"sourceType":"module"}