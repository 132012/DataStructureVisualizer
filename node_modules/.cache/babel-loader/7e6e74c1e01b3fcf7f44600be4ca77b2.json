{"ast":null,"code":"var _jsxFileName = \"/Users/juvenal/Desktop/projects/StructureVisualizer/structure-vis/src/DataStructureVisualizer/Tile.js\";\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Tile(props) {\n  let {\n    col,\n    row,\n    sType,\n    sId,\n    ch,\n    setCh,\n    pr,\n    setPr,\n    gr,\n    setGr,\n    isP\n  } = props; //console.log(col +\" \"+ row+\" \"+sType+ \" \"+sId)\n\n  const updateGrid = (grid, row, col) => {\n    const newGrid = grid.slice();\n    const tile = newGrid[row][col];\n    const newTile = { ...tile,\n      isPicked: !isP\n    };\n    newGrid[row][col] = newTile;\n    return newGrid;\n  };\n\n  const mouseDown = (aRow, aCol) => {\n    const newAr = ch.slice();\n    newAr.push({\n      aRow,\n      aCol\n    });\n    setCh(newAr);\n    const newGrid = updateGrid(gr, row, col);\n    setGr(newGrid);\n    setPr(true);\n  };\n\n  const mouseLift = () => {\n    setPr(false);\n    setCh([]);\n    console.log(ch);\n    prompt(\"Size:?\");\n  };\n\n  const mouseEnter = (aRow, aCol) => {\n    if (!pr) return;\n    const newAr = ch.slice();\n    newAr.push({\n      aRow,\n      aCol\n    });\n    setCh(newAr);\n    const newGrid = updateGrid(gr, row, col);\n    setGr(newGrid);\n  };\n\n  let extra = isP ? 'bground' : '';\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `myTile ${extra}`,\n    onMouseDown: () => mouseDown(row, col),\n    onMouseUp: () => mouseLift(),\n    onMouseEnter: () => mouseEnter(row, col)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 9\n  }, this);\n}\n\n_c = Tile;\nexport default Tile;\n\nvar _c;\n\n$RefreshReg$(_c, \"Tile\");","map":{"version":3,"sources":["/Users/juvenal/Desktop/projects/StructureVisualizer/structure-vis/src/DataStructureVisualizer/Tile.js"],"names":["React","Tile","props","col","row","sType","sId","ch","setCh","pr","setPr","gr","setGr","isP","updateGrid","grid","newGrid","slice","tile","newTile","isPicked","mouseDown","aRow","aCol","newAr","push","mouseLift","console","log","prompt","mouseEnter","extra"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;;;AAEA,SAASC,IAAT,CAAcC,KAAd,EAAqB;AACjB,MAAI;AAACC,IAAAA,GAAD;AAAKC,IAAAA,GAAL;AAASC,IAAAA,KAAT;AAAeC,IAAAA,GAAf;AAAmBC,IAAAA,EAAnB;AAAsBC,IAAAA,KAAtB;AAA4BC,IAAAA,EAA5B;AAA+BC,IAAAA,KAA/B;AAAqCC,IAAAA,EAArC;AAAwCC,IAAAA,KAAxC;AAA8CC,IAAAA;AAA9C,MAAqDX,KAAzD,CADiB,CAEjB;;AAGA,QAAMY,UAAU,GAAG,CAACC,IAAD,EAAOX,GAAP,EAAYD,GAAZ,KAAoB;AACnC,UAAMa,OAAO,GAAGD,IAAI,CAACE,KAAL,EAAhB;AACA,UAAMC,IAAI,GAAGF,OAAO,CAACZ,GAAD,CAAP,CAAaD,GAAb,CAAb;AACA,UAAMgB,OAAO,GAAE,EACb,GAAGD,IADU;AAEbE,MAAAA,QAAQ,EAAE,CAACP;AAFE,KAAf;AAIAG,IAAAA,OAAO,CAACZ,GAAD,CAAP,CAAaD,GAAb,IAAoBgB,OAApB;AACA,WAAOH,OAAP;AACD,GATH;;AAWA,QAAMK,SAAS,GAAG,CAACC,IAAD,EAAMC,IAAN,KAAe;AAC7B,UAAMC,KAAK,GAAGjB,EAAE,CAACU,KAAH,EAAd;AACAO,IAAAA,KAAK,CAACC,IAAN,CAAW;AAACH,MAAAA,IAAD;AAAMC,MAAAA;AAAN,KAAX;AACAf,IAAAA,KAAK,CAACgB,KAAD,CAAL;AAEA,UAAMR,OAAO,GAAGF,UAAU,CAACH,EAAD,EAAIP,GAAJ,EAAQD,GAAR,CAA1B;AACAS,IAAAA,KAAK,CAACI,OAAD,CAAL;AAEAN,IAAAA,KAAK,CAAC,IAAD,CAAL;AACH,GATD;;AAWA,QAAMgB,SAAS,GAAG,MAAM;AACpBhB,IAAAA,KAAK,CAAC,KAAD,CAAL;AACAF,IAAAA,KAAK,CAAC,EAAD,CAAL;AACAmB,IAAAA,OAAO,CAACC,GAAR,CAAYrB,EAAZ;AACAsB,IAAAA,MAAM,CAAC,QAAD,CAAN;AACH,GALD;;AAOA,QAAMC,UAAU,GAAE,CAACR,IAAD,EAAMC,IAAN,KAAc;AAE5B,QAAG,CAACd,EAAJ,EAAQ;AACR,UAAMe,KAAK,GAAGjB,EAAE,CAACU,KAAH,EAAd;AACAO,IAAAA,KAAK,CAACC,IAAN,CAAW;AAACH,MAAAA,IAAD;AAAMC,MAAAA;AAAN,KAAX;AACAf,IAAAA,KAAK,CAACgB,KAAD,CAAL;AAEA,UAAMR,OAAO,GAAGF,UAAU,CAACH,EAAD,EAAIP,GAAJ,EAAQD,GAAR,CAA1B;AACAS,IAAAA,KAAK,CAACI,OAAD,CAAL;AACH,GATD;;AAaA,MAAIe,KAAK,GAAGlB,GAAG,GAAG,SAAH,GAAe,EAA9B;AACA,sBACI;AAAK,IAAA,SAAS,EAAK,UAASkB,KAAM,EAAlC;AACK,IAAA,WAAW,EAAI,MAAMV,SAAS,CAACjB,GAAD,EAAKD,GAAL,CADnC;AAEK,IAAA,SAAS,EAAI,MAAMuB,SAAS,EAFjC;AAGK,IAAA,YAAY,EAAK,MAAMI,UAAU,CAAC1B,GAAD,EAAKD,GAAL;AAHtC;AAAA;AAAA;AAAA;AAAA,UADJ;AASH;;KAzDQF,I;AA2DT,eAAeA,IAAf","sourcesContent":["import React from 'react'\n\nfunction Tile(props) {\n    let {col,row,sType,sId,ch,setCh,pr,setPr,gr,setGr,isP} = props\n    //console.log(col +\" \"+ row+\" \"+sType+ \" \"+sId)\n\n\n    const updateGrid = (grid, row, col) => {\n        const newGrid = grid.slice();\n        const tile = newGrid[row][col];\n        const newTile= {\n          ...tile,\n          isPicked: !isP,\n        };\n        newGrid[row][col] = newTile;\n        return newGrid;\n      };\n\n    const mouseDown = (aRow,aCol) => {\n        const newAr = ch.slice()\n        newAr.push({aRow,aCol})\n        setCh(newAr)\n\n        const newGrid = updateGrid(gr,row,col)\n        setGr(newGrid)\n\n        setPr(true)\n    }\n    \n    const mouseLift = () => {\n        setPr(false)\n        setCh([])\n        console.log(ch)\n        prompt(\"Size:?\")\n    }\n    \n    const mouseEnter =(aRow,aCol)=> {\n\n        if(!pr) return \n        const newAr = ch.slice()\n        newAr.push({aRow,aCol})\n        setCh(newAr)\n\n        const newGrid = updateGrid(gr,row,col)\n        setGr(newGrid)\n    }\n\n    \n    \n    let extra = isP ? 'bground' : ''\n    return (\n        <div className = {`myTile ${extra}`} \n             onMouseDown = {() => mouseDown(row,col)}\n             onMouseUp = {() => mouseLift()}\n             onMouseEnter = { () => mouseEnter(row,col) }>\n             \n        \n        </div>\n    )\n}\n\nexport default Tile\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}