{"ast":null,"code":"var _jsxFileName = \"/Users/juvenal/Desktop/projects/StructureVisualizer/structure-vis/src/DataStructureVisualizer/Tile.js\";\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Tile(props) {\n  const {\n    col,\n    row,\n    sType,\n    sId,\n    st,\n    setSt,\n    ch,\n    setCh,\n    gr,\n    setGr,\n    isP,\n    op,\n    setOp,\n    type,\n    count,\n    setCount,\n    txt\n  } = props;\n\n  const stackGrid = size => {\n    if (row - size >= -1) {\n      const newGrid = gr.slice();\n      let tile,\n          newTile,\n          arow,\n          coor = [];\n\n      for (let i = 0; i < size; i++) {\n        arow = row - i;\n        tile = newGrid[arow][col];\n        newTile = { ...tile,\n          isPicked: !isP,\n          strType: type.STACK,\n          strId: count\n        };\n        newGrid[arow][col] = newTile;\n        coor.push([arow, col]);\n      }\n\n      setGr(newGrid);\n      let newCount = count + 1;\n      setCount(newCount);\n      const newSt = st.slice(); //copy list of data structues\n\n      newSt.push({\n        id: count,\n        tile: coor\n      });\n      setSt(newSt);\n    }\n  };\n\n  const arrayGrid = size => {\n    //setOp(\"\")\n    if (col + size <= 45) {\n      const newGrid = gr.slice();\n      let tile,\n          newTile,\n          acol,\n          coor = [];\n\n      for (let i = 0; i < size; i++) {\n        tile = newGrid[row][col + i];\n        newTile = { ...tile,\n          isPicked: !isP,\n          strType: type.ARRAY,\n          strId: count\n        };\n        newGrid[row][col + i] = newTile;\n        acol = col + i;\n        coor.push([row, acol]);\n      }\n\n      setGr(newGrid);\n      let newCount = count + 1;\n      setCount(newCount);\n      const newSt = st.slice(); //copy list of data structues\n\n      newSt.push({\n        id: count,\n        tile: coor\n      });\n      setSt(newSt);\n      console.log(st);\n    }\n  };\n\n  const queueGrid = size => {\n    if (col - size >= -1) {\n      const newGrid = gr.slice();\n      let tile,\n          newTile,\n          acol,\n          coor = [];\n\n      for (let i = 0; i < size; i++) {\n        acol = col - i;\n        tile = newGrid[row][acol];\n        newTile = { ...tile,\n          isPicked: !isP,\n          strType: type.QUEUE,\n          strId: count\n        };\n        newGrid[row][acol] = newTile;\n        coor.push([row, acol]);\n      }\n\n      setGr(newGrid);\n      let newCount = count + 1;\n      setCount(newCount);\n      const newSt = st.slice(); //copy list of data structues\n\n      newSt.push({\n        id: count,\n        tile: coor\n      });\n      setSt(newSt);\n    }\n  };\n\n  const mapGrid = size => {\n    if (col + 2 <= 44 && row + size <= 20) {\n      const newGrid = gr.slice();\n      let tile,\n          newTile,\n          coor = [],\n          arr,\n          r,\n          c;\n\n      for (let i = 0; i < size; i++) {\n        arr = [];\n\n        for (let j = 0; j < 3; j++) {\n          r = row + i;\n          c = col + j;\n          tile = newGrid[r][c];\n          newTile = { ...tile,\n            isPicked: !isP,\n            strType: type.MAP,\n            strId: count\n          };\n          newGrid[r][c] = newTile; //update tile in copy grid\n\n          arr.push([r, c]); //pushes for single key/value\n        }\n\n        coor.push(arr);\n      }\n\n      setGr(newGrid);\n      let newCount = count + 1;\n      setCount(newCount);\n      const newSt = st.slice(); //copy list of data structues\n\n      newSt.push({\n        id: count,\n        tile: coor\n      });\n      setSt(newSt);\n    }\n  };\n\n  const treeGrid = () => {\n    //setOp(\"\")\n    if (col <= 45) {\n      const newGrid = gr.slice();\n      let tile,\n          newTile,\n          pRow,\n          pCol,\n          coor = [[row, col]]; // create  root tile\n\n      tile = newGrid[row][col];\n      newTile = { ...tile,\n        isPicked: !isP,\n        strType: type.TREE,\n        strId: count\n      };\n      newGrid[row][col] = newTile;\n      coor.push([row, col]); //create children tiles\n\n      let offset = [4, 4, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1];\n      let lim = 2;\n\n      for (let i = 0; i < 7; i++) {\n        [pRow, pCol] = coor[i];\n\n        for (let j = 1; j < 3; j++) {\n          tile = newGrid[pRow + 1][pCol];\n          newTile = { ...tile,\n            isPicked: !isP,\n            strType: type.TREE,\n            strId: count\n          };\n        }\n\n        newGrid[pRow][pCol] = newTile;\n        coor.push([pRow, pCol]);\n        lim *= 2;\n      }\n\n      setGr(newGrid);\n      let newCount = count + 1;\n      setCount(newCount);\n      const newSt = st.slice(); //copy list of data structues\n\n      newSt.push({\n        id: count,\n        tile: coor\n      });\n      setSt(newSt);\n      console.log(st);\n    }\n  };\n\n  const click = () => {\n    if (sId === 0) {\n      if (op !== \"\") {\n        let size = parseInt(prompt(\"Size:\"), 10);\n        if (op === \"Array\") arrayGrid(size);else if (op === \"Stack\") stackGrid(size);else if (op === \"Queue\") queueGrid(size);else if (op === \"HashMap\") mapGrid(size);else if (op === \"Tree\") console.log(\"nothing yet\");else if (op === \"Graph\") console.log(\"nothing yet\");\n      }\n    } else {\n      setCh({\n        id: sId,\n        type: sType\n      });\n    }\n  };\n\n  const extra = sId === ch.id ? 'highlight' : '';\n  const main = sType === `` ? `` : sType === type.ARRAY ? `array` : sType === type.STACK ? `stack` : sType === type.QUEUE ? `queue` : sType === type.MAP ? `map` : sType === type.TREE ? `tree` : `graph`;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: ` myTile ${main} ${extra}`,\n    onClick: () => click(),\n    children: txt\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 219,\n    columnNumber: 9\n  }, this);\n}\n\n_c = Tile;\nexport default Tile;\n\nvar _c;\n\n$RefreshReg$(_c, \"Tile\");","map":{"version":3,"sources":["/Users/juvenal/Desktop/projects/StructureVisualizer/structure-vis/src/DataStructureVisualizer/Tile.js"],"names":["React","Tile","props","col","row","sType","sId","st","setSt","ch","setCh","gr","setGr","isP","op","setOp","type","count","setCount","txt","stackGrid","size","newGrid","slice","tile","newTile","arow","coor","i","isPicked","strType","STACK","strId","push","newCount","newSt","id","arrayGrid","acol","ARRAY","console","log","queueGrid","QUEUE","mapGrid","arr","r","c","j","MAP","treeGrid","pRow","pCol","TREE","offset","lim","click","parseInt","prompt","extra","main"],"mappings":"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","sourcesContent":["import React from 'react'\n\nfunction Tile(props) {\n    const {col,row,sType,sId,st,setSt,ch,setCh,gr,setGr,isP,op,setOp,type,count,setCount,txt} = props\n\n\n    const stackGrid = ( size) => {\n        if((row -size) >= -1){\n\n        const newGrid = gr.slice();\n        let tile,newTile,arow,coor =[]\n        for(let i =0;i<size;i++){\n            arow =row-i\n            tile = newGrid[arow][col];\n            newTile= {\n              ...tile,\n              isPicked: !isP,\n              strType: type.STACK,\n              strId:count\n            };\n\n            newGrid[arow][col] = newTile\n            coor.push([arow,col])\n        }\n        setGr(newGrid)\n        let newCount = count +1;\n        setCount(newCount)\n\n        const newSt = st.slice() //copy list of data structues\n        newSt.push({id: count, tile: coor})\n        setSt(newSt)\n        }\n      }\n      \n    const arrayGrid = (size) =>{\n        //setOp(\"\")\n        if((col +size) <= 45){\n\n            const newGrid = gr.slice()\n            let tile, newTile,acol,coor =[]\n            \n\n            for(let i =0;i<size;i++){\n                tile = newGrid[row][col+i]\n                newTile= {\n                ...tile,\n                isPicked: !isP,\n                strType: type.ARRAY,\n                strId:count\n                };\n\n                newGrid[row][col+i] = newTile\n                acol =col+i\n                coor.push([row,acol])\n            }\n            setGr(newGrid)\n            let newCount = count +1;\n            setCount(newCount)\n\n            const newSt = st.slice() //copy list of data structues\n            newSt.push({id: count, tile: coor})\n            setSt(newSt)\n            console.log(st)\n        }\n\n    }\n\n    const queueGrid = (size) => {\n        if((col -size) >= -1){\n\n            const newGrid = gr.slice();\n            let tile, newTile,acol,coor =[]\n            for(let i =0;i<size;i++){\n                acol = col-i\n                tile = newGrid[row][acol];\n                newTile= {\n                ...tile,\n                isPicked: !isP,\n                strType: type.QUEUE,\n                strId:count\n\n                };\n\n                newGrid[row][acol] = newTile;\n                coor.push([row,acol])\n            }\n            setGr(newGrid)\n            let newCount = count +1;\n            setCount(newCount)\n\n            const newSt = st.slice() //copy list of data structues\n            newSt.push({id: count, tile: coor})\n            setSt(newSt)\n        }\n    }\n    const mapGrid = (size) => {\n        if((col +2) <= 44  && (row +size) <= 20){\n            const newGrid = gr.slice();\n            let tile, newTile,coor =[],arr,r,c\n            for(let i = 0; i<size;i++){\n                arr =[]\n                for(let j = 0;j<3; j++){\n                    r=row+i\n                    c=col+j\n                    tile = newGrid[r][c]\n                    newTile= {\n                    ...tile,\n                    isPicked: !isP,\n                    strType: type.MAP, \n                    strId:count\n\n                    }\n                newGrid[r][c] = newTile; //update tile in copy grid\n                \n                arr.push([r,c]) //pushes for single key/value\n\n                \n                }\n                coor.push(arr)\n            }\n            setGr(newGrid)\n            let newCount = count +1;\n            setCount(newCount)\n\n            const newSt = st.slice() //copy list of data structues\n            newSt.push({id: count, tile: coor})\n            setSt(newSt)\n\n        }\n    }\n\n    const treeGrid = () =>{\n        //setOp(\"\")\n        if((col ) <= 45){\n\n            const newGrid = gr.slice()\n            let tile, newTile,pRow,pCol,coor =[[row,col]]\n\n            // create  root tile\n            tile = newGrid[row][col]\n            newTile= {\n            ...tile,\n            isPicked: !isP,\n            strType: type.TREE,\n            strId:count\n            };\n\n            newGrid[row][col] = newTile\n            coor.push([row,col])\n            \n            //create children tiles\n            let offset = [4,4,2,2,2,2,1,1,1,1,1,1,1,1]\n\n            let lim = 2\n            for(let i =0;i<7;i++){\n                [pRow,pCol] = coor[i]\n                for(let j = 1; j<3 ;j++){\n                    tile = newGrid[pRow +1][pCol]\n                    newTile= {\n                        ...tile,\n                        isPicked: !isP,\n                        strType: type.TREE,\n                        strId:count\n                    };\n\n                }\n                \n\n                newGrid[pRow][pCol] = newTile\n                coor.push([pRow,pCol])\n                lim *=2\n            }\n            setGr(newGrid)\n            let newCount = count +1;\n            setCount(newCount)\n\n            const newSt = st.slice() //copy list of data structues\n            newSt.push({id: count, tile: coor})\n            setSt(newSt)\n            console.log(st)\n        }\n\n    }\n\n\n\n    \n    const click =() =>{\n        if(sId ===0){\n            if(op !== \"\"){\n                let size= parseInt(prompt(\"Size:\"),10)\n                if(op === \"Array\")\n                    arrayGrid(size)\n                else if(op === \"Stack\")\n                    stackGrid(size)\n                else if(op === \"Queue\")\n                    queueGrid(size)\n                else if(op === \"HashMap\")\n                    mapGrid(size)\n                else if(op === \"Tree\")\n                    console.log(\"nothing yet\")\n                else if(op === \"Graph\")\n                    console.log(\"nothing yet\")\n            }\n        }\n        else{\n            setCh({id:sId , type:sType})\n        }\n    }\n    \n    const extra = sId === ch.id ? 'highlight' : ''\n    const main = sType === ``? ``:\n                sType ===type.ARRAY ? `array` :\n                sType ===type.STACK ? `stack` :\n                sType ===type.QUEUE ? `queue` :\n                sType ===type.MAP ? `map` :\n                sType ===type.TREE ? `tree` :`graph` \n    return (\n        <div className = {` myTile ${main} ${extra}`} \n            onClick = {() => click()} >\n                {txt}\n        </div>\n    )\n}\n\nexport default Tile\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}