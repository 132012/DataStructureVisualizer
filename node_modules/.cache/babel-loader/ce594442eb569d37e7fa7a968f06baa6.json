{"ast":null,"code":"var _jsxFileName = \"/Users/juvenal/Desktop/projects/StructureVisualizer/structure-vis/src/DataStructureVisualizer/StrucFuncs/ArrayOp.js\";\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction ArrayOp(props) {\n  const {\n    gr,\n    setGr,\n    ch,\n    st\n  } = props;\n\n  const addValue = e => {\n    e.preventDefault();\n    let index = document.getElementById(\"input1\").value;\n    index = parseInt(index, 10);\n    const value = document.getElementById(\"input2\").value;\n    const myStruc = st.find(e => e.id === ch.id).tile; //array of coordinates\n\n    const newGrid = gr.slice();\n    const myIndex = myStruc[index];\n    const i0 = myIndex[0];\n    const i1 = myIndex[1];\n    const tile = newGrid[i0][i1];\n    const newTile = { ...tile,\n      txt: `${value}`\n    };\n    newGrid[i0][i1] = newTile;\n    setGr(newGrid);\n  };\n\n  const removeValue = e => {\n    e.preventDefault();\n    let index = document.getElementById(\"input3\").value;\n    index = parseInt(index, 10);\n    const myStruc = st.find(e => e.id === ch.id).tile; //array of coordinates\n\n    const newGrid = gr.slice();\n    const myIndex = myStruc[index];\n    console.log(index);\n    console.log(myStruc);\n    const i0 = myIndex[0];\n    const i1 = myIndex[1];\n    const tile = newGrid[i0][i1];\n    const newTile = { ...tile,\n      txt: ``\n    };\n    newGrid[i0][i1] = newTile;\n    setGr(newGrid);\n  };\n\n  const fillArray = e => {\n    e.preventDefault();\n    const myStruc = st.find(e => e.id === ch.id).tile; //array of coordinates\n\n    let hold;\n\n    for (let i = 0; i < myStruc.length; i++) {\n      let til1 = document.getElementById(myStruc[i].join());\n      til1.innerHTML = Math.floor(Math.random() * 100);\n    }\n  };\n\n  const bubbleSort = async e => {\n    e.preventDefault();\n    const myStruc = st.find(e => e.id === ch.id).tile; //array of coordinates\n\n    let keepGoing, t1, t2;\n\n    do {\n      keepGoing = false;\n\n      for (let i = 0; i < myStruc.length - 1; i++) {\n        let til1 = document.getElementById(myStruc[i].join());\n        let til2 = document.getElementById(myStruc[i + 1].join());\n        t1 = parseInt(til1.innerText, 10);\n        t2 = parseInt(til2.innerText, 10);\n        til1.classList.add(\"look\");\n        til2.classList.add(\"look\");\n\n        if (t1 > t2 || isNaN(t1) && !isNaN(t2)) {\n          til1.innerHTML = isNaN(t2) ? \"\" : t2;\n          til2.innerHTML = isNaN(t1) ? \"\" : t1;\n          keepGoing = true;\n        }\n\n        await new Promise(r => setTimeout(r, 50));\n        til1.classList.remove(\"look\");\n        til2.classList.remove(\"look\");\n      }\n    } while (keepGoing);\n  };\n\n  const insertionSort = async e => {\n    e.preventDefault();\n    const myStruc = st.find(e => e.id === ch.id).tile; //array of coordinates\n\n    let hole, t1, t2, til1, til2;\n    console.log(\"Hello\");\n\n    for (let i = 1; i < myStruc.length; i++) {\n      til1 = document.getElementById(myStruc[i - 1].join());\n      til2 = document.getElementById(myStruc[i].join());\n      t1 = parseInt(til1.innerText, 10);\n      t2 = parseInt(til2.innerText, 10);\n      til1.classList.add(\"look\");\n      til2.classList.add(\"look\");\n      hole = i;\n\n      while (hole > 0 && t1 > t2 || isNaN(t1) && !isNaN(t2)) {\n        til1.innerHTML = isNaN(t2) ? \"\" : t2;\n        til2.innerHTML = isNaN(t1) ? \"\" : t1;\n        til1.classList.remove(\"look\");\n        til2 = til1;\n        t2 = parseInt(til2.innerText, 10);\n        hole -= 1;\n        til1 = document.getElementById(myStruc[hole].join());\n        t1 = parseInt(til1.innerText, 10);\n        await new Promise(r => setTimeout(r, 50));\n      }\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"controls\",\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: addValue,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"input1\",\n        type: \"number\",\n        placeholder: \"index\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"input2\",\n        type: \"text\",\n        placeholder: \"value\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Add\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: removeValue,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"input3\",\n        type: \"number\",\n        placeholder: \"index\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Delete\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: bubbleSort,\n      children: \" bubble sort\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: insertionSort,\n      children: \" Insertion sort\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: fillArray,\n      children: \" Fill Array\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 132,\n    columnNumber: 13\n  }, this);\n}\n\n_c = ArrayOp;\nexport default ArrayOp;\n\nvar _c;\n\n$RefreshReg$(_c, \"ArrayOp\");","map":{"version":3,"sources":["/Users/juvenal/Desktop/projects/StructureVisualizer/structure-vis/src/DataStructureVisualizer/StrucFuncs/ArrayOp.js"],"names":["React","ArrayOp","props","gr","setGr","ch","st","addValue","e","preventDefault","index","document","getElementById","value","parseInt","myStruc","find","id","tile","newGrid","slice","myIndex","i0","i1","newTile","txt","removeValue","console","log","fillArray","hold","i","length","til1","join","innerHTML","Math","floor","random","bubbleSort","keepGoing","t1","t2","til2","innerText","classList","add","isNaN","Promise","r","setTimeout","remove","insertionSort","hole"],"mappings":"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","sourcesContent":["import React from 'react'\n\nfunction ArrayOp(props) {\n    const {gr,setGr,ch,st} = props\n\n    const addValue = (e) => {\n        e.preventDefault()\n        let index = document.getElementById(\"input1\").value\n        index = parseInt(index,10)\n        const value = document.getElementById(\"input2\").value\n        \n\n\n        const myStruc = (st.find(e => e.id === ch.id).tile) //array of coordinates\n        const newGrid = gr.slice()\n        const myIndex = myStruc[index]\n        const i0 = myIndex[0]\n        const i1 = myIndex[1]\n        const tile = newGrid[i0][i1] \n        const newTile= {\n            ...tile,\n            txt:`${value}`\n\n            }\n        newGrid[i0][i1] = newTile\n        setGr(newGrid)\n        \n    } \n\n    const removeValue = (e) => {\n        e.preventDefault()\n        let index = document.getElementById(\"input3\").value\n        index = parseInt(index,10)\n        \n        \n\n\n        const myStruc = (st.find(e => e.id === ch.id).tile) //array of coordinates\n        const newGrid = gr.slice()\n        const myIndex = myStruc[index]\n        console.log(index)\n        console.log(myStruc)\n        const i0 = myIndex[0]\n        const i1 = myIndex[1]\n        const tile = newGrid[i0][i1] \n        const newTile= {\n            ...tile,\n            txt:``\n\n            }\n        newGrid[i0][i1] = newTile\n        setGr(newGrid)\n\n    } \n    const fillArray = (e) =>{\n        e.preventDefault()\n        const myStruc = (st.find(e => e.id === ch.id).tile) //array of coordinates\n        let hold\n        for(let i = 0; i <myStruc.length;i++){\n            let til1 = document.getElementById(myStruc[i].join())\n            til1.innerHTML = Math.floor(Math.random() *100)\n        }\n    }\n\n    const bubbleSort = async (e) => {\n        e.preventDefault()\n        const myStruc = (st.find(e => e.id === ch.id).tile) //array of coordinates\n        let  keepGoing,t1,t2\n\n\n        do{\n            keepGoing = false\n            for(let i = 0; i <myStruc.length-1;i++){\n                let til1 = document.getElementById(myStruc[i].join())\n                let til2 = document.getElementById(myStruc[i+1].join())\n                t1 = parseInt(til1.innerText,10)\n                t2 = parseInt(til2.innerText,10)\n                til1.classList.add(\"look\")\n                til2.classList.add(\"look\")\n                if(t1 > t2  || isNaN(t1) && !isNaN(t2) ){\n                    til1.innerHTML = isNaN(t2) ? \"\" : t2\n                    til2.innerHTML = isNaN(t1) ? \"\" : t1\n                    keepGoing = true\n                }\n                await new Promise(r => setTimeout(r, 50));\n                til1.classList.remove(\"look\")\n                til2.classList.remove(\"look\")\n    \n            }\n        }while(keepGoing)\n    } \n\n    const insertionSort = async (e) => {\n        e.preventDefault()\n        const myStruc = (st.find(e => e.id === ch.id).tile) //array of coordinates\n        let  hole,t1,t2,til1,til2\n\n\n        console.log(\"Hello\")\n \n        for(let i = 1; i <myStruc.length;i++){\n\n            til1 = document.getElementById(myStruc[i-1].join())\n            til2 = document.getElementById(myStruc[i].join())\n            t1 = parseInt(til1.innerText,10)\n            t2 = parseInt(til2.innerText,10)\n            til1.classList.add(\"look\")\n            til2.classList.add(\"look\")\n            hole = i\n            while(hole>0 && t1 > t2 || isNaN(t1) && !isNaN(t2) ){\n                til1.innerHTML = isNaN(t2) ? \"\" : t2\n                til2.innerHTML = isNaN(t1) ? \"\" : t1\n                til1.classList.remove(\"look\")\n\n                til2 = til1\n                t2 = parseInt(til2.innerText,10)\n                hole -=1\n                til1 = document.getElementById(myStruc[hole].join())\n                t1 = parseInt(til1.innerText,10)\n                await new Promise(r => setTimeout(r, 50));\n\n            }\n            \n\n        }\n        \n    } \n\n    \n    \n    return (\n            <div className = \"controls\" >\n                <form onSubmit = {addValue}>\n                    <input id=\"input1\" type=\"number\" placeholder=\"index\" />\n                    <input id=\"input2\" type=\"text\" placeholder=\"value\" />\n                    <button>Add</button>\n\n                </form>\n\n                <form onSubmit = {removeValue}>\n                    <input id=\"input3\"  type=\"number\" placeholder=\"index\" />\n                    <button>Delete</button>\n\n                </form>\n                \n                <button onClick={bubbleSort}> bubble sort</button>\n                <button onClick={insertionSort}> Insertion sort</button>\n                <button onClick={fillArray}> Fill Array</button>\n            </div>    )\n}\n\nexport default ArrayOp\n"]},"metadata":{},"sourceType":"module"}