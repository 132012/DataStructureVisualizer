{"ast":null,"code":"var _jsxFileName = \"/Users/juvenal/Desktop/projects/StructureVisualizer/structure-vis/src/DataStructureVisualizer/StrucFuncs/GraphOp.js\";\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction GraphOp(props) {\n  const {\n    gr,\n    setGr,\n    ch,\n    st,\n    type,\n    setSt,\n    setOp\n  } = props;\n\n  const addVertex = e => {\n    e.preventDefault();\n    setOp(\"Vertex\");\n  };\n\n  const addEdge = e => {\n    e.preventDefault();\n    let from = document.getElementById(\"input1\").value;\n    let to = document.getElementById(\"input2\").value;\n    let weight = document.getElementById(\"input3\").value;\n    let dir = document.getElementById(\"directed\").checked;\n    let fromInt = parseInt(from, 10);\n    let toInt = parseInt(to, 10);\n    if (from === to) return; // still need to do when self loop\n\n    const myStruc = st.find(e => e.id === ch.id); //my graph structure\n\n    const edges = myStruc.edges;\n    const coor = myStruc.tile;\n    from = coor[from];\n    from = from.join();\n    to = coor[to];\n    to = to.join();\n    if (!from || !to) return; //if faulty info is given\n    //edges.push([from,to,weight,dir])\n\n    console.log(edges);\n    console.log(fromInt + \"  \" + toInt);\n    edges[fromInt][toInt] = [from, to, weight, dir, fromInt];\n    if (dir === false) edges[toInt][fromInt] = [to, from, weight, dir, toInt];\n    const newSt = st.filter(e => e.id !== ch.id).slice(); //copy list of data structures without my graph\n\n    const myNewSt = { ...myStruc,\n      edges: edges\n    };\n    newSt.push(myNewSt);\n    setSt(newSt);\n  };\n\n  const dijkstra = e => {\n    e.preventDefault();\n    const myStruc = st.find(e => e.id === ch.id);\n    const myTiles = myStruc.tiles;\n    const myEdges = myStruc.edges.slice();\n    const track = []; //[[prev,weight],[prev,weight],...]  index is tile id\n\n    const unvisited = [[myEdges[0], 0]]; //need to change to user input i\n\n    const visited = [];\n    let visiting;\n    let path = true;\n    let index;\n\n    while (unvisited) {\n      visiting = unvisited.shift(); //[[from,to,weight,dir,prev],[...],[...]]\n\n      index = visiting[1];\n      visiting = visiting[0];\n      if (!visiting) return;\n\n      if (!visited[index]) {\n        visiting.forEach((n, i) => {\n          //n = [from,to,weight,dir,prev]\n          let w = n[2] + track[n[4]][1]; // cur tile weight + prev tile weight\n\n          if (visited[i] == false) unvisited.push([myEdges[i], i]);\n\n          if (track[i][1] > w || track[i][1] === -1) {\n            track[i] = [n[4], w]; //tile i = prev tile, least weight\n          }\n        });\n        visited[index] = true;\n      }\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"controls\",\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: addVertex,\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Add Vertex\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: addEdge,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"input1\",\n        type: \"number\",\n        placeholder: \"from\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"input2\",\n        type: \"number\",\n        placeholder: \"to\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"input3\",\n        type: \"number\",\n        placeholder: \"weight\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"directed\",\n        type: \"checkbox\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: \" Directed\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Add Edge\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 9\n  }, this);\n}\n\n_c = GraphOp;\nexport default GraphOp;\n\nvar _c;\n\n$RefreshReg$(_c, \"GraphOp\");","map":{"version":3,"sources":["/Users/juvenal/Desktop/projects/StructureVisualizer/structure-vis/src/DataStructureVisualizer/StrucFuncs/GraphOp.js"],"names":["React","GraphOp","props","gr","setGr","ch","st","type","setSt","setOp","addVertex","e","preventDefault","addEdge","from","document","getElementById","value","to","weight","dir","checked","fromInt","parseInt","toInt","myStruc","find","id","edges","coor","tile","join","console","log","newSt","filter","slice","myNewSt","push","dijkstra","myTiles","tiles","myEdges","track","unvisited","visited","visiting","path","index","shift","forEach","n","i","w"],"mappings":"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","sourcesContent":["import React from 'react'\n\nfunction GraphOp(props) {\n    const {gr,setGr,ch,st,type,setSt,setOp} = props\n\n    const addVertex = (e) => {\n        e.preventDefault()\n        setOp(\"Vertex\")\n\n        \n    }\n\n    const addEdge = (e) => {\n        e.preventDefault()\n        let from = document.getElementById(\"input1\").value\n        let to = document.getElementById(\"input2\").value\n        let weight = document.getElementById(\"input3\").value\n        let dir = document.getElementById(\"directed\").checked\n        let fromInt= parseInt(from,10)\n        let toInt= parseInt(to,10)\n\n        if(from === to) return  // still need to do when self loop\n\n        const myStruc = (st.find(e => e.id === ch.id)) //my graph structure\n        const edges  = myStruc.edges\n        const coor = myStruc.tile  \n        from = coor[from]\n        from = from.join()\n        to = coor[to]\n        to = to.join()\n        if(!from || !to )return //if faulty info is given\n        //edges.push([from,to,weight,dir])\n        console.log(edges)\n        console.log(fromInt+\"  \"+toInt)\n        edges[fromInt][toInt] = [from,to,weight,dir,fromInt]\n        if(dir ===false)\n            edges[toInt][fromInt] = [to,from,weight,dir,toInt]\n\n        const newSt = st.filter((e => e.id !== ch.id)).slice() //copy list of data structures without my graph\n        const myNewSt = {...myStruc,edges:edges}\n        newSt.push(myNewSt)\n        setSt(newSt)\n\n\n    } \n\n    const dijkstra = (e) => {\n        e.preventDefault()\n        const myStruc =  (st.find(e => e.id === ch.id))\n        const myTiles = myStruc.tiles\n        const myEdges = myStruc.edges.slice()\n        const track = [] //[[prev,weight],[prev,weight],...]  index is tile id\n        const unvisited = [[myEdges[0],0]] //need to change to user input i\n        const visited = []\n        let visiting\n        \n        let path =true\n        let index\n        while(unvisited){\n            visiting = unvisited.shift() //[[from,to,weight,dir,prev],[...],[...]]\n            index = visiting[1]\n            visiting = visiting[0]\n            if(!visiting) return\n            if(!visited[index]){\n            visiting.forEach((n,i) => { //n = [from,to,weight,dir,prev]\n                let w = n[2] + track[n[4]][1] // cur tile weight + prev tile weight\n                if(visited[i]==false) \n                     unvisited.push([myEdges[i],i])\n                if(track[i][1] > w || track[i][1] ===-1){\n                    track[i] =[n[4],w] //tile i = prev tile, least weight\n\n                }\n            })\n            visited[index] = true \n\n            }\n        }\n\n    }\n\n    return (\n        <div className = \"controls\" >\n                <form onSubmit = {addVertex}>\n                    <button>Add Vertex</button>\n\n                </form>\n\n                <form onSubmit = {addEdge}>\n                    <input id=\"input1\" type=\"number\" placeholder=\"from\" />\n                    <input id=\"input2\" type=\"number\" placeholder=\"to\" />\n                    <input id=\"input3\" type=\"number\" placeholder=\"weight\" />\n                    <input id=\"directed\" type=\"checkbox\" />\n                    <label > Directed</label>\n  \n                    <button>Add Edge</button>\n\n                </form>\n            </div>\n    )\n}\n\nexport default GraphOp\n"]},"metadata":{},"sourceType":"module"}