{"ast":null,"code":"var _jsxFileName = \"/Users/juvenal/Desktop/projects/StructureVisualizer/structure-vis/src/DataStructureVisualizer/StrucFuncs/TreeOp.js\";\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst {\n  gr,\n  setGr,\n  ch,\n  st\n} = props;\n\nconst addValue = e => {\n  e.preventDefault();\n  let value = document.getElementById(\"input1\").value;\n  value = parseInt(index, 10); //reinsert coordinates of tree in each add\n\n  const myStruc = st.find(e => e.id === ch.id).tile; //array of coordinates\n\n  const newGrid = gr.slice();\n  let [r, c] = myStruc[0];\n  const tile = newGrid[r][c]; //root coordinate \n\n  let index = 0;\n\n  for (let i = 0; i < 15;) {\n    if (tile.txt <= value) {\n      tile = myStruc[2 * i + 1]; //left child\n    } else {\n      tile = myStruc[2 * i + 2]; //right child\n    }\n  }\n\n  const newTile = { ...tile,\n    txt: `${value}`\n  };\n  newGrid[i0][i1] = newTile;\n  setGr(newGrid);\n};\n\nfunction TreeOp() {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"controls\",\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: addValue,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"input1\",\n        type: \"number\",\n        placeholder: \"value\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Add\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"see items\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 9\n  }, this);\n}\n\n_c = TreeOp;\nexport default TreeOp;\n\nvar _c;\n\n$RefreshReg$(_c, \"TreeOp\");","map":{"version":3,"sources":["/Users/juvenal/Desktop/projects/StructureVisualizer/structure-vis/src/DataStructureVisualizer/StrucFuncs/TreeOp.js"],"names":["React","gr","setGr","ch","st","props","addValue","e","preventDefault","value","document","getElementById","parseInt","index","myStruc","find","id","tile","newGrid","slice","r","c","i","txt","newTile","i0","i1","TreeOp"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AACA,MAAM;AAACC,EAAAA,EAAD;AAAIC,EAAAA,KAAJ;AAAUC,EAAAA,EAAV;AAAaC,EAAAA;AAAb,IAAmBC,KAAzB;;AAEI,MAAMC,QAAQ,GAAIC,CAAD,IAAO;AACpBA,EAAAA,CAAC,CAACC,cAAF;AACA,MAAIC,KAAK,GAAGC,QAAQ,CAACC,cAAT,CAAwB,QAAxB,EAAkCF,KAA9C;AACAA,EAAAA,KAAK,GAAGG,QAAQ,CAACC,KAAD,EAAO,EAAP,CAAhB,CAHoB,CAKpB;;AAIA,QAAMC,OAAO,GAAIV,EAAE,CAACW,IAAH,CAAQR,CAAC,IAAIA,CAAC,CAACS,EAAF,KAASb,EAAE,CAACa,EAAzB,EAA6BC,IAA9C,CAToB,CASgC;;AACpD,QAAMC,OAAO,GAAGjB,EAAE,CAACkB,KAAH,EAAhB;AACA,MAAI,CAACC,CAAD,EAAGC,CAAH,IAAQP,OAAO,CAAC,CAAD,CAAnB;AAEA,QAAMG,IAAI,GAAGC,OAAO,CAACE,CAAD,CAAP,CAAWC,CAAX,CAAb,CAboB,CAaO;;AAC3B,MAAIR,KAAK,GAAG,CAAZ;;AACA,OAAI,IAAIS,CAAC,GAAE,CAAX,EAAcA,CAAC,GAAC,EAAhB,GAAoB;AAChB,QAAGL,IAAI,CAACM,GAAL,IAAYd,KAAf,EAAqB;AACjBQ,MAAAA,IAAI,GAAGH,OAAO,CAAC,IAAEQ,CAAF,GAAI,CAAL,CAAd,CADiB,CACK;AACzB,KAFD,MAGI;AACAL,MAAAA,IAAI,GAAGH,OAAO,CAAC,IAAEQ,CAAF,GAAI,CAAL,CAAd,CADA,CACsB;AACzB;AACJ;;AACD,QAAME,OAAO,GAAE,EACX,GAAGP,IADQ;AAEXM,IAAAA,GAAG,EAAE,GAAEd,KAAM;AAFF,GAAf;AAKAS,EAAAA,OAAO,CAACO,EAAD,CAAP,CAAYC,EAAZ,IAAkBF,OAAlB;AACAtB,EAAAA,KAAK,CAACgB,OAAD,CAAL;AAEH,CA/BD;;AAiCJ,SAASS,MAAT,GAAkB;AACd,sBACI;AAAK,IAAA,SAAS,EAAG,UAAjB;AAAA,4BACQ;AAAM,MAAA,QAAQ,EAAIrB,QAAlB;AAAA,8BACI;AAAO,QAAA,EAAE,EAAC,QAAV;AAAmB,QAAA,IAAI,EAAC,QAAxB;AAAiC,QAAA,WAAW,EAAC;AAA7C;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADR,eAQQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YARR;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAcH;;KAfQqB,M;AAiBT,eAAeA,MAAf","sourcesContent":["import React from 'react'\nconst {gr,setGr,ch,st} = props\n\n    const addValue = (e) => {\n        e.preventDefault()\n        let value = document.getElementById(\"input1\").value\n        value = parseInt(index,10)\n\n        //reinsert coordinates of tree in each add\n        \n\n\n        const myStruc = (st.find(e => e.id === ch.id).tile) //array of coordinates\n        const newGrid = gr.slice()\n        let [r,c] = myStruc[0]\n        \n        const tile = newGrid[r][c] //root coordinate \n        let index = 0\n        for(let i =0; i<15;){\n            if(tile.txt <= value){\n                tile = myStruc[2*i+1] //left child\n            }\n            else{\n                tile = myStruc[2*i+2] //right child\n            }\n        }\n        const newTile= {\n            ...tile,\n            txt:`${value}`\n\n            }\n        newGrid[i0][i1] = newTile\n        setGr(newGrid)\n\n    } \n\nfunction TreeOp() {\n    return (\n        <div className = \"controls\" >\n                <form onSubmit = {addValue}>\n                    <input id=\"input1\" type=\"number\" placeholder=\"value\" />\n                    <button>Add</button>\n\n                </form>\n\n\n                <div>\n                    see items\n                </div>\n            </div>\n    )\n}\n\nexport default TreeOp\n"]},"metadata":{},"sourceType":"module"}