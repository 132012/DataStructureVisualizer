{"ast":null,"code":"var _jsxFileName = \"/Users/juvenal/Desktop/projects/StructureVisualizer/structure-vis/src/DataStructureVisualizer/StrucFuncs/TreeOp.js\";\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction TreeOp(props) {\n  const {\n    gr,\n    setGr,\n    ch,\n    st,\n    type,\n    setSt,\n    count\n  } = props;\n\n  const addValue = e => {\n    e.preventDefault();\n    let value = document.getElementById(\"input1\").value;\n    value = parseInt(value, 10); //reinsert coordinates of tree in each add\n\n    const fullStruc = st.find(e => e.id === ch.id);\n    const myStruc = fullStruc.tile; //array of coordinates\n\n    const newGrid = gr.slice();\n    let [r, c] = myStruc[0];\n    let tile = newGrid[r][c]; //root tile on grid\n\n    let pParent = tile;\n\n    for (let i = 0; i < 15;) {\n      console.log(i);\n\n      if (typeof tile === \"object\" && !(tile.txt === \"\")) {\n        pParent = tile;\n\n        if (tile.txt > value) {\n          i = 2 * i + 1;\n          tile = myStruc[i]; //left child\n        } else {\n          i = 2 * i + 2;\n          tile = myStruc[i]; //right child\n        }\n      } else {\n        let newR,\n            newC,\n            offset = [4, 4, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1];\n\n        if (pParent.txt > value) {\n          newR = pParent.row + 1;\n          newC = pParent.col - offset[i];\n        } else {\n          newR = pParent.row + 1;\n          newC = pParent.col + offset[i];\n        }\n\n        const aTile = newGrid[newR][newC];\n        const newTile = { ...aTile,\n          txt: `${value}`,\n          strType: type.TREE,\n          strId: fullStruc.id\n        };\n        newGrid[newR][newC] = newTile;\n        setGr(newGrid);\n        const newSt = st.filter(e => e.id === fullStruc.id); //list of data structures without tree\n\n        myStruc[i] = [newR, newC];\n        newSt.push({\n          id: count,\n          tile: myStruc\n        });\n        setSt(newSt);\n        break;\n      }\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"controls\",\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: addValue,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"input1\",\n        type: \"number\",\n        placeholder: \"value\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Add\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"see items\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 9\n  }, this);\n}\n\n_c = TreeOp;\nexport default TreeOp;\n\nvar _c;\n\n$RefreshReg$(_c, \"TreeOp\");","map":{"version":3,"sources":["/Users/juvenal/Desktop/projects/StructureVisualizer/structure-vis/src/DataStructureVisualizer/StrucFuncs/TreeOp.js"],"names":["React","TreeOp","props","gr","setGr","ch","st","type","setSt","count","addValue","e","preventDefault","value","document","getElementById","parseInt","fullStruc","find","id","myStruc","tile","newGrid","slice","r","c","pParent","i","console","log","txt","newR","newC","offset","row","col","aTile","newTile","strType","TREE","strId","newSt","filter","push"],"mappings":"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","sourcesContent":["import React from 'react'\n\n\nfunction TreeOp(props) {\n\n    const {gr,setGr,ch,st,type,setSt,count} = props\n\n    const addValue = (e) => {\n        e.preventDefault()\n        let value = document.getElementById(\"input1\").value\n        value = parseInt(value,10)\n\n        //reinsert coordinates of tree in each add\n        \n\n\n        const fullStruc = (st.find(e => e.id === ch.id))\n        const myStruc = fullStruc.tile //array of coordinates\n        const newGrid = gr.slice()\n        let [r,c] = myStruc[0]\n        \n        let tile = newGrid[r][c] //root tile on grid\n\n        let pParent =tile\n        for(let i =0; i<15;){\n            console.log(i)\n            if(typeof(tile) ===\"object\"  && !(tile.txt ===\"\")){\n                pParent = tile\n                \n                if(tile.txt > value){\n                    i = 2*i+1\n                    tile = myStruc[i] //left child\n                }\n                else{\n                    i = 2*i+2\n                    tile = myStruc[i] //right child\n                }}\n            else{\n                let newR,newC, offset = [4,4,2,2,2,2,1,1,1,1,1,1,1,1]\n\n                if(pParent.txt > value){\n                    newR = pParent.row +1\n                    newC = pParent.col - offset[i]\n                }\n                else{\n                    newR = pParent.row +1\n                    newC = pParent.col + offset[i]\n                }\n                const aTile = newGrid[newR][newC]\n                const newTile= {\n                    ...aTile,\n                    txt:`${value}`,\n                    strType: type.TREE,\n                    strId:fullStruc.id\n\n                    }\n                newGrid[newR][newC] = newTile\n                setGr(newGrid)\n                const newSt = st.filter(e => e.id ===fullStruc.id)//list of data structures without tree\n                myStruc[i]=[newR,newC]\n                newSt.push({id: count, tile: myStruc})\n                setSt(newSt)\n                break\n                }\n            }\n        }\n        \n\n    \n\n    return (\n        <div className = \"controls\" >\n                <form onSubmit = {addValue}>\n                    <input id=\"input1\" type=\"number\" placeholder=\"value\" />\n                    <button>Add</button>\n\n                </form>\n\n\n                <div>\n                    see items\n                </div>\n            </div>\n    )\n}\n\nexport default TreeOp\n"]},"metadata":{},"sourceType":"module"}