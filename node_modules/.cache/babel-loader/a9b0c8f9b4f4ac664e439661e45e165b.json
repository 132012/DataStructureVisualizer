{"ast":null,"code":"var _jsxFileName = \"/Users/juvenal/Desktop/projects/StructureVisualizer/structure-vis/src/DataStructureVisualizer/Grid.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport Tile from './Tile';\nimport Edge from './Edge';\nimport ArrayOp from './StrucFuncs/ArrayOp';\nimport StackOp from './StrucFuncs/StackOp';\nimport QueueOp from './StrucFuncs/QueueOp';\nimport HashMapOp from './StrucFuncs/HashMapOp';\nimport TreeOp from './StrucFuncs/TreeOp';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Grid(props) {\n  _s();\n\n  const [grid, setGrid] = useState([]);\n  const [curStruc, setCurStruc] = useState([]); //all current structures in the grid\n\n  const [chosen, setChosen] = useState({}); //id/type of Structure clicked\n\n  const [counter, setCounter] = useState(1); //generate new  structure id\n\n  const [lines, setLines] = useState([]);\n  const {\n    op,\n    setOp\n  } = props;\n  const type = {\n    ARRAY: \"Array\",\n    STACK: \"Stack\",\n    QUEUE: \"Queue\",\n    MAP: \"HashMap\",\n    TREE: \"Tree\",\n    GRAPH: \"Graph\"\n  };\n  useEffect(() => {\n    const newGrid = initializeGrid();\n    setGrid(newGrid);\n  }, []);\n  useEffect(() => {\n    let theLines = []; //svg building edges for all trees\n\n    let trees = curStruc.filter(e => e.type === \"tree\"); //all tree structures\n\n    console.log(trees);\n    trees.map(e => {\n      let coor = e.tile,\n          r,\n          c,\n          rr,\n          cc,\n          rr1,\n          cc1,\n          j,\n          k;\n      console.log(coor);\n\n      for (let i = 0; i < coor.length; i++) {\n        if (typeof coor[i] === \"undefined\") continue;\n        [r, c] = coor[i];\n        j = 2 * i + 1;\n        let parentKey = \"#\" + r + \",\" + c; //parent\n\n        if (!(typeof coor[j] === \"undefined\")) {\n          [rr, cc] = coor[j];\n          let leftChild = \"#\" + rr + \",\" + cc; //child\n\n          theLines.push([parentKey, leftChild]);\n        }\n\n        k = 2 * i + 1;\n\n        if (!(typeof coor[k] === \"undefined\")) {\n          [rr1, cc1] = coor[k];\n          let rightChild = \"#\" + rr1 + \",\" + cc1; //child\n\n          theLines.push([parentKey, leftChild]);\n        }\n      }\n    });\n    setLines(lines);\n  }, [curStruc]);\n  let option;\n\n  if (op === \"Array\") {\n    option = /*#__PURE__*/_jsxDEV(ArrayOp, {\n      gr: grid,\n      setGr: setGrid,\n      ch: chosen,\n      st: curStruc,\n      type: type,\n      setSt: setCurStruc,\n      count: counter\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 18\n    }, this);\n  } else if (op === \"Stack\") {\n    option = /*#__PURE__*/_jsxDEV(StackOp, {\n      gr: grid,\n      setGr: setGrid,\n      ch: chosen,\n      st: curStruc,\n      type: type,\n      setSt: setCurStruc,\n      count: counter\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 18\n    }, this);\n  } else if (op === \"Queue\") {\n    option = /*#__PURE__*/_jsxDEV(QueueOp, {\n      gr: grid,\n      setGr: setGrid,\n      ch: chosen,\n      st: curStruc,\n      type: type,\n      setSt: setCurStruc,\n      count: counter\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 18\n    }, this);\n  } else if (op === \"HashMap\") {\n    option = /*#__PURE__*/_jsxDEV(HashMapOp, {\n      gr: grid,\n      setGr: setGrid,\n      ch: chosen,\n      st: curStruc,\n      type: type,\n      setSt: setCurStruc,\n      count: counter\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 18\n    }, this);\n  } else if (op === \"Tree\") {\n    option = /*#__PURE__*/_jsxDEV(TreeOp, {\n      gr: grid,\n      setGr: setGrid,\n      ch: chosen,\n      st: curStruc,\n      type: type,\n      setSt: setCurStruc,\n      count: counter\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 18\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"myGrid\",\n    children: [lines.map((e, i) => /*#__PURE__*/_jsxDEV(Edge, {\n      x1: e[0],\n      y1: e[1],\n      x2: e[2],\n      y2: e[3]\n    }, i, false, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 17\n    }, this)), grid.map((row, rId) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"myRow\",\n      children: row.map((tile, tId) => /*#__PURE__*/_jsxDEV(Tile, {\n        col: tile.col,\n        row: tile.row,\n        sType: tile.strType,\n        sId: tile.strId,\n        st: curStruc,\n        setSt: setCurStruc,\n        ch: chosen,\n        setCh: setChosen,\n        gr: grid,\n        setGr: setGrid,\n        isP: tile.isPicked,\n        op: op,\n        setOp: setOp,\n        type: type,\n        count: counter,\n        setCount: setCounter,\n        txt: tile.txt,\n        aKey: rId + \",\" + tId\n      }, rId + \",\" + tId, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 25\n      }, this))\n    }, rId, false, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 18\n    }, this)), lines.map(e => {\n      /*#__PURE__*/\n      _jsxDEV(\"connection\", {\n        from: e[0],\n        to: e[1],\n        color: \"red\",\n        tail: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 17\n      }, this);\n    }), option]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 126,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Grid, \"5KNi5Awq+xAk4ByKdDyJhBMiM7o=\");\n\n_c = Grid;\nexport default Grid;\n\nconst initializeGrid = () => {\n  const grid = [];\n\n  for (let row = 0; row < 17; row++) {\n    const aRow = [];\n\n    for (let col = 0; col < 35; col++) {\n      aRow.push(createTile(col, row));\n    }\n\n    grid.push(aRow);\n  }\n\n  return grid;\n};\n\nconst createTile = (col, row) => {\n  return {\n    col,\n    row,\n    txt: \"\",\n    strType: ``,\n    strId: 0,\n    isPicked: false,\n    myKey: \"\"\n  };\n};\n\nconst getAbsPosition = element => {\n  var rect = element.getBoundingClientRect();\n  return [rect.left, rect.top];\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"Grid\");","map":{"version":3,"sources":["/Users/juvenal/Desktop/projects/StructureVisualizer/structure-vis/src/DataStructureVisualizer/Grid.js"],"names":["React","useState","useEffect","Tile","Edge","ArrayOp","StackOp","QueueOp","HashMapOp","TreeOp","Grid","props","grid","setGrid","curStruc","setCurStruc","chosen","setChosen","counter","setCounter","lines","setLines","op","setOp","type","ARRAY","STACK","QUEUE","MAP","TREE","GRAPH","newGrid","initializeGrid","theLines","trees","filter","e","console","log","map","coor","tile","r","c","rr","cc","rr1","cc1","j","k","i","length","parentKey","leftChild","push","rightChild","option","row","rId","tId","col","strType","strId","isPicked","txt","aRow","createTile","myKey","getAbsPosition","element","rect","getBoundingClientRect","left","top"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react'\nimport Tile from './Tile'\nimport Edge from './Edge'\nimport ArrayOp from './StrucFuncs/ArrayOp'\nimport StackOp from './StrucFuncs/StackOp'\nimport QueueOp from './StrucFuncs/QueueOp'\nimport HashMapOp from './StrucFuncs/HashMapOp'\nimport TreeOp from './StrucFuncs/TreeOp'\n\n\nfunction Grid(props) {\n    const [grid,setGrid] = useState([])\n    const [curStruc,setCurStruc] = useState([]) //all current structures in the grid\n    const [chosen,setChosen] = useState({}) //id/type of Structure clicked\n    const [counter,setCounter] = useState(1) //generate new  structure id\n    const [lines,setLines] = useState([])\n    \n    const {op,setOp} = props \n    const type = {\n        ARRAY: \"Array\",\n        STACK: \"Stack\",\n        QUEUE: \"Queue\",\n        MAP: \"HashMap\",\n        TREE:\"Tree\",\n        GRAPH:\"Graph\"\n    }\n\n    useEffect(() => {\n        const newGrid = initializeGrid()\n        setGrid(newGrid)\n    },[])\n    \n    useEffect(() => {\n        let theLines=[]\n         //svg building edges for all trees\n        let trees = curStruc.filter(e => e.type===\"tree\") //all tree structures\n        console.log(trees)\n        trees.map(e =>{\n            let coor = e.tile,r,c,rr,cc,rr1,cc1,j,k\n            console.log(coor)\n            for(let i =0;i<coor.length;i++){\n                if(typeof(coor[i])===\"undefined\")\n                     continue\n                [r,c] = coor[i]\n                j = 2*i +1\n                let parentKey = \"#\"+r+\",\"+c          //parent\n\n                if(!(typeof(coor[j]) === \"undefined\")){\n                    [rr,cc] = coor[j]\n                    let leftChild =  \"#\"+rr+\",\"+cc    //child\n                    theLines.push([parentKey,leftChild])\n                }\n                k = 2*i +1\n\n                if(!(typeof(coor[k]) === \"undefined\")){\n                    [rr1,cc1] = coor[k]\n                    let rightChild =  \"#\"+rr1+\",\"+cc1    //child\n                    theLines.push([parentKey,leftChild])\n                    \n\n                }\n            }\n\n\n        })\n        setLines(lines)\n    },[curStruc])\n\n    \n\n    let option \n\n    if(op===\"Array\"){\n        option = <ArrayOp \n            gr = {grid}\n            setGr = {setGrid}\n            ch = {chosen}\n            st = {curStruc}\n            type ={type}\n            setSt = {setCurStruc}\n            count = {counter} />\n    }\n    else if(op===\"Stack\"){\n        option = <StackOp \n            gr = {grid}\n            setGr = {setGrid}\n            ch = {chosen}\n            st = {curStruc}\n            type ={type}\n            setSt = {setCurStruc}\n            count = {counter} />\n    }\n    else if(op===\"Queue\"){\n        option = <QueueOp \n            gr = {grid}\n            setGr = {setGrid}\n            ch = {chosen}\n            st = {curStruc}\n            type ={type}\n            setSt = {setCurStruc}\n            count = {counter} />\n    }\n    else if(op===\"HashMap\"){\n        option = <HashMapOp \n            gr = {grid}\n            setGr = {setGrid}\n            ch = {chosen}\n            st = {curStruc}\n            type ={type}\n            setSt = {setCurStruc}\n            count = {counter} />\n    }\n    else if(op===\"Tree\"){\n        option = <TreeOp \n            gr = {grid}\n            setGr = {setGrid}\n            ch = {chosen}\n            st = {curStruc}\n            type ={type}\n            setSt = {setCurStruc}\n            count = {counter} />\n    }\n\n    \n    return (\n        <div className =\"myGrid\">\n            {lines.map((e,i) =>(\n                <Edge key={i} x1={e[0]} y1={e[1]} x2={e[2]} y2={e[3]} />\n            ))}\n            {grid.map((row,rId) =>(\n                 <div className = \"myRow\" key={rId}>\n\n                     {row.map((tile,tId) =>(\n                        <Tile\n                         key ={rId+\",\"+tId} \n                         col = {tile.col}\n                         row = {tile.row}\n                         sType = {tile.strType}\n                         sId = {tile.strId}\n                         st = {curStruc}\n                         setSt = {setCurStruc}\n                         ch = {chosen}\n                         setCh = {setChosen}\n                         gr = {grid}\n                         setGr = {setGrid}\n                         isP ={tile.isPicked}\n                         op = {op}\n                         setOp ={setOp}\n                         type ={type}\n                         count = {counter}\n                         setCount = {setCounter}\n                         txt = {tile.txt}\n                         aKey ={rId+\",\"+tId}\n                          \n                         />\n                        \n                     ))}\n                 </div>\n            ))}\n            {lines.map((e)=> {\n                <connection from={e[0]} to={e[1]} color=\"red\" tail></connection>\n            })}  \n            {option}\n            </div>\n            \n            \n        \n    )\n}\n\nexport default Grid\n\nconst initializeGrid = () => {\n    const grid = []\n    for(let row = 0; row <17;row++){\n        const aRow = []\n        for(let col = 0; col<35;col++){\n            aRow.push(createTile(col,row))\n        }\n        grid.push(aRow)\n    }\n    return grid\n}\n\nconst createTile = (col,row) => {\n    return{\n        col,\n        row,\n        txt:\"\",\n        strType: ``,\n        strId: 0,\n        isPicked: false,\n        myKey:\"\"\n    }\n}\n\nconst getAbsPosition  = (element) =>{\n    var rect = element.getBoundingClientRect()\n\n    return [rect.left,rect.top]\n }\n\n"]},"metadata":{},"sourceType":"module"}