{"ast":null,"code":"var _jsxFileName = \"/Users/juvenal/Desktop/projects/StructureVisualizer/structure-vis/src/DataStructureVisualizer/Tile.js\";\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Tile(props) {\n  const {\n    col,\n    row,\n    sType,\n    sId,\n    st,\n    setSt,\n    ch,\n    setCh,\n    gr,\n    setGr,\n    isP,\n    op,\n    setOp,\n    type,\n    count,\n    setCount,\n    txt\n  } = props; //console.log(col +\" \"+ row+\" \"+sType+ \" \"+sId)\n\n  const stackGrid = size => {\n    if (row - size >= -1) {\n      const newGrid = gr.slice();\n      let tile,\n          newTile,\n          arow,\n          coor = [];\n\n      for (let i = 0; i < size; i++) {\n        tile = newGrid[row - i][col];\n        newTile = { ...tile,\n          isPicked: !isP,\n          strType: type.STACK,\n          strId: count\n        };\n        newGrid[row - i][col] = newTile;\n        arow = ro - i;\n        coor.push([row, col]);\n      }\n\n      setGr(newGrid);\n    }\n  };\n\n  const arrayGrid = size => {\n    //setOp(\"\")\n    if (col + size <= 45) {\n      const newGrid = gr.slice();\n      let tile,\n          newTile,\n          acol,\n          coor = [];\n\n      for (let i = 0; i < size; i++) {\n        tile = newGrid[row][col + i];\n        newTile = { ...tile,\n          isPicked: !isP,\n          strType: type.ARRAY,\n          strId: count\n        };\n        newGrid[row][col + i] = newTile;\n        acol = col + i;\n        coor.push([row, acol]);\n      }\n\n      setGr(newGrid);\n      let newCount = count + 1;\n      setCount(newCount);\n      const newSt = st.slice(); //copy list of data structues\n\n      newSt.push({\n        id: count,\n        tile: coor\n      });\n      setSt(newSt);\n      console.log(st);\n    }\n  };\n\n  const queueGrid = size => {\n    if (col - size >= -1) {\n      const newGrid = gr.slice();\n      let tile, newTile;\n\n      for (let i = 0; i < size; i++) {\n        tile = newGrid[row][col - i];\n        newTile = { ...tile,\n          isPicked: !isP,\n          strType: type.QUEUE\n        };\n        newGrid[row][col - i] = newTile;\n      }\n\n      setGr(newGrid);\n    }\n  };\n\n  const mapGrid = size => {\n    if (col + 2 <= 44 && row + size <= 20) {\n      console.log(\"no\");\n      const newGrid = gr.slice();\n      let tile, newTile;\n\n      for (let i = 0; i < 3; i++) {\n        for (let j = 0; j < size; j++) {\n          tile = newGrid[row + j][col + i];\n          newTile = { ...tile,\n            isPicked: !isP,\n            strType: type.MAP\n          };\n          newGrid[row + j][col + i] = newTile;\n        }\n      }\n\n      setGr(newGrid);\n    }\n  };\n\n  const click = () => {\n    if (sId === 0) {\n      if (op !== \"\") {\n        let size = parseInt(prompt(\"Size:\"), 10);\n        if (op === \"Array\") arrayGrid(size);else if (op === \"Stack\") stackGrid(size);else if (op === \"Queue\") queueGrid(size);else if (op === \"HashMap\") mapGrid(size);else if (op === \"Tree\") console.log(\"nothing yet\");else if (op === \"Graph\") console.log(\"nothing yet\");\n      }\n    } else {\n      setCh(sId);\n    }\n  };\n\n  const extra = sId === ch ? 'highlight' : '';\n  const main = sType === `` ? `` : sType === type.ARRAY ? `array` : sType === type.STACK ? `stack` : sType === type.QUEUE ? `queue` : sType === type.MAP ? `map` : sType === type.TREE ? `tree` : `graph`;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: ` myTile ${main} ${extra}`,\n    onClick: () => click(),\n    children: txt\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 139,\n    columnNumber: 9\n  }, this);\n}\n\n_c = Tile;\nexport default Tile;\n\nvar _c;\n\n$RefreshReg$(_c, \"Tile\");","map":{"version":3,"sources":["/Users/juvenal/Desktop/projects/StructureVisualizer/structure-vis/src/DataStructureVisualizer/Tile.js"],"names":["React","Tile","props","col","row","sType","sId","st","setSt","ch","setCh","gr","setGr","isP","op","setOp","type","count","setCount","txt","stackGrid","size","newGrid","slice","tile","newTile","arow","coor","i","isPicked","strType","STACK","strId","ro","push","arrayGrid","acol","ARRAY","newCount","newSt","id","console","log","queueGrid","QUEUE","mapGrid","j","MAP","click","parseInt","prompt","extra","main","TREE"],"mappings":"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","sourcesContent":["import React from 'react'\n\nfunction Tile(props) {\n    const {col,row,sType,sId,st,setSt,ch,setCh,gr,setGr,isP,op,setOp,type,count,setCount,txt} = props\n    //console.log(col +\" \"+ row+\" \"+sType+ \" \"+sId)\n\n\n    const stackGrid = ( size) => {\n        if((row -size) >= -1){\n\n        const newGrid = gr.slice();\n        let tile,newTile,arow,coor =[]\n        for(let i =0;i<size;i++){\n            tile = newGrid[row-i][col];\n            newTile= {\n              ...tile,\n              isPicked: !isP,\n              strType: type.STACK,\n              strId:count\n            };\n\n            newGrid[row-i][col] = newTile\n            arow =ro-i\n            coor.push([row,col])\n        }\n         setGr(newGrid)\n        }\n      }\n      \n    const arrayGrid = (size) =>{\n        //setOp(\"\")\n        if((col +size) <= 45){\n\n            const newGrid = gr.slice()\n            let tile, newTile,acol,coor =[]\n            \n\n            for(let i =0;i<size;i++){\n                tile = newGrid[row][col+i]\n                newTile= {\n                ...tile,\n                isPicked: !isP,\n                strType: type.ARRAY,\n                strId:count\n                };\n\n                newGrid[row][col+i] = newTile\n                acol =col+i\n                coor.push([row,acol])\n            }\n            setGr(newGrid)\n            let newCount = count +1;\n            setCount(newCount)\n\n            const newSt = st.slice() //copy list of data structues\n            newSt.push({id: count, tile: coor})\n            setSt(newSt)\n            console.log(st)\n        }\n\n    }\n\n    const queueGrid = (size) => {\n        if((col -size) >= -1){\n\n            const newGrid = gr.slice();\n            let tile, newTile;\n            for(let i =0;i<size;i++){\n                tile = newGrid[row][col-i];\n                newTile= {\n                ...tile,\n                isPicked: !isP,\n                strType: type.QUEUE\n\n                };\n\n                newGrid[row][col-i] = newTile;\n            }\n            setGr(newGrid)\n        }\n    }\n    const mapGrid = (size) => {\n        if((col +2) <= 44  && (row +size) <= 20){\n            console.log(\"no\")\n            const newGrid = gr.slice();\n            let tile, newTile;\n            for(let i = 0; i<3;i++){\n                for(let j = 0;j<size; j++){\n                    tile = newGrid[row+j][col+i]\n                newTile= {\n                ...tile,\n                isPicked: !isP,\n                strType: type.MAP\n\n                }\n\n                newGrid[row+j][col+i] = newTile;\n                }\n            }\n            setGr(newGrid)\n\n        }\n    }\n\n\n\n    \n    const click =() =>{\n        if(sId ===0){\n            if(op !== \"\"){\n                let size= parseInt(prompt(\"Size:\"),10)\n                if(op === \"Array\")\n                    arrayGrid(size)\n                else if(op === \"Stack\")\n                    stackGrid(size)\n                else if(op === \"Queue\")\n                    queueGrid(size)\n                else if(op === \"HashMap\")\n                    mapGrid(size)\n                else if(op === \"Tree\")\n                    console.log(\"nothing yet\")\n                else if(op === \"Graph\")\n                    console.log(\"nothing yet\")\n            }\n        }\n        else{\n            setCh(sId)\n        }\n    }\n    \n    const extra = sId === ch ? 'highlight' : ''\n    const main = sType === ``? ``:\n                sType ===type.ARRAY ? `array` :\n                sType ===type.STACK ? `stack` :\n                sType ===type.QUEUE ? `queue` :\n                sType ===type.MAP ? `map` :\n                sType ===type.TREE ? `tree` :`graph` \n    return (\n        <div className = {` myTile ${main} ${extra}`} \n            onClick = {() => click()} >\n                {txt}\n        </div>\n    )\n}\n\nexport default Tile\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}