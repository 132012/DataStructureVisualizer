{"ast":null,"code":"var _jsxFileName = \"/Users/juvenal/Desktop/projects/StructureVisualizer/structure-vis/src/DataStructureVisualizer/StrucFuncs/array.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst arrOp = /*#__PURE__*/_jsxDEV(\"div\", {\n  className: \"controls\",\n  children: [/*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: addValue,\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      id: \"input1\",\n      type: \"number\",\n      placeholder: \"index\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 3,\n      columnNumber: 25\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      id: \"input2\",\n      type: \"text\",\n      placeholder: \"value\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 4,\n      columnNumber: 25\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      children: \"Add\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 5,\n      columnNumber: 25\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 2,\n    columnNumber: 21\n  }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: addValue,\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"number\",\n      placeholder: \"index\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 25\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      children: \"Delete\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 25\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 21\n  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"see items\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 14,\n    columnNumber: 21\n  }, this)]\n}, void 0, true, {\n  fileName: _jsxFileName,\n  lineNumber: 1,\n  columnNumber: 15\n}, this);\n\nconst addValue = (e, st, ch, gr) => {\n  e.preventDefault();\n  let index = document.getElementById(\"input1\").value;\n  index = parseInt(index, 10);\n  const value = document.getElementById(\"input2\").value;\n  const myStruc = st.find(e => e.id === ch).tile; //array of coordinates\n\n  const newGrid = gr.slice();\n  const myIndex = myStruc[index];\n  const i0 = myIndex[0];\n  const i1 = myIndex[1];\n  const tile = newGrid[i0][i1];\n  const newTile = { ...tile,\n    text: `${value}`\n  };\n  newGrid[i0][i1] = newTile;\n  setGr(newGrid);\n};\n\nexport default {\n  arrOp\n};","map":{"version":3,"sources":["/Users/juvenal/Desktop/projects/StructureVisualizer/structure-vis/src/DataStructureVisualizer/StrucFuncs/array.js"],"names":["arrOp","addValue","e","st","ch","gr","preventDefault","index","document","getElementById","value","parseInt","myStruc","find","id","tile","newGrid","slice","myIndex","i0","i1","newTile","text","setGr"],"mappings":";;;AAAA,MAAMA,KAAK,gBAAG;AAAK,EAAA,SAAS,EAAG,UAAjB;AAAA,0BACM;AAAM,IAAA,QAAQ,EAAIC,QAAlB;AAAA,4BACI;AAAO,MAAA,EAAE,EAAC,QAAV;AAAmB,MAAA,IAAI,EAAC,QAAxB;AAAiC,MAAA,WAAW,EAAC;AAA7C;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI;AAAO,MAAA,EAAE,EAAC,QAAV;AAAmB,MAAA,IAAI,EAAC,MAAxB;AAA+B,MAAA,WAAW,EAAC;AAA3C;AAAA;AAAA;AAAA;AAAA,YAFJ,eAGI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAHJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADN,eAQM;AAAM,IAAA,QAAQ,EAAIA,QAAlB;AAAA,4BACI;AAAO,MAAA,IAAI,EAAC,QAAZ;AAAqB,MAAA,WAAW,EAAC;AAAjC;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,UARN,eAaM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAbN;AAAA;AAAA;AAAA;AAAA;AAAA,QAAd;;AAkBgB,MAAMA,QAAQ,GAAG,CAACC,CAAD,EAAGC,EAAH,EAAMC,EAAN,EAASC,EAAT,KAAgB;AAC7BH,EAAAA,CAAC,CAACI,cAAF;AACA,MAAIC,KAAK,GAAGC,QAAQ,CAACC,cAAT,CAAwB,QAAxB,EAAkCC,KAA9C;AACAH,EAAAA,KAAK,GAAGI,QAAQ,CAACJ,KAAD,EAAO,EAAP,CAAhB;AACA,QAAMG,KAAK,GAAGF,QAAQ,CAACC,cAAT,CAAwB,QAAxB,EAAkCC,KAAhD;AAIA,QAAME,OAAO,GAAIT,EAAE,CAACU,IAAH,CAAQX,CAAC,IAAIA,CAAC,CAACY,EAAF,KAASV,EAAtB,EAA0BW,IAA3C,CAR6B,CAQoB;;AACjD,QAAMC,OAAO,GAAGX,EAAE,CAACY,KAAH,EAAhB;AACA,QAAMC,OAAO,GAAGN,OAAO,CAACL,KAAD,CAAvB;AACA,QAAMY,EAAE,GAAGD,OAAO,CAAC,CAAD,CAAlB;AACA,QAAME,EAAE,GAAGF,OAAO,CAAC,CAAD,CAAlB;AACA,QAAMH,IAAI,GAAGC,OAAO,CAACG,EAAD,CAAP,CAAYC,EAAZ,CAAb;AACA,QAAMC,OAAO,GAAE,EACX,GAAGN,IADQ;AAEXO,IAAAA,IAAI,EAAE,GAAEZ,KAAM;AAFH,GAAf;AAKAM,EAAAA,OAAO,CAACG,EAAD,CAAP,CAAYC,EAAZ,IAAkBC,OAAlB;AACAE,EAAAA,KAAK,CAACP,OAAD,CAAL;AAEH,CAtBD;;AAwBhB,eAAe;AAAChB,EAAAA;AAAD,CAAf","sourcesContent":["const arrOp = <div className = \"controls\" >\n                    <form onSubmit = {addValue}>\n                        <input id=\"input1\" type=\"number\" placeholder=\"index\" />\n                        <input id=\"input2\" type=\"text\" placeholder=\"value\" />\n                        <button>Add</button>\n\n                    </form>\n\n                    <form onSubmit = {addValue}>\n                        <input type=\"number\" placeholder=\"index\" />\n                        <button>Delete</button>\n\n                    </form>\n                    <div>\n                        see items\n                    </div>\n                </div>\n                \n                const addValue = (e,st,ch,gr) => {\n                    e.preventDefault()\n                    let index = document.getElementById(\"input1\").value\n                    index = parseInt(index,10)\n                    const value = document.getElementById(\"input2\").value\n                    \n            \n            \n                    const myStruc = (st.find(e => e.id === ch).tile) //array of coordinates\n                    const newGrid = gr.slice()\n                    const myIndex = myStruc[index]\n                    const i0 = myIndex[0]\n                    const i1 = myIndex[1]\n                    const tile = newGrid[i0][i1] \n                    const newTile= {\n                        ...tile,\n                        text:`${value}`\n            \n                        }\n                    newGrid[i0][i1] = newTile\n                    setGr(newGrid)\n            \n                } \n\nexport default {arrOp}"]},"metadata":{},"sourceType":"module"}