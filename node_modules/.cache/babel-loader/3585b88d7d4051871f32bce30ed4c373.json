{"ast":null,"code":"var _jsxFileName = \"/Users/juvenal/Desktop/projects/StructureVisualizer/structure-vis/src/DataStructureVisualizer/Grid.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport Tile from './Tile';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Grid(props) {\n  _s();\n\n  const [grid, setGrid] = useState([]);\n  const [curStruc, setCurStruc] = useState([]); //all current structures in the grid\n\n  const [chosen, setChosen] = useState([]); //all blocks currently clicked/hovered\n\n  const [press, setPress] = useState(false); //is mouse click being held\n\n  const {\n    op,\n    setOp\n  } = props;\n  const type = {\n    ARRAY: \"array\",\n    STACK: \"stack\",\n    QUEUE: \"spring\",\n    MAP: \"autumn\",\n    TREE: \"tree\",\n    GRAPH: \"tres\"\n  };\n  useEffect(() => {\n    const newGrid = initializeGrid();\n    setGrid(newGrid);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"myGrid\",\n    children: grid.map((row, rId) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"myRow\",\n      children: row.map((tile, tId) => /*#__PURE__*/_jsxDEV(Tile, {\n        col: tile.col,\n        row: tile.row,\n        sType: tile.strType,\n        sId: tile.strId,\n        st: curStruc,\n        setSt: setCurStruc,\n        pr: press,\n        setPr: setPress,\n        gr: grid,\n        setGr: setGrid,\n        isP: tile.isPicked,\n        op: op,\n        setOp: setOp\n      }, tId, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 25\n      }, this))\n    }, rId, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 18\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Grid, \"NwkzolFwL60bmro55jp+VIiQMB4=\");\n\n_c = Grid;\nexport default Grid;\n\nconst initializeGrid = () => {\n  const grid = [];\n\n  for (let row = 0; row < 20; row++) {\n    const aRow = [];\n\n    for (let col = 0; col < 45; col++) {\n      aRow.push(createTile(col, row));\n    }\n\n    grid.push(aRow);\n  }\n\n  return grid;\n};\n\nconst createTile = (col, row) => {\n  return {\n    col,\n    row,\n    strType: null,\n    strId: null,\n    isPicked: false\n  };\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"Grid\");","map":{"version":3,"sources":["/Users/juvenal/Desktop/projects/StructureVisualizer/structure-vis/src/DataStructureVisualizer/Grid.js"],"names":["React","useState","useEffect","Tile","Grid","props","grid","setGrid","curStruc","setCurStruc","chosen","setChosen","press","setPress","op","setOp","type","ARRAY","STACK","QUEUE","MAP","TREE","GRAPH","newGrid","initializeGrid","map","row","rId","tile","tId","col","strType","strId","isPicked","aRow","push","createTile"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react'\nimport Tile from './Tile'\n\nfunction Grid(props) {\n    const [grid,setGrid] = useState([])\n    const [curStruc,setCurStruc] = useState([]) //all current structures in the grid\n    const [chosen,setChosen] = useState([]) //all blocks currently clicked/hovered\n    const [press, setPress] = useState(false) //is mouse click being held\n    const {op,setOp} = props\n\n    const type = {\n        ARRAY: \"array\",\n        STACK: \"stack\",\n        QUEUE: \"spring\",\n        MAP: \"autumn\",\n        TREE:\"tree\",\n        GRAPH:\"tres\"\n    }\n\n\n    useEffect(() => {\n        const newGrid = initializeGrid()\n        setGrid(newGrid)\n    },[])\n\n    \n    return (\n        <div className =\"myGrid\">\n            \n            {grid.map((row,rId) =>(\n                 <div className = \"myRow\" key={rId}>\n                     {row.map((tile,tId) =>(\n                        <Tile\n                         key ={tId} \n                         col = {tile.col}\n                         row = {tile.row}\n                         sType = {tile.strType}\n                         sId = {tile.strId}\n                         st = {curStruc}\n                         setSt = {setCurStruc}\n                         pr = {press}\n                         setPr = {setPress}\n                         gr = {grid}\n                         setGr = {setGrid}\n                         isP ={tile.isPicked}\n                         op = {op}\n                         setOp ={setOp}\n                          \n                         />\n                        \n                     ))}\n                 </div>\n            ))}\n            \n        </div>\n    )\n}\n\nexport default Grid\n\nconst initializeGrid = () => {\n    const grid = []\n    for(let row = 0; row <20;row++){\n        const aRow = []\n        for(let col = 0; col<45;col++){\n            aRow.push(createTile(col,row))\n        }\n        grid.push(aRow)\n    }\n    return grid\n}\n\nconst createTile = (col,row) => {\n    return{\n        col,\n        row,\n        strType: null,\n        strId: null,\n        isPicked: false,\n        \n    }\n}\n"]},"metadata":{},"sourceType":"module"}