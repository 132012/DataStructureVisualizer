{"ast":null,"code":"var _jsxFileName = \"/Users/juvenal/Desktop/projects/StructureVisualizer/structure-vis/src/DataStructureVisualizer/Tile.js\";\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Tile(props) {\n  const {\n    col,\n    row,\n    sType,\n    sId,\n    st,\n    setSt,\n    ch,\n    setCh,\n    gr,\n    setGr,\n    isP,\n    op,\n    setOp,\n    type,\n    count,\n    setCount,\n    txt,\n    aKey\n  } = props;\n\n  const stackGrid = size => {\n    if (row - size >= -1) {\n      const newGrid = gr.slice();\n      let tile,\n          newTile,\n          arow,\n          coor = [];\n\n      for (let i = 0; i < size; i++) {\n        arow = row - i;\n        tile = newGrid[arow][col];\n        newTile = { ...tile,\n          isPicked: !isP,\n          strType: type.STACK,\n          strId: count\n        };\n        newGrid[arow][col] = newTile;\n        coor.push([arow, col]);\n      }\n\n      setGr(newGrid);\n      let newCount = count + 1;\n      setCount(newCount);\n      const newSt = st.slice(); //copy list of data structues\n\n      newSt.push({\n        id: count,\n        type: \"stack\",\n        tile: coor\n      });\n      setSt(newSt);\n      setOp(\"\");\n    }\n  };\n\n  const arrayGrid = size => {\n    //setOp(\"\")\n    if (col + size <= 45) {\n      const newGrid = gr.slice();\n      let tile,\n          newTile,\n          acol,\n          coor = [];\n\n      for (let i = 0; i < size; i++) {\n        tile = newGrid[row][col + i];\n        newTile = { ...tile,\n          isPicked: !isP,\n          strType: type.ARRAY,\n          strId: count\n        };\n        newGrid[row][col + i] = newTile;\n        acol = col + i;\n        coor.push([row, acol]);\n      }\n\n      setGr(newGrid);\n      let newCount = count + 1;\n      setCount(newCount);\n      const newSt = st.slice(); //copy list of data structues\n\n      newSt.push({\n        id: count,\n        type: \"array\",\n        tile: coor\n      });\n      setSt(newSt);\n      console.log(st);\n      setOp(\"\");\n    }\n  };\n\n  const queueGrid = size => {\n    if (col - size >= -1) {\n      const newGrid = gr.slice();\n      let tile,\n          newTile,\n          acol,\n          coor = [];\n\n      for (let i = 0; i < size; i++) {\n        acol = col - i;\n        tile = newGrid[row][acol];\n        newTile = { ...tile,\n          isPicked: !isP,\n          strType: type.QUEUE,\n          strId: count\n        };\n        newGrid[row][acol] = newTile;\n        coor.push([row, acol]);\n      }\n\n      setGr(newGrid);\n      let newCount = count + 1;\n      setCount(newCount);\n      const newSt = st.slice(); //copy list of data structues\n\n      newSt.push({\n        id: count,\n        type: \"queue\",\n        tile: coor\n      });\n      setSt(newSt);\n      setOp(\"\");\n    }\n  };\n\n  const mapGrid = size => {\n    if (col + 2 <= 44 && row + size <= 20) {\n      const newGrid = gr.slice();\n      let tile,\n          newTile,\n          coor = [],\n          arr,\n          r,\n          c;\n\n      for (let i = 0; i < size; i++) {\n        arr = [];\n\n        for (let j = 0; j < 3; j++) {\n          r = row + i;\n          c = col + j;\n          tile = newGrid[r][c];\n          newTile = { ...tile,\n            isPicked: !isP,\n            strType: type.MAP,\n            strId: count\n          };\n          newGrid[r][c] = newTile; //update tile in copy grid\n\n          arr.push([r, c]); //pushes for single key/value\n        }\n\n        coor.push(arr);\n      }\n\n      setGr(newGrid);\n      let newCount = count + 1;\n      setCount(newCount);\n      const newSt = st.slice(); //copy list of data structues\n\n      newSt.push({\n        id: count,\n        type: \"map\",\n        tile: coor\n      });\n      setSt(newSt);\n      setOp(\"\");\n    }\n  };\n\n  const treeGrid = root => {\n    //setOp(\"\")\n    console.log(root);\n    const newGrid = gr.slice();\n    let tile,\n        newTile,\n        coor = []; // create  root tile\n\n    tile = newGrid[row][col];\n    newTile = { ...tile,\n      isPicked: !isP,\n      txt: `${root}`,\n      strType: type.TREE,\n      strId: count,\n      myKey: aKey\n    };\n    newGrid[row][col] = newTile;\n    coor.push([row, col]);\n    setGr(newGrid);\n    let newCount = count + 1;\n    setCount(newCount);\n    const newSt = st.slice(); //copy list of data structues\n\n    newSt.push({\n      id: count,\n      type: \"tree\",\n      tile: coor\n    });\n    setSt(newSt);\n    setOp(\"\");\n  };\n\n  const graphGrid = () => {\n    //setOp(\"\")\n    const newGrid = gr.slice();\n    let tile,\n        newTile,\n        coor = []; // create  vertex tile\n\n    tile = newGrid[row][col];\n    newTile = { ...tile,\n      isPicked: !isP,\n      txt: `0`,\n      strType: type.GRAPH,\n      strId: count,\n      myKey: aKey\n    };\n    newGrid[row][col] = newTile;\n    coor.push([row, col]);\n    setGr(newGrid);\n    let newCount = count + 1;\n    setCount(newCount);\n    const newSt = st.slice(); //copy list of data structues\n\n    newSt.push({\n      id: count,\n      type: \"graph\",\n      tile: coor\n    });\n    setSt(newSt);\n    setOp(\"\");\n  };\n\n  const vertexGrid = () => {\n    //setOp(\"\")\n    const newGrid = gr.slice();\n    let tile, newTile;\n    const coor = st.find(e => e.id === ch.id);\n    let myStruc = coor.tile; //array of coordinates\n    // create  root tile\n\n    tile = newGrid[row][col];\n    newTile = { ...tile,\n      txt: `0`,\n      strType: type.GRAPH,\n      strId: count,\n      myKey: aKey\n    };\n    newGrid[row][col] = newTile;\n    coor.push([row, col]);\n    setGr(newGrid);\n    let newCount = count + 1;\n    setCount(newCount);\n    const newSt = st.slice(); //copy list of data structues\n\n    newSt.push({\n      id: count,\n      type: \"graph\",\n      tile: coor\n    });\n    setSt(newSt);\n    setOp(\"\");\n  };\n\n  const click = () => {\n    if (sId === 0) {\n      if (op !== \"\") {\n        let size = parseInt(prompt(\"Size/root:\"), 10);\n        console.log(size);\n        if (op === \"Array\") arrayGrid(size);else if (op === \"Stack\") stackGrid(size);else if (op === \"Queue\") queueGrid(size);else if (op === \"HashMap\") mapGrid(size);else if (op === \"Tree\") treeGrid(size);else if (op === \"Graph\") graphGrid(size);else if (op === \"Vertex\") vertexGrid();\n      }\n    } else {\n      setCh({\n        id: sId,\n        type: sType\n      });\n      setOp(sType);\n      console.log(ch);\n    }\n  };\n\n  const extra = sId === ch.id ? ' highlight' : '';\n  const main = sType === `` ? `` : sType === type.ARRAY ? `array helper` : sType === type.STACK ? `stack helper` : sType === type.QUEUE ? `queue helper` : sType === type.MAP ? `map helper` : sType === type.TREE ? `tree helper` : `graph helper`;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: `${aKey}`,\n    className: ` myTile ${main} ${extra} `,\n    onClick: () => click(),\n    children: txt\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 274,\n    columnNumber: 9\n  }, this);\n}\n\n_c = Tile;\nexport default Tile;\n\nvar _c;\n\n$RefreshReg$(_c, \"Tile\");","map":{"version":3,"sources":["/Users/juvenal/Desktop/projects/StructureVisualizer/structure-vis/src/DataStructureVisualizer/Tile.js"],"names":["React","Tile","props","col","row","sType","sId","st","setSt","ch","setCh","gr","setGr","isP","op","setOp","type","count","setCount","txt","aKey","stackGrid","size","newGrid","slice","tile","newTile","arow","coor","i","isPicked","strType","STACK","strId","push","newCount","newSt","id","arrayGrid","acol","ARRAY","console","log","queueGrid","QUEUE","mapGrid","arr","r","c","j","MAP","treeGrid","root","TREE","myKey","graphGrid","GRAPH","vertexGrid","find","e","myStruc","click","parseInt","prompt","extra","main"],"mappings":"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","sourcesContent":["import React from 'react'\n\nfunction Tile(props) {\n    const {col,row,sType,sId,st,setSt,ch,setCh,gr,setGr,isP,op,setOp,type,count,setCount,txt,aKey} = props\n\n\n    const stackGrid = ( size) => {\n        if((row -size) >= -1){\n\n        const newGrid = gr.slice();\n        let tile,newTile,arow,coor =[]\n        for(let i =0;i<size;i++){\n            arow =row-i\n            tile = newGrid[arow][col];\n            newTile= {\n              ...tile,\n              isPicked: !isP,\n              strType: type.STACK,\n              strId:count\n            };\n\n            newGrid[arow][col] = newTile\n            coor.push([arow,col])\n        }\n        setGr(newGrid)\n        let newCount = count +1;\n        setCount(newCount)\n\n        const newSt = st.slice() //copy list of data structues\n        newSt.push({id: count,type:\"stack\", tile: coor})\n        setSt(newSt)\n        setOp(\"\")\n\n        }\n      }\n      \n    const arrayGrid = (size) =>{\n        //setOp(\"\")\n        if((col +size) <= 45){\n\n            const newGrid = gr.slice()\n            let tile, newTile,acol,coor =[]\n            \n\n            for(let i =0;i<size;i++){\n                tile = newGrid[row][col+i]\n                newTile= {\n                ...tile,\n                isPicked: !isP,\n                strType: type.ARRAY,\n                strId:count\n                };\n\n                newGrid[row][col+i] = newTile\n                acol =col+i\n                coor.push([row,acol])\n            }\n            setGr(newGrid)\n            let newCount = count +1;\n            setCount(newCount)\n\n            const newSt = st.slice() //copy list of data structues\n            newSt.push({id: count,type:\"array\", tile: coor})\n            setSt(newSt)\n            console.log(st)\n            setOp(\"\")\n\n        }\n\n    }\n\n    const queueGrid = (size) => {\n        if((col -size) >= -1){\n\n            const newGrid = gr.slice();\n            let tile, newTile,acol,coor =[]\n            for(let i =0;i<size;i++){\n                acol = col-i\n                tile = newGrid[row][acol];\n                newTile= {\n                ...tile,\n                isPicked: !isP,\n                strType: type.QUEUE,\n                strId:count\n\n                };\n\n                newGrid[row][acol] = newTile;\n                coor.push([row,acol])\n            }\n            setGr(newGrid)\n            let newCount = count +1;\n            setCount(newCount)\n\n            const newSt = st.slice() //copy list of data structues\n            newSt.push({id: count,type:\"queue\", tile: coor})\n            setSt(newSt)\n            setOp(\"\")\n\n        }\n    }\n    const mapGrid = (size) => {\n        if((col +2) <= 44  && (row +size) <= 20){\n            const newGrid = gr.slice();\n            let tile, newTile,coor =[],arr,r,c\n            for(let i = 0; i<size;i++){\n                arr =[]\n                for(let j = 0;j<3; j++){\n                    r=row+i\n                    c=col+j\n                    tile = newGrid[r][c]\n                    newTile= {\n                    ...tile,\n                    isPicked: !isP,\n                    strType: type.MAP, \n                    strId:count\n\n                    }\n                newGrid[r][c] = newTile; //update tile in copy grid\n                \n                arr.push([r,c]) //pushes for single key/value\n\n                \n                }\n                coor.push(arr)\n            }\n            setGr(newGrid)\n            let newCount = count +1;\n            setCount(newCount)\n\n            const newSt = st.slice() //copy list of data structues\n            newSt.push({id: count,type:\"map\", tile: coor})\n            setSt(newSt)\n            setOp(\"\")\n\n        }\n    }\n\n    const treeGrid = (root) =>{\n        //setOp(\"\")\n        \n            console.log(root)\n            const newGrid = gr.slice()\n            let tile, newTile,coor =[]\n\n            // create  root tile\n            tile = newGrid[row][col]\n            newTile= {\n            ...tile,\n            isPicked: !isP,\n            txt:`${root}`,\n            strType: type.TREE,\n            strId:count,\n            myKey: aKey\n            };\n\n            newGrid[row][col] = newTile\n            coor.push([row,col])\n\n            setGr(newGrid)\n            let newCount = count +1;\n            setCount(newCount)\n            const newSt = st.slice() //copy list of data structues\n            newSt.push({id: count, type:\"tree\",tile: coor})\n            setSt(newSt)\n            setOp(\"\")\n            \n    }\n\n    const graphGrid = () =>{\n        //setOp(\"\")\n        \n            const newGrid = gr.slice()\n            let tile, newTile,coor =[]\n\n            // create  vertex tile\n            tile = newGrid[row][col]\n            newTile= {\n            ...tile,\n            isPicked: !isP,\n            txt:`0`,\n            strType: type.GRAPH,\n            strId:count,\n            myKey: aKey\n            };\n\n            newGrid[row][col] = newTile\n            coor.push([row,col])\n\n            setGr(newGrid)\n            let newCount = count +1;\n            setCount(newCount)\n            const newSt = st.slice() //copy list of data structues\n            newSt.push({id: count, type:\"graph\",tile: coor})\n            setSt(newSt)\n            setOp(\"\")\n\n            \n    }\n\n    const vertexGrid = () =>{\n        //setOp(\"\")\n        \n            const newGrid = gr.slice()\n            let tile, newTile\n            const coor = (st.find(e => e.id === ch.id))\n            let myStruc = coor.tile //array of coordinates\n\n            // create  root tile\n            tile = newGrid[row][col]\n            newTile= {\n            ...tile,\n            txt:`0`,\n            strType: type.GRAPH,\n            strId:count,\n            myKey: aKey\n            };\n\n            newGrid[row][col] = newTile\n            coor.push([row,col])\n\n            setGr(newGrid)\n            let newCount = count +1;\n            setCount(newCount)\n            const newSt = st.slice() //copy list of data structues\n            newSt.push({id: count, type:\"graph\",tile: coor})\n            setSt(newSt)\n            setOp(\"\")\n\n            \n    }\n\n\n\n\n    \n    const click =() =>{\n        if(sId ===0){\n            if(op !== \"\"){\n                let size= parseInt(prompt(\"Size/root:\"),10)\n                console.log(size)\n                if(op === \"Array\")\n                    arrayGrid(size)\n                else if(op === \"Stack\")\n                    stackGrid(size)\n                else if(op === \"Queue\")\n                    queueGrid(size)\n                else if(op === \"HashMap\")\n                    mapGrid(size)\n                else if(op === \"Tree\")\n                    treeGrid(size)\n                else if(op === \"Graph\")\n                    graphGrid(size)\n                else if(op===\"Vertex\")\n                    vertexGrid()\n            }\n        }\n        else{\n            setCh({id:sId , type:sType})\n            setOp(sType)\n            console.log(ch)\n\n        }\n    }\n\n    const extra = sId === ch.id ? ' highlight' : ''\n    const main = sType === ``? ``:\n                sType ===type.ARRAY ? `array helper` :\n                sType ===type.STACK ? `stack helper` :\n                sType ===type.QUEUE ? `queue helper` :\n                sType ===type.MAP ? `map helper` :\n                sType ===type.TREE ? `tree helper` :`graph helper` \n    return (\n        <div id={`${aKey}`} className = {` myTile ${main} ${extra} `} \n            onClick = {() => click()} >\n                {txt}\n        </div>\n    )\n}\n\nexport default Tile\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}