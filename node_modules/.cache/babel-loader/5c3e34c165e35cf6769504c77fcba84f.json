{"ast":null,"code":"var _jsxFileName = \"/Users/juvenal/Desktop/projects/StructureVisualizer/structure-vis/src/DataStructureVisualizer/StrucFuncs/TreeOp.js\";\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction TreeOp(props) {\n  const {\n    gr,\n    setGr,\n    ch,\n    st,\n    type,\n    setSt,\n    count\n  } = props;\n  let line;\n\n  const addValue = e => {\n    e.preventDefault();\n    let value = document.getElementById(\"input1\").value;\n    value = parseInt(value, 10);\n    const fullStruc = st.find(e => e.id === ch.id);\n    let myStruc = fullStruc.tile; //array of coordinates\n\n    let [r, c] = myStruc[0];\n    const newGrid = gr.slice();\n    let i;\n\n    for (i = 0; i < 15;) {\n      console.log(\"in there\");\n\n      if (gr[r][c].txt > value) {\n        i = 2 * i + 1;\n        if (typeof myStruc[i] === \"undefined\") break;\n        r = myStruc[i][0]; //left child\n\n        c = myStruc[i][1]; //left child\n      } else {\n        i = 2 * i + 2;\n        if (typeof myStruc[i] === \"undefined\") break;\n        r = myStruc[i][0]; //right child\n\n        c = myStruc[i][1]; //right child\n      }\n    }\n\n    if (i > 14) return; //reached tree depth limit\n\n    let newR,\n        newC,\n        offset = [0, 4, 4, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1];\n    let g = gr[r][c]; //parent\n\n    if (g.txt > value) {\n      newR = r + 1;\n      newC = c - offset[i];\n    } else {\n      newR = r + 1;\n      newC = c + offset[i];\n    }\n\n    const aTile = newGrid[newR][newC]; //child\n\n    if (typeof aTile == \"undefined\" || !(aTile.strType === \"\")) return; //tile is already being used\n\n    const newTile = { ...aTile,\n      txt: `${value}`,\n      strType: type.TREE,\n      strId: fullStruc.id,\n      myKey: g.myKey + \"\" + newC //for unique keys\n\n    };\n    newGrid[newR][newC] = newTile;\n    setGr(newGrid);\n    const newSt = st.filter(e => !(e.id === fullStruc.id)); //list of data structures without tree\n\n    myStruc[i] = [newR, newC];\n    newSt.push({\n      id: ch.id,\n      tile: myStruc\n    });\n    setSt(newSt);\n    console.log(st); //connecting lines\n\n    let line = /*#__PURE__*/_jsxDEV(\"svg\", {\n      children: /*#__PURE__*/_jsxDEV(\"line\", {\n        id: \"line1\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 25\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 20\n    }, this);\n\n    let line1 = document.getElementById(`#line${g.myKey}`); //line\n\n    let {\n      x1,\n      y1\n    } = getAbsPosition(document.getElementById(`#${r}${c}`)); //parent\n\n    let {\n      x2,\n      y2\n    } = getAbsPosition(document.getElementById(`#${newR}${newC}`)); //child\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"controls\",\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: addValue,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"input1\",\n        type: \"number\",\n        placeholder: \"value\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Add\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"see items\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 9\n  }, this);\n}\n\n_c = TreeOp;\nexport default TreeOp;\n\nfunction getAbsPosition(element) {\n  var rect = element.getBoundingClientRect();\n  return {\n    x: rect.left,\n    y: rect.top\n  };\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"TreeOp\");","map":{"version":3,"sources":["/Users/juvenal/Desktop/projects/StructureVisualizer/structure-vis/src/DataStructureVisualizer/StrucFuncs/TreeOp.js"],"names":["React","TreeOp","props","gr","setGr","ch","st","type","setSt","count","line","addValue","e","preventDefault","value","document","getElementById","parseInt","fullStruc","find","id","myStruc","tile","r","c","newGrid","slice","i","console","log","txt","newR","newC","offset","g","aTile","strType","newTile","TREE","strId","myKey","newSt","filter","push","line1","x1","y1","getAbsPosition","x2","y2","element","rect","getBoundingClientRect","x","left","y","top"],"mappings":"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","sourcesContent":["import React from 'react'\n\n\nfunction TreeOp(props) {\n\n    const {gr,setGr,ch,st,type,setSt,count} = props\n    let line\n    const addValue = (e) => {\n        e.preventDefault()\n        let value = document.getElementById(\"input1\").value\n        value = parseInt(value,10)\n\n        const fullStruc = (st.find(e => e.id === ch.id))\n        let myStruc = fullStruc.tile //array of coordinates\n        let [r,c] = myStruc[0]\n        const newGrid = gr.slice()\n        \n        let i\n        for(i =0; i<15;){\n            \n                console.log(\"in there\")\n                if(gr[r][c].txt > value){\n                    i = 2*i+1 \n\n                    if(typeof(myStruc[i])===\"undefined\")\n                        break\n                    r = myStruc[i][0] //left child\n                    c = myStruc[i][1] //left child\n                }\n                else{\n                    i = 2*i+2\n                    if(typeof(myStruc[i])===\"undefined\")\n                        break\n                    \n                    r = myStruc[i][0] //right child\n                    c = myStruc[i][1] //right child\n                }\n            \n            }\n        if(i>14) return  //reached tree depth limit\n        let newR,newC, offset = [0,4,4,2,2,2,2,1,1,1,1,1,1,1,1]\n        let g = gr[r][c] //parent\n        if(g.txt > value){\n            newR = r +1\n            newC = c - offset[i]\n        }\n        else{\n            newR = r +1\n            newC = c + offset[i]\n        }\n        const aTile = newGrid[newR][newC]//child\n        if(typeof(aTile) == \"undefined\" || !(aTile.strType === \"\")) return //tile is already being used\n        const newTile= {\n            ...aTile,\n            txt:`${value}`,\n            strType: type.TREE,\n            strId:fullStruc.id,\n            myKey: g.myKey +\"\"+newC //for unique keys\n            }\n        newGrid[newR][newC] = newTile\n        setGr(newGrid)\n        const newSt = st.filter(e => !(e.id ===fullStruc.id))//list of data structures without tree\n        myStruc[i]=[newR,newC]\n        newSt.push({id:ch.id,tile:myStruc})\n        setSt(newSt)\n        console.log(st)\n\n        //connecting lines\n        let line = <svg><line id=\"line1\"/></svg>\n        let line1 = document.getElementById(`#line${g.myKey}`)       //line\n        let {x1,y1} = getAbsPosition(document.getElementById(`#${r}${c}`))          //parent\n        let {x2,y2} = getAbsPosition(document.getElementById(`#${newR}${newC}`));     //child\n        \n        }\n        \n\n    \n\n    return (\n        <div className = \"controls\" >\n                <form onSubmit = {addValue}>\n                    <input id=\"input1\" type=\"number\" placeholder=\"value\" />\n                    <button>Add</button>\n\n                </form>\n                {}\n\n                <div>\n                    see items\n                </div>\n            </div>\n    )\n}\n\nexport default TreeOp\n\nfunction getAbsPosition(element) {\n    var rect = element.getBoundingClientRect();\n    return {x:rect.left,y:rect.top}\n }"]},"metadata":{},"sourceType":"module"}