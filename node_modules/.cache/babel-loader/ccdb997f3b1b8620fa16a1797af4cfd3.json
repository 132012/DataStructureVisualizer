{"ast":null,"code":"var _jsxFileName = \"/Users/juvenal/Desktop/projects/StructureVisualizer/structure-vis/src/DataStructureVisualizer/StrucFuncs/TreeOp.js\";\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction TreeOp(props) {\n  const {\n    gr,\n    setGr,\n    ch,\n    st,\n    type,\n    setSt,\n    count\n  } = props;\n\n  const addValue = e => {\n    e.preventDefault();\n    let value = document.getElementById(\"input1\").value;\n    value = parseInt(value, 10); //reinsert coordinates of tree in each add\n\n    const fullStruc = st.find(e => e.id === ch.id);\n    const myStruc = fullStruc.tile; //array of coordinates\n\n    const newGrid = gr.slice();\n    let [r, c] = myStruc[0];\n    console.log(myStruc);\n    let tile = newGrid[r][c]; //root tile on grid\n\n    tile = [tile.row, tile.col];\n\n    for (let i = 0; i < 15;) {\n      console.log(i);\n\n      if (typeof tile === \"object\" && !(tile.txt === \"\")) {\n        r = tile[0];\n        c = tile[1];\n\n        if (tile.txt > value) {\n          i = 2 * i + 1;\n          tile = myStruc[i]; //left child\n        } else {\n          i = 2 * i + 2;\n          tile = myStruc[i]; //right child\n        }\n      } else {\n        let newR,\n            newC,\n            offset = [0, 4, 4, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1];\n\n        if (gr[r][c].txt > value) {\n          newR = r + 1;\n          newC = c - offset[i];\n        } else {\n          newR = r + 1;\n          newC = c + offset[i];\n        }\n\n        const aTile = newGrid[newR][newC];\n        const newTile = { ...aTile,\n          txt: `${value}`,\n          strType: type.TREE,\n          strId: fullStruc.id\n        };\n        newGrid[newR][newC] = newTile;\n        setGr(newGrid);\n        const newSt = st.filter(e => e.id === fullStruc.id).tile; //list of data structures without tree\n\n        myStruc[i] = [newR, newC];\n        setSt(tile);\n        console.log(myStruc);\n        break;\n      }\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"controls\",\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: addValue,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"input1\",\n        type: \"number\",\n        placeholder: \"value\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Add\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"see items\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 9\n  }, this);\n}\n\n_c = TreeOp;\nexport default TreeOp;\n\nvar _c;\n\n$RefreshReg$(_c, \"TreeOp\");","map":{"version":3,"sources":["/Users/juvenal/Desktop/projects/StructureVisualizer/structure-vis/src/DataStructureVisualizer/StrucFuncs/TreeOp.js"],"names":["React","TreeOp","props","gr","setGr","ch","st","type","setSt","count","addValue","e","preventDefault","value","document","getElementById","parseInt","fullStruc","find","id","myStruc","tile","newGrid","slice","r","c","console","log","row","col","i","txt","newR","newC","offset","aTile","newTile","strType","TREE","strId","newSt","filter"],"mappings":"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","sourcesContent":["import React from 'react'\n\n\nfunction TreeOp(props) {\n\n    const {gr,setGr,ch,st,type,setSt,count} = props\n\n    const addValue = (e) => {\n        e.preventDefault()\n        let value = document.getElementById(\"input1\").value\n        value = parseInt(value,10)\n\n        //reinsert coordinates of tree in each add\n        \n\n\n        const fullStruc = (st.find(e => e.id === ch.id))\n        const myStruc = fullStruc.tile //array of coordinates\n        const newGrid = gr.slice()\n        let [r,c] = myStruc[0]\n        console.log(myStruc)\n        \n        let tile = newGrid[r][c] //root tile on grid\n\n        tile = [tile.row,tile.col]\n        for(let i =0; i<15;){\n            console.log(i)\n            \n            if(typeof(tile) ===\"object\"  && !(tile.txt ===\"\")){\n                r=tile[0]\n                c = tile[1]\n                \n                if(tile.txt > value){\n                    i = 2*i+1\n                    tile = myStruc[i] //left child\n                }\n                else{\n                    i = 2*i+2\n                    tile = myStruc[i] //right child\n                }}\n            else{\n                let newR,newC, offset = [0,4,4,2,2,2,2,1,1,1,1,1,1,1,1]\n                \n                if(gr[r][c].txt > value){\n                    newR = r +1\n                    newC = c - offset[i]\n                }\n                else{\n                    newR = r +1\n                    newC = c + offset[i]\n                }\n                const aTile = newGrid[newR][newC]\n                const newTile= {\n                    ...aTile,\n                    txt:`${value}`,\n                    strType: type.TREE,\n                    strId:fullStruc.id\n\n                    }\n                newGrid[newR][newC] = newTile\n                setGr(newGrid)\n                const newSt = st.filter(e => e.id ===fullStruc.id).tile//list of data structures without tree\n                myStruc[i]=[newR,newC]\n                setSt(tile)\n                console.log(myStruc)\n                break\n                }\n            }\n        }\n        \n\n    \n\n    return (\n        <div className = \"controls\" >\n                <form onSubmit = {addValue}>\n                    <input id=\"input1\" type=\"number\" placeholder=\"value\" />\n                    <button>Add</button>\n\n                </form>\n\n\n                <div>\n                    see items\n                </div>\n            </div>\n    )\n}\n\nexport default TreeOp\n"]},"metadata":{},"sourceType":"module"}