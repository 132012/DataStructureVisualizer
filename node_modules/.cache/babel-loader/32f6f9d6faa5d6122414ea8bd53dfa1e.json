{"ast":null,"code":"var _jsxFileName = \"/Users/juvenal/Desktop/projects/StructureVisualizer/structure-vis/src/DataStructureVisualizer/StrucFuncs/HashMapOp.js\";\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction HashMapOp(props) {\n  const {\n    gr,\n    setGr,\n    ch,\n    st\n  } = props;\n\n  const put = e => {\n    e.preventDefault();\n    const key = document.getElementById(\"input1\").value;\n    const value = document.getElementById(\"input2\").value;\n    const myStruc = st.find(e => e.id === ch.id).tile; //array of coordinates\n\n    let loc = -1,\n        i,\n        empty;\n\n    for (i = myStruc.length - 1; i >= 0; i--) {\n      let [row, col] = myStruc[i][0]; //key coordinate\n\n      let a = gr[row][col];\n\n      if (a.txt === \"\") {\n        empty = i;\n        console.log(\"im here \" + empty);\n      }\n\n      if (a.txt === key) {\n        loc = i;\n        break;\n      }\n    }\n\n    if (loc > -1 || empty > -1) {\n      const pos = loc > -1 ? loc : empty;\n      const newGrid = gr.slice();\n      const keyVal = myStruc[pos]; //found specific key/value array coordinates [k,>,v] \n\n      const item = [key, \">\", value];\n\n      for (let j = 0; j < 3; j++) {\n        const tile = newGrid[keyVal[j][0]][keyVal[j][1]];\n        const newTile = { ...tile,\n          txt: `${item[j]}`\n        };\n        newGrid[keyVal[j][0]][keyVal[j][1]] = newTile;\n      }\n\n      setGr(newGrid);\n    } else {\n      console.log(\"no more room\");\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"controls\",\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: put,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"input1\",\n        type: \"text\",\n        placeholder: \"key\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"input2\",\n        type: \"text\",\n        placeholder: \"value\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Put\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"input3\",\n        type: \"text\",\n        placeholder: \"key\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Remove\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"see items\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 9\n  }, this);\n}\n\n_c = HashMapOp;\nexport default HashMapOp;\n\nvar _c;\n\n$RefreshReg$(_c, \"HashMapOp\");","map":{"version":3,"sources":["/Users/juvenal/Desktop/projects/StructureVisualizer/structure-vis/src/DataStructureVisualizer/StrucFuncs/HashMapOp.js"],"names":["React","HashMapOp","props","gr","setGr","ch","st","put","e","preventDefault","key","document","getElementById","value","myStruc","find","id","tile","loc","i","empty","length","row","col","a","txt","console","log","pos","newGrid","slice","keyVal","item","j","newTile"],"mappings":"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","sourcesContent":["import React from 'react'\n\nfunction HashMapOp(props) {\n\n    const {gr,setGr,ch,st} = props\n\n    const put = (e) => {\n        e.preventDefault()\n        const key = document.getElementById(\"input1\").value\n        const value = document.getElementById(\"input2\").value\n\n\n        const myStruc = (st.find(e => e.id === ch.id).tile) //array of coordinates\n        let loc =-1, i,empty\n        for(i =myStruc.length-1;i>=0;i--){\n            let [row,col] = myStruc[i][0] //key coordinate\n            let a = ((gr[row][col]))\n            if(a.txt ===\"\"){\n                empty =i\n                console.log(\"im here \"+ empty)\n            }\n            if(a.txt === key){\n                loc = i\n                break\n            }\n        }\n        if(loc > -1 || empty >-1){\n\n            const pos = loc > -1 ? loc :empty\n            const newGrid = gr.slice()\n            const keyVal = myStruc[pos] //found specific key/value array coordinates [k,>,v] \n            const item = [key,\">\",value]\n            for(let j = 0;j<3; j++){\n                const tile = newGrid[keyVal[j][0]][keyVal[j][1]] \n                const newTile= {\n                ...tile,\n                txt:`${item[j]}`\n\n                }\n                newGrid[keyVal[j][0]][keyVal[j][1]] = newTile\n            }\n            setGr(newGrid)\n        }\n        else{\n            console.log(\"no more room\")\n        }\n\n\n    }\n\n    return (\n        <div className = \"controls\" >\n            <form onSubmit = {put}>\n                <input id=\"input1\" type=\"text\" placeholder=\"key\" />\n                <input id=\"input2\" type=\"text\" placeholder=\"value\" />\n                <button>Put</button>\n\n            </form>\n\n            <form >\n                <input id=\"input3\" type=\"text\" placeholder=\"key\" />\n                <button>Remove</button>\n\n            </form>\n            <div>\n                see items\n            </div>\n        </div>\n    )\n}\n\nexport default HashMapOp\n"]},"metadata":{},"sourceType":"module"}