{"ast":null,"code":"var _jsxFileName = \"/Users/juvenal/Desktop/projects/StructureVisualizer/structure-vis/src/DataStructureVisualizer/StrucFuncs/StackOp.js\";\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction StackOp(props) {\n  const {\n    gr,\n    setGr,\n    ch,\n    st,\n    setSt\n  } = props;\n\n  const pushValue = e => {\n    e.preventDefault();\n    const value = document.getElementById(\"input1\").value;\n    const myStruc = st.find(e => e.id === ch.id).slice(); //my stack structure\n\n    let top = myStruc.top;\n    const tiles = myStruc.tile;\n    if (top >= tiles.length) return; //finds the top index to put push value //better than filtering this struc from all structures and pushing new struc withupdated top value\n    //for(let i =0;i<myStruc.length;i++){\n    // let [row,col] = myStruc[i]\n    //let a = ((gr[row][col]))\n\n    /*if(a.txt === \"\"){\n        top = i\n        break\n    }*/\n    //}\n    //if(top > -1){\n\n    const newGrid = gr.slice();\n    const [r, c] = tiles[top];\n    const tile = newGrid[r][c];\n    const newTile = { ...tile,\n      txt: `${value}`\n    };\n    newGrid[r][c] = newTile;\n    setGr(newGrid);\n    let updateStr = st.filter(e => e.id !== ch.id);\n    myStruc.top = top + 1;\n    updateStr.push(myStruc);\n    setSt(updateStr); //}\n  };\n\n  const popValue = e => {\n    e.preventDefault();\n    console.log(st);\n    console.log(ch.id);\n    const myStruc = st.find(e => e.id === ch.id); //array of coordinates\n\n    let top = myStruc.top - 1;\n    const tiles = myStruc.tile;\n    /*for(let i =myStruc.length -1;i>=0;i--){\n        let [row,col] = myStruc[i]\n        let a = ((gr[row][col]))\n        if(!(a.txt === \"\")){\n            top = i\n            break\n        }\n    }*/\n\n    if (top < 0) return;\n    console.log(myStruc.top);\n    const newGrid = gr.slice();\n    const [r, c] = tiles[top];\n    const tile = newGrid[r][c];\n    const newTile = { ...tile,\n      txt: ``\n    };\n    newGrid[r][c] = newTile;\n    setGr(newGrid);\n    let updateStr = st.filter(e => e.id === ch.id);\n    myStruc.top = top;\n    updateStr.push(myStruc);\n    setSt(updateStr);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"controls\",\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: pushValue,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"input1\",\n        type: \"text\",\n        placeholder: \"value\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Push\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: popValue,\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Pop\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"see items\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 9\n  }, this);\n}\n\n_c = StackOp;\nexport default StackOp;\n\nvar _c;\n\n$RefreshReg$(_c, \"StackOp\");","map":{"version":3,"sources":["/Users/juvenal/Desktop/projects/StructureVisualizer/structure-vis/src/DataStructureVisualizer/StrucFuncs/StackOp.js"],"names":["React","StackOp","props","gr","setGr","ch","st","setSt","pushValue","e","preventDefault","value","document","getElementById","myStruc","find","id","slice","top","tiles","tile","length","newGrid","r","c","newTile","txt","updateStr","filter","push","popValue","console","log"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;;;AAEA,SAASC,OAAT,CAAiBC,KAAjB,EAAwB;AACpB,QAAM;AAACC,IAAAA,EAAD;AAAIC,IAAAA,KAAJ;AAAUC,IAAAA,EAAV;AAAaC,IAAAA,EAAb;AAAgBC,IAAAA;AAAhB,MAAyBL,KAA/B;;AAEA,QAAMM,SAAS,GAAIC,CAAD,IAAO;AACrBA,IAAAA,CAAC,CAACC,cAAF;AACA,UAAMC,KAAK,GAAGC,QAAQ,CAACC,cAAT,CAAwB,QAAxB,EAAkCF,KAAhD;AAEA,UAAMG,OAAO,GAAIR,EAAE,CAACS,IAAH,CAAQN,CAAC,IAAIA,CAAC,CAACO,EAAF,KAASX,EAAE,CAACW,EAAzB,CAAD,CAA+BC,KAA/B,EAAhB,CAJqB,CAIkC;;AACvD,QAAIC,GAAG,GAAEJ,OAAO,CAACI,GAAjB;AACA,UAAMC,KAAK,GAAGL,OAAO,CAACM,IAAtB;AAEA,QAAGF,GAAG,IAAEC,KAAK,CAACE,MAAd,EAAsB,OARD,CASrB;AACA;AACG;AACC;;AACA;AACZ;AACA;AACA;AACQ;AAEA;;AACI,UAAMC,OAAO,GAAGnB,EAAE,CAACc,KAAH,EAAhB;AACA,UAAM,CAACM,CAAD,EAAGC,CAAH,IAAQL,KAAK,CAACD,GAAD,CAAnB;AACA,UAAME,IAAI,GAAGE,OAAO,CAACC,CAAD,CAAP,CAAWC,CAAX,CAAb;AACA,UAAMC,OAAO,GAAE,EACX,GAAGL,IADQ;AAEXM,MAAAA,GAAG,EAAE,GAAEf,KAAM;AAFF,KAAf;AAKAW,IAAAA,OAAO,CAACC,CAAD,CAAP,CAAWC,CAAX,IAAgBC,OAAhB;AACArB,IAAAA,KAAK,CAACkB,OAAD,CAAL;AACA,QAAIK,SAAS,GAAGrB,EAAE,CAACsB,MAAH,CAAUnB,CAAC,IAAIA,CAAC,CAACO,EAAF,KAASX,EAAE,CAACW,EAA3B,CAAhB;AACAF,IAAAA,OAAO,CAACI,GAAR,GAAcA,GAAG,GAAE,CAAnB;AACAS,IAAAA,SAAS,CAACE,IAAV,CAAef,OAAf;AACAP,IAAAA,KAAK,CAACoB,SAAD,CAAL,CAjCiB,CAkCrB;AAGH,GArCD;;AAuCA,QAAMG,QAAQ,GAAIrB,CAAD,IAAO;AACpBA,IAAAA,CAAC,CAACC,cAAF;AAEAqB,IAAAA,OAAO,CAACC,GAAR,CAAa1B,EAAb;AACAyB,IAAAA,OAAO,CAACC,GAAR,CAAa3B,EAAE,CAACW,EAAhB;AAEA,UAAMF,OAAO,GAAGR,EAAE,CAACS,IAAH,CAAQN,CAAC,IAAIA,CAAC,CAACO,EAAF,KAASX,EAAE,CAACW,EAAzB,CAAhB,CANoB,CAMyB;;AAC7C,QAAIE,GAAG,GAAGJ,OAAO,CAACI,GAAR,GAAa,CAAvB;AACA,UAAMC,KAAK,GAAGL,OAAO,CAACM,IAAtB;AACA;AACR;AACA;AACA;AACA;AACA;AACA;AACA;;AAEQ,QAAGF,GAAG,GAAE,CAAR,EAAW;AACXa,IAAAA,OAAO,CAACC,GAAR,CAAYlB,OAAO,CAACI,GAApB;AACA,UAAMI,OAAO,GAAGnB,EAAE,CAACc,KAAH,EAAhB;AACA,UAAM,CAACM,CAAD,EAAGC,CAAH,IAAQL,KAAK,CAACD,GAAD,CAAnB;AACA,UAAME,IAAI,GAAGE,OAAO,CAACC,CAAD,CAAP,CAAWC,CAAX,CAAb;AACA,UAAMC,OAAO,GAAE,EACX,GAAGL,IADQ;AAEXM,MAAAA,GAAG,EAAE;AAFM,KAAf;AAKAJ,IAAAA,OAAO,CAACC,CAAD,CAAP,CAAWC,CAAX,IAAgBC,OAAhB;AACArB,IAAAA,KAAK,CAACkB,OAAD,CAAL;AACA,QAAIK,SAAS,GAAGrB,EAAE,CAACsB,MAAH,CAAUnB,CAAC,IAAIA,CAAC,CAACO,EAAF,KAASX,EAAE,CAACW,EAA3B,CAAhB;AACAF,IAAAA,OAAO,CAACI,GAAR,GAAcA,GAAd;AACAS,IAAAA,SAAS,CAACE,IAAV,CAAef,OAAf;AACAP,IAAAA,KAAK,CAACoB,SAAD,CAAL;AAIH,GArCD;;AAuCA,sBACI;AAAK,IAAA,SAAS,EAAG,UAAjB;AAAA,4BACQ;AAAM,MAAA,QAAQ,EAAInB,SAAlB;AAAA,8BACI;AAAO,QAAA,EAAE,EAAC,QAAV;AAAmB,QAAA,IAAI,EAAC,MAAxB;AAA+B,QAAA,WAAW,EAAC;AAA3C;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADR,eAOQ;AAAM,MAAA,QAAQ,EAAIsB,QAAlB;AAAA,6BAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFJ;AAAA;AAAA;AAAA;AAAA,YAPR,eAYQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAZR;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAkBH;;KAnGQ7B,O;AAqGT,eAAeA,OAAf","sourcesContent":["import React from 'react'\n\nfunction StackOp(props) {\n    const {gr,setGr,ch,st,setSt} = props\n\n    const pushValue = (e) => {\n        e.preventDefault()\n        const value = document.getElementById(\"input1\").value\n\n        const myStruc = (st.find(e => e.id === ch.id)).slice() //my stack structure\n        let top =myStruc.top\n        const tiles = myStruc.tile\n\n        if(top>=tiles.length) return\n        //finds the top index to put push value //better than filtering this struc from all structures and pushing new struc withupdated top value\n        //for(let i =0;i<myStruc.length;i++){\n           // let [row,col] = myStruc[i]\n            //let a = ((gr[row][col]))\n            /*if(a.txt === \"\"){\n                top = i\n                break\n            }*/\n        //}\n\n        //if(top > -1){\n            const newGrid = gr.slice()\n            const [r,c] = tiles[top]\n            const tile = newGrid[r][c] \n            const newTile= {\n                ...tile,\n                txt:`${value}`\n\n                }\n            newGrid[r][c] = newTile\n            setGr(newGrid)\n            let updateStr = st.filter(e => e.id !== ch.id)\n            myStruc.top = top +1\n            updateStr.push(myStruc)\n            setSt(updateStr)\n        //}\n\n\n    } \n\n    const popValue = (e) => {\n        e.preventDefault()\n        \n        console.log( st)\n        console.log( ch.id)\n\n        const myStruc = st.find(e => e.id === ch.id) //array of coordinates\n        let top = myStruc.top -1\n        const tiles = myStruc.tile\n        /*for(let i =myStruc.length -1;i>=0;i--){\n            let [row,col] = myStruc[i]\n            let a = ((gr[row][col]))\n            if(!(a.txt === \"\")){\n                top = i\n                break\n            }\n        }*/\n\n        if(top <0) return\n        console.log(myStruc.top)\n        const newGrid = gr.slice()\n        const [r,c] = tiles[top]\n        const tile = newGrid[r][c] \n        const newTile= {\n            ...tile,\n            txt:``\n\n            }\n        newGrid[r][c] = newTile\n        setGr(newGrid)\n        let updateStr = st.filter(e => e.id === ch.id)\n        myStruc.top = top\n        updateStr.push(myStruc)\n        setSt(updateStr)\n        \n\n\n    }\n\n    return (\n        <div className = \"controls\" >\n                <form onSubmit = {pushValue}>\n                    <input id=\"input1\" type=\"text\" placeholder=\"value\" />\n                    <button>Push</button>\n\n                </form>\n\n                <form onSubmit = {popValue} >\n             \n                    <button>Pop</button>\n\n                </form>\n                <div>\n                    see items\n                </div>\n        </div> \n    )\n}\n\nexport default StackOp\n"]},"metadata":{},"sourceType":"module"}