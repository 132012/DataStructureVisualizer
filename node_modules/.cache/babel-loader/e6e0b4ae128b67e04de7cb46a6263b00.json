{"ast":null,"code":"var _jsxFileName = \"/Users/juvenal/Desktop/projects/StructureVisualizer/structure-vis/src/DataStructureVisualizer/StrucFuncs/GraphOp.js\";\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction GraphOp(props) {\n  const {\n    gr,\n    setGr,\n    ch,\n    st,\n    type,\n    setSt,\n    setOp\n  } = props;\n  let line;\n\n  const addVertex = e => {\n    e.preventDefault();\n    setOp(\"Graph\");\n    let id = e.target.id; //tile id\n\n    let coor = id.split(',');\n    let tile = gr[coor[0]][coor];\n    const fullStruc = st.find(e => e.id === ch.id); //[id,type,[coor]]\n\n    let myStruc = fullStruc.tile; //array of coordinates\n\n    let [r, c] = myStruc[0];\n    const newGrid = gr.slice();\n    const aTile = newGrid[newR][newC]; //child\n\n    if (typeof aTile == \"undefined\" || !(aTile.strType === \"\")) return; //tile is already being used\n\n    const newTile = { ...aTile,\n      txt: `${value}`,\n      strType: type.TREE,\n      strId: fullStruc.id,\n      myKey: g.myKey + \"\" + newC //for unique keys\n\n    };\n    newGrid[newR][newC] = newTile;\n    setGr(newGrid);\n    const newSt = st.filter(e => !(e.id === fullStruc.id)).slice(); //list of data structures without tree\n\n    myStruc[i] = [newR, newC];\n    newSt.push({\n      id: ch.id,\n      type: \"tree\",\n      tile: myStruc\n    });\n    setSt(newSt);\n    console.log(st);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"controls\",\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: addVertex,\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Add Vertex\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: addVertex,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"input1\",\n        type: \"number\",\n        placeholder: \"from\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"input2\",\n        type: \"number\",\n        placeholder: \"to\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"input3\",\n        type: \"number\",\n        placeholder: \"weight\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Add Edge\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 9\n  }, this);\n}\n\n_c = GraphOp;\nexport default GraphOp;\n\nvar _c;\n\n$RefreshReg$(_c, \"GraphOp\");","map":{"version":3,"sources":["/Users/juvenal/Desktop/projects/StructureVisualizer/structure-vis/src/DataStructureVisualizer/StrucFuncs/GraphOp.js"],"names":["React","GraphOp","props","gr","setGr","ch","st","type","setSt","setOp","line","addVertex","e","preventDefault","id","target","coor","split","tile","fullStruc","find","myStruc","r","c","newGrid","slice","aTile","newR","newC","strType","newTile","txt","value","TREE","strId","myKey","g","newSt","filter","i","push","console","log"],"mappings":"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","sourcesContent":["import React from 'react'\n\nfunction GraphOp(props) {\n    const {gr,setGr,ch,st,type,setSt,setOp} = props\n\n    let line\n    const addVertex = (e) => {\n        e.preventDefault()\n        setOp(\"Graph\")\n\n        let id = e.target.id //tile id\n        let coor = id.split(',')\n        let tile = gr[coor[0]][coor]\n\n\n        const fullStruc = (st.find(e => e.id === ch.id)) //[id,type,[coor]]\n        let myStruc = fullStruc.tile //array of coordinates\n        let [r,c] = myStruc[0]\n        const newGrid = gr.slice()\n        \n        \n        const aTile = newGrid[newR][newC]//child\n        if(typeof(aTile) == \"undefined\" || !(aTile.strType === \"\")) return //tile is already being used\n        const newTile= {\n            ...aTile,\n            txt:`${value}`,\n            strType: type.TREE,\n            strId:fullStruc.id,\n            myKey: g.myKey +\"\"+newC //for unique keys\n            }\n        newGrid[newR][newC] = newTile\n        setGr(newGrid)\n        const newSt = st.filter(e => !(e.id ===fullStruc.id)).slice()//list of data structures without tree\n        myStruc[i]=[newR,newC]\n        newSt.push({id:ch.id,type:\"tree\",tile:myStruc})\n        setSt(newSt)\n        console.log(st)\n    }\n\n    return (\n        <div className = \"controls\" >\n                <form onSubmit = {addVertex}>\n                    <button>Add Vertex</button>\n\n                </form>\n\n                <form onSubmit = {addVertex}>\n                    <input id=\"input1\" type=\"number\" placeholder=\"from\" />\n                    <input id=\"input2\" type=\"number\" placeholder=\"to\" />\n                    <input id=\"input3\" type=\"number\" placeholder=\"weight\" />\n                    <button>Add Edge</button>\n\n                </form>\n            </div>\n    )\n}\n\nexport default GraphOp\n"]},"metadata":{},"sourceType":"module"}