{"ast":null,"code":"var _jsxFileName = \"/Users/juvenal/Desktop/projects/StructureVisualizer/structure-vis/src/DataStructureVisualizer/StrucFuncs/GraphOp.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst PriorityQueue = require('priorityqueuejs');\n\nfunction GraphOp(props) {\n  _s();\n\n  const {\n    gr,\n    setGr,\n    ch,\n    st,\n    type,\n    setSt,\n    setOp,\n    op\n  } = props;\n  const [message, setMessage] = useState(\" \");\n\n  const addVertex = e => {\n    e.preventDefault();\n\n    if (op === \"Vertex\") {\n      setOp(\"\");\n      document.getElementById(\"vertexbutton\").style.backgroundColor = `white`;\n    } else {\n      console.log(\"we in here\");\n      setOp(\"Vertex\");\n      document.getElementById(\"vertexbutton\").style.backgroundColor = `grey`;\n    }\n  };\n\n  const addEdge = e => {\n    e.preventDefault();\n    let from = document.getElementById(\"input1\").value;\n    let to = document.getElementById(\"input2\").value;\n    let weight = document.getElementById(\"input3\").value;\n    let dir = document.getElementById(\"directed\").checked;\n    let fromInt = parseInt(from, 10);\n    let toInt = parseInt(to, 10);\n    if (from === to) return; // still need to do when self loop\n\n    console.log(weight + \"   \" + typeof weight);\n    const myStruc = st.find(e => e.id === ch.id); //my graph structure\n\n    const edges = myStruc.edges;\n    const coor = myStruc.tile;\n    from = coor[from];\n    to = coor[to];\n    if (!from || !to) return; //if faulty info is given\n\n    from = from.join();\n    to = to.join(); //edges.push([from,to,weight,dir])\n\n    console.log(edges);\n    console.log(fromInt + \"  \" + toInt);\n    edges[fromInt][toInt] = [from, to, weight, dir, fromInt, toInt];\n    if (dir === false) edges[toInt][fromInt] = [to, from, weight, dir, toInt, fromInt];\n    const newSt = st.filter(e => e.id !== ch.id).slice(); //copy list of data structures without my graph\n\n    const myNewSt = { ...myStruc,\n      edges: edges\n    };\n    newSt.push(myNewSt);\n    setSt(newSt);\n  };\n\n  const dijkstra = async e => {\n    e.preventDefault();\n    let start = document.getElementById(\"str\").value;\n    start = parseInt(start, 10);\n    let end = document.getElementById(\"end\").value;\n    end = parseInt(end, 10);\n    if (start === end) return;\n    console.log(end);\n    let distances = {};\n    let prev = {};\n    var queue = new PriorityQueue((a, b) => {\n      return b.cost - a.cost;\n    });\n    const myStrucAll = st.find(e => e.id === ch.id);\n    const edges = myStrucAll.edges.slice();\n    distances[start] = 0; //if(!edges[start]) return //if initial node has no neighbors\n\n    queue.enq({\n      tile: start,\n      cost: 0\n    });\n    const myStruc = myStrucAll.tile;\n    const visited = [];\n\n    for (let i = 0; i < edges.length; i++) {\n      if (i !== start) distances[i] = Infinity;\n      prev[i] = null;\n    }\n\n    let til1, til2, neighbor;\n\n    while (!queue.isEmpty()) {\n      let min = queue.deq();\n      visited.push(min.tile);\n      let currTile = min.tile;\n      console.log(\"here too\");\n      til1 = document.getElementById(myStruc[currTile].join());\n      til1.classList.add(\"look\");\n\n      for (let i = 0; i < edges[currTile].length; i++) {\n        console.log(currTile + \"    \" + i + \"     \" + typeof edges[currTile][i]);\n\n        if (typeof edges[currTile][i] === \"undefined\" || i === currTile) {\n          continue;\n        }\n\n        neighbor = edges[currTile][i];\n        let alt = distances[currTile] + parseInt(neighbor[2], 10);\n        let n = neighbor[5];\n        til2 = document.getElementById(myStruc[n].join());\n        til2.classList.add(\"look-1\");\n        await new Promise(r => setTimeout(r, 300));\n        til2.classList.remove(\"look-1\");\n\n        if (alt < distances[n]) {\n          distances[n] = alt;\n          prev[n] = currTile;\n\n          if (edges[n]) {\n            //if tile has neighbors\n            if (!visited.includes(n) && n !== end) queue.enq({\n              tile: n,\n              cost: distances[n]\n            });\n            console.log(queue);\n          }\n        }\n      }\n\n      til1.classList.remove(\"look\");\n    }\n\n    let path = [end];\n    console.log(end);\n\n    do {\n      if (prev[end] === null) {\n        setMessage(\"No Path Found\");\n        return;\n      }\n\n      end = prev[end];\n      path.push(end);\n      await new Promise(r => setTimeout(r, 300));\n      console.log();\n      console.log(prev); //fix\n    } while (end !== start); //if(end !==start) return\n\n\n    let til3;\n\n    for (let j = 0; j < 3; j++) {\n      for (let i = path.length - 1; i >= 0; i--) {\n        til3 = document.getElementById(myStruc[path[i]].join());\n        til3.classList.add(\"look-2\");\n        await new Promise(r => setTimeout(r, 500));\n        til3.classList.remove(\"look-2\");\n      }\n\n      await new Promise(r => setTimeout(r, 1500));\n    } //console.log(distances)\n\n\n    console.log(prev); //light up answers 3 times\n  };\n\n  const randomGraph = async e => {\n    await setOp(\"Vertex\");\n    let clicks, row, col; //generate vertices\n\n    for (let i = 0; i < 6; i++) {\n      row = Math.floor(Math.random() * 17);\n      col = Math.floor(Math.random() * 39);\n\n      if (gr[row][col].strId !== 0) {\n        i--;\n        continue;\n      }\n\n      clicks = document.getElementById(row + \",\" + col);\n      clicks.click();\n    }\n\n    setOp(\"\"); //generate edges\n\n    let from, to, weight;\n    let myStruc = st.find(e => e.id === ch.id);\n    let numVertices = myStruc.tile;\n    let myEdges = myStruc.edges.slice();\n    let len = numVertices.length;\n\n    for (let i = 0; i < 7; i++) {\n      from = Math.floor(Math.random() * len);\n      to = Math.floor(Math.random() * len);\n      weight = Math.floor(Math.random() * 10);\n\n      if (from === to) {\n        --i;\n        continue;\n      }\n\n      randomEdges(from, to, weight, false, myEdges, numVertices);\n    }\n\n    const newSt = st.filter(e => e.id !== ch.id).slice(); //copy list of data structures without my graph\n\n    const myNewSt = { ...myStruc,\n      edges: myEdges\n    };\n    newSt.push(myNewSt);\n    setSt(newSt);\n    console.log();\n  };\n\n  const randomEdges = (from1, to1, weight1, dir1, edges1, coor) => {\n    let from = from1;\n    let to = to1;\n    let weight = weight1;\n    let dir = dir1;\n    let fromInt = parseInt(from, 10);\n    let toInt = parseInt(to, 10);\n    console.log(weight + \"   \" + typeof weight);\n    from = coor[from];\n    from = from.join();\n    to = coor[to];\n    to = to.join();\n    edges1[fromInt][toInt] = [from, to, weight, dir, fromInt, toInt];\n    if (dir === false) edges1[toInt][fromInt] = [to, from, weight, dir, toInt, fromInt];\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"controls\",\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: addVertex,\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"vertexbutton\",\n        children: \"Add Vertex\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 230,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: addEdge,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"input1\",\n        type: \"number\",\n        placeholder: \"from\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"input2\",\n        type: \"number\",\n        placeholder: \"to\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"input3\",\n        type: \"number\",\n        placeholder: \"weight\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"directed\",\n        type: \"checkbox\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: \" Directed\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Add Edge\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 235,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: dijkstra,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"str\",\n        type: \"number\",\n        placeholder: \"from\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"end\",\n        type: \"number\",\n        placeholder: \"to\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Dijkstra\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 249,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 245,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: randomGraph,\n      children: \"Generate Graph\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 251,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 229,\n    columnNumber: 9\n  }, this);\n}\n\n_s(GraphOp, \"w+itZlIjg6tgw37+oIw5JAXCsbY=\");\n\n_c = GraphOp;\nexport default GraphOp;\n\nvar _c;\n\n$RefreshReg$(_c, \"GraphOp\");","map":{"version":3,"sources":["/Users/juvenal/Desktop/projects/StructureVisualizer/structure-vis/src/DataStructureVisualizer/StrucFuncs/GraphOp.js"],"names":["React","useState","PriorityQueue","require","GraphOp","props","gr","setGr","ch","st","type","setSt","setOp","op","message","setMessage","addVertex","e","preventDefault","document","getElementById","style","backgroundColor","console","log","addEdge","from","value","to","weight","dir","checked","fromInt","parseInt","toInt","myStruc","find","id","edges","coor","tile","join","newSt","filter","slice","myNewSt","push","dijkstra","start","end","distances","prev","queue","a","b","cost","myStrucAll","enq","visited","i","length","Infinity","til1","til2","neighbor","isEmpty","min","deq","currTile","classList","add","alt","n","Promise","r","setTimeout","remove","includes","path","til3","j","randomGraph","clicks","row","col","Math","floor","random","strId","click","numVertices","myEdges","len","randomEdges","from1","to1","weight1","dir1","edges1"],"mappings":"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","sourcesContent":["import React,{useState} from 'react'\nconst PriorityQueue = require('priorityqueuejs');\n\n\nfunction GraphOp(props) {\n    const {gr,setGr,ch,st,type,setSt,setOp,op} = props\n    const [message,setMessage] = useState(\" \")\n\n    const addVertex = (e) => {\n        e.preventDefault()\n        if(op ===\"Vertex\"){\n            setOp(\"\")\n            document.getElementById(\"vertexbutton\").style.backgroundColor = `white`\n\n        }\n        else{\n            console.log(\"we in here\")\n            setOp(\"Vertex\")\n            document.getElementById(\"vertexbutton\").style.backgroundColor = `grey`\n\n\n        }\n        \n    }\n\n    const addEdge = (e) => {\n        e.preventDefault()\n        let from = document.getElementById(\"input1\").value\n        let to = document.getElementById(\"input2\").value\n        let weight = document.getElementById(\"input3\").value\n        let dir = document.getElementById(\"directed\").checked\n        let fromInt= parseInt(from,10)\n        let toInt= parseInt(to,10)\n\n        if(from === to) return  // still need to do when self loop\n        console.log(weight+\"   \"+typeof(weight))\n        const myStruc = (st.find(e => e.id === ch.id)) //my graph structure\n        const edges  = myStruc.edges\n        const coor = myStruc.tile  \n        from = coor[from]\n        to = coor[to]\n        if(!from || !to )\n            return //if faulty info is given\n        from = from.join()\n\n        to = to.join()\n        //edges.push([from,to,weight,dir])\n        console.log(edges)\n        console.log(fromInt+\"  \"+toInt)\n        edges[fromInt][toInt] = [from,to,weight,dir,fromInt,toInt]\n        if(dir ===false)\n            edges[toInt][fromInt] = [to,from,weight,dir,toInt,fromInt]\n\n        const newSt = st.filter((e => e.id !== ch.id)).slice() //copy list of data structures without my graph\n        const myNewSt = {...myStruc,edges:edges}\n        newSt.push(myNewSt)\n        setSt(newSt)\n\n\n    } \n    \n    const dijkstra = async(e) => {\n        e.preventDefault()\n\n        \n        let start = document.getElementById(\"str\").value\n        start= parseInt(start,10)\n        let end = document.getElementById(\"end\").value\n        end= parseInt(end,10)\n        if(start === end) return\n        console.log(end)\n        let distances = {}\n\n        let prev  ={}\n        var queue = new PriorityQueue((a, b)=> {\n            return b.cost - a.cost;\n          });\n        \n        const myStrucAll =  (st.find(e => e.id === ch.id))\n        const edges = myStrucAll.edges.slice()\n\n        distances[start] = 0\n        //if(!edges[start]) return //if initial node has no neighbors\n        queue.enq({tile:start,cost:0})\n\n\n        const myStruc = myStrucAll.tile\n        const visited = []\n        for(let i =0;i<edges.length;i++){\n            if(i !== start) distances[i] = Infinity\n            prev[i] = null\n        }\n        let til1,til2,neighbor\n        while(!queue.isEmpty()){\n            let min = queue.deq()\n            visited.push(min.tile)\n            let currTile = min.tile\n            console.log(\"here too\")\n            til1 = document.getElementById(myStruc[currTile].join())\n            til1.classList.add(\"look\")\n            for(let i =0;i<edges[currTile].length;i++){\n                console.log(currTile+\"    \"+i+\"     \"+typeof(edges[currTile][i]))\n\n                if(typeof(edges[currTile][i]) === \"undefined\" || i === currTile ){\n                    continue}\n                neighbor = edges[currTile][i]\n                let alt = distances[currTile] + parseInt(neighbor[2],10)\n                let n = neighbor[5]\n                til2 = document.getElementById(myStruc[n].join())\n                til2.classList.add(\"look-1\")\n                await new Promise(r => setTimeout(r, 300))\n                til2.classList.remove(\"look-1\")\n                if(alt < distances[n]){\n                    distances[n] = alt\n                    prev[n] = currTile\n                    if(edges[n]){ //if tile has neighbors\n                        if(!visited.includes(n) && n!== end)\n                           \n                            queue.enq({tile:n, cost:distances[n]})\n                            console.log(queue)\n                    }\n                }\n            }\n            \n            til1.classList.remove(\"look\")\n\n\n        }\n        let path = [end]\n        console.log(end)\n       do{\n        if(prev[end] === null){\n            setMessage(\"No Path Found\")\n            return\n            }\n            end = prev[end]\n            path.push(end)\n            await new Promise(r => setTimeout(r, 300))\n\n            console.log()\n            console.log(prev) //fix\n        }while(end !== start)\n        //if(end !==start) return\n        let til3\n        for(let j =0;j<3;j++){\n            for(let i =path.length-1;i>= 0;i--){\n                til3 = document.getElementById(myStruc[path[i]].join())\n                til3.classList.add(\"look-2\")\n                await new Promise(r => setTimeout(r, 500))\n                til3.classList.remove(\"look-2\")\n            }\n            await new Promise(r => setTimeout(r, 1500))\n\n        }\n\n        //console.log(distances)\n        console.log(prev)\n        //light up answers 3 times\n    }\n\n    const randomGraph = async (e)=> {\n        await setOp(\"Vertex\")\n\n\n        let clicks,row,col\n        \n        //generate vertices\n        for(let i =0;i<6;i++){\n            row = Math.floor(Math.random() * 17)\n            col = Math.floor(Math.random() * 39)\n            if(gr[row][col].strId !== 0){\n                i--\n                continue\n            }\n            clicks = document.getElementById(row+\",\"+col)\n            clicks.click()\n\n        }\n        setOp(\"\")\n\n        //generate edges\n\n        let from, to,weight\n        let myStruc = (st.find(e => e.id === ch.id))\n        let numVertices = myStruc.tile\n        let myEdges = myStruc.edges.slice()\n        let len = numVertices.length\n        for(let i = 0 ; i <7; i++){\n            from = Math.floor(Math.random() * len)\n            to = Math.floor(Math.random() * len)\n            weight = Math.floor(Math.random() * 10)\n            if(from === to){\n                --i\n                continue\n            }\n            randomEdges(from,to,weight,false,myEdges,numVertices)\n        }\n        const newSt = st.filter((e => e.id !== ch.id)).slice() //copy list of data structures without my graph\n        const myNewSt = {...myStruc,edges:myEdges}\n        newSt.push(myNewSt)\n        setSt(newSt)\n        console.log()\n\n\n    }\n\n    const randomEdges = (from1, to1, weight1,dir1,edges1,coor) => {\n        let from = from1\n        let to = to1\n        let weight = weight1\n        let dir = dir1\n        let fromInt= parseInt(from,10)\n        let toInt= parseInt(to,10)\n\n        console.log(weight+\"   \"+typeof(weight))\n        from = coor[from]\n        from = from.join()\n        to = coor[to]\n        to = to.join()\n        \n        edges1[fromInt][toInt] = [from,to,weight,dir,fromInt,toInt]\n        if(dir ===false)\n            edges1[toInt][fromInt] = [to,from,weight,dir,toInt,fromInt]\n\n\n    } \n\n    return (\n        <div className = \"controls\" >\n                <form onSubmit = {addVertex}>\n                    <button id =\"vertexbutton\">Add Vertex</button>\n\n                </form>\n\n                <form onSubmit = {addEdge}>\n                    <input id=\"input1\" type=\"number\" placeholder=\"from\" />\n                    <input id=\"input2\" type=\"number\" placeholder=\"to\" />\n                    <input id=\"input3\" type=\"number\" placeholder=\"weight\" />\n                    <input id=\"directed\" type=\"checkbox\" />\n                    <label > Directed</label>\n  \n                    <button>Add Edge</button>\n\n                </form>\n                <form onSubmit = {dijkstra}>\n                    <input id=\"str\" type=\"number\" placeholder=\"from\" />\n                    <input id=\"end\" type=\"number\" placeholder=\"to\"/>\n                    <button >Dijkstra</button>\n                    <p>{message}</p>\n                </form>\n                <button onClick = {randomGraph}>Generate Graph</button>\n                \n            </div>\n    )\n}\n\nexport default GraphOp\n"]},"metadata":{},"sourceType":"module"}