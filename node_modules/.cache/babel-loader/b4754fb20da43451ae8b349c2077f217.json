{"ast":null,"code":"var _jsxFileName = \"/Users/juvenal/Desktop/projects/StructureVisualizer/structure-vis/src/DataStructureVisualizer/Tile.js\";\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Tile(props) {\n  const {\n    col,\n    row,\n    sType,\n    sId,\n    st,\n    setCurStruc,\n    pr,\n    setPr,\n    gr,\n    setGr,\n    isP,\n    op,\n    setOp\n  } = props; //console.log(col +\" \"+ row+\" \"+sType+ \" \"+sId)\n\n  const stackGrid = size => {\n    if (row - size >= -1) {\n      const newGrid = gr.slice();\n      let tile, newTile;\n\n      for (let i = 0; i < size; i++) {\n        tile = newGrid[row - i][col];\n        newTile = { ...tile,\n          isPicked: !isP\n        };\n        newGrid[row - i][col] = newTile;\n      }\n\n      setGr(newGrid);\n    }\n  };\n\n  const arrayGrid = size => {\n    if (col + size <= 45) {\n      const newGrid = gr.slice();\n      let tile, newTile;\n\n      for (let i = 0; i < size; i++) {\n        tile = newGrid[row][col + i];\n        newTile = { ...tile,\n          isPicked: !isP\n        };\n        newGrid[row][col + i] = newTile;\n      }\n\n      setGr(newGrid);\n    }\n  };\n\n  const queueGrid = size => {\n    if (col - size >= -1) {\n      const newGrid = gr.slice();\n      let tile, newTile;\n\n      for (let i = 0; i < size; i++) {\n        tile = newGrid[row][col - i];\n        newTile = { ...tile,\n          isPicked: !isP\n        };\n        newGrid[row][col - i] = newTile;\n      }\n\n      setGr(newGrid);\n    }\n  };\n\n  const mapGrid = size => {\n    console.log(\"yes\");\n\n    if (col + 2 <= 44 && row + size <= 20) {\n      console.log(\"no\");\n      const newGrid = gr.slice();\n      let tile, newTile;\n\n      for (let i = 0; i < 3; i++) {\n        for (let j = 0; j < size; j++) {\n          tile = newGrid[row + j][col + i];\n          newTile = { ...tile,\n            isPicked: !isP\n          };\n          newGrid[row + j][col + i] = newTile;\n        }\n      }\n\n      setGr(newGrid);\n    }\n  };\n  /*\n      const mouseDown = (aRow,aCol) => {\n          const newAr = ch.slice()\n          newAr.push({aRow,aCol})\n          setCh(newAr)\n  \n          const newGrid = updateGrid(gr,row,col)\n          setGr(newGrid)\n  \n          setPr(true)\n      }\n      \n      const mouseLift = () => {\n          setPr(false)\n          setCh([])\n          let ans= prompt(\"Size:\")\n          console.log(ans +\"\")\n      }\n      \n      const mouseEnter =(aRow,aCol)=> {\n  \n          if(!pr) return \n          const newAr = ch.slice()\n          newAr.push({aRow,aCol})\n          setCh(newAr)\n  \n          const newGrid = updateGrid(gr,row,col)\n          setGr(newGrid)\n      }\n  \n      */\n\n\n  const click = () => {\n    let size = parseInt(prompt(\"Size:\"), 10);\n    if (op === \"Array\") arrayGrid(size);else if (op === \"Stack\") stackGrid(size);else if (op === \"Queue\") queueGrid(size);else if (op === \"HashMap\") mapGrid(size);else if (op === \"Tree\") console.log(\"nothing yet\");else if (op === \"Graph\") console.log(\"nothing yet\");\n  };\n\n  let extra = isP ? 'bground' : '';\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `myTile ${extra}`,\n    onClick: () => click()\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 136,\n    columnNumber: 9\n  }, this);\n}\n\n_c = Tile;\nexport default Tile;\n\nvar _c;\n\n$RefreshReg$(_c, \"Tile\");","map":{"version":3,"sources":["/Users/juvenal/Desktop/projects/StructureVisualizer/structure-vis/src/DataStructureVisualizer/Tile.js"],"names":["React","Tile","props","col","row","sType","sId","st","setCurStruc","pr","setPr","gr","setGr","isP","op","setOp","stackGrid","size","newGrid","slice","tile","newTile","i","isPicked","arrayGrid","queueGrid","mapGrid","console","log","j","click","parseInt","prompt","extra"],"mappings":"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","sourcesContent":["import React from 'react'\n\nfunction Tile(props) {\n    const {col,row,sType,sId,st,setCurStruc,pr,setPr,gr,setGr,isP,op,setOp} = props\n    //console.log(col +\" \"+ row+\" \"+sType+ \" \"+sId)\n\n\n    const stackGrid = ( size) => {\n        if((row -size) >= -1){\n\n        const newGrid = gr.slice();\n        let tile,newTile;\n        for(let i =0;i<size;i++){\n            tile = newGrid[row-i][col];\n            newTile= {\n              ...tile,\n              isPicked: !isP,\n            };\n\n            newGrid[row-i][col] = newTile;\n        }\n         setGr(newGrid)\n        }\n      }\n      \n    const arrayGrid = (size) =>{\n        if((col +size) <= 45){\n\n            const newGrid = gr.slice();\n            let tile, newTile;\n            for(let i =0;i<size;i++){\n                tile = newGrid[row][col+i];\n                newTile= {\n                ...tile,\n                isPicked: !isP,\n                };\n\n                newGrid[row][col+i] = newTile;\n            }\n            setGr(newGrid)\n        }\n\n    }\n\n    const queueGrid = (size) => {\n        if((col -size) >= -1){\n\n            const newGrid = gr.slice();\n            let tile, newTile;\n            for(let i =0;i<size;i++){\n                tile = newGrid[row][col-i];\n                newTile= {\n                ...tile,\n                isPicked: !isP,\n                };\n\n                newGrid[row][col-i] = newTile;\n            }\n            setGr(newGrid)\n        }\n    }\n    const mapGrid = (size) => {\n        console.log(\"yes\")\n        if((col +2) <= 44  && (row +size) <= 20){\n            console.log(\"no\")\n            const newGrid = gr.slice();\n            let tile, newTile;\n            for(let i = 0; i<3;i++){\n                for(let j = 0;j<size; j++){\n                    tile = newGrid[row+j][col+i];\n                newTile= {\n                ...tile,\n                isPicked: !isP,\n                };\n\n                newGrid[row+j][col+i] = newTile;\n                }\n            }\n            setGr(newGrid)\n\n        }\n    }\n\n\n/*\n    const mouseDown = (aRow,aCol) => {\n        const newAr = ch.slice()\n        newAr.push({aRow,aCol})\n        setCh(newAr)\n\n        const newGrid = updateGrid(gr,row,col)\n        setGr(newGrid)\n\n        setPr(true)\n    }\n    \n    const mouseLift = () => {\n        setPr(false)\n        setCh([])\n        let ans= prompt(\"Size:\")\n        console.log(ans +\"\")\n    }\n    \n    const mouseEnter =(aRow,aCol)=> {\n\n        if(!pr) return \n        const newAr = ch.slice()\n        newAr.push({aRow,aCol})\n        setCh(newAr)\n\n        const newGrid = updateGrid(gr,row,col)\n        setGr(newGrid)\n    }\n\n    */\n    \n    const click =() =>{\n        let size= parseInt(prompt(\"Size:\"),10)\n        if(op === \"Array\")\n            arrayGrid(size)\n        else if(op === \"Stack\")\n            stackGrid(size)\n        else if(op === \"Queue\")\n            queueGrid(size)\n        else if(op === \"HashMap\")\n            mapGrid(size)\n        else if(op === \"Tree\")\n            console.log(\"nothing yet\")\n        else if(op === \"Graph\")\n            console.log(\"nothing yet\")\n\n    }\n    \n    let extra = isP ? 'bground' : ''\n    return (\n        <div className = {`myTile ${extra}`} \n            onClick = {() => click()} >\n        \n        </div>\n    )\n}\n\nexport default Tile\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}