{"ast":null,"code":"var _jsxFileName = \"/Users/juvenal/Desktop/projects/StructureVisualizer/structure-vis/src/DataStructureVisualizer/Tile.js\";\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Tile(props) {\n  let {\n    col,\n    row,\n    sType,\n    sId,\n    ch,\n    setCh,\n    pr,\n    setPr,\n    gr,\n    setGr,\n    isP\n  } = props; //console.log(col +\" \"+ row+\" \"+sType+ \" \"+sId)\n\n  /*const updateGrid = (grid, row, col) => {\n      const newGrid = grid.slice();\n      const tile = newGrid[row][col];\n      const newTile= {\n        ...tile,\n        isPicked: !isP,\n      };\n      newGrid[row][col] = newTile;\n      return newGrid;\n    };\n   const mouseDown = (aRow,aCol) => {\n      const newAr = ch.slice()\n      newAr.push({aRow,aCol})\n      setCh(newAr)\n       const newGrid = updateGrid(gr,row,col)\n      setGr(newGrid)\n       setPr(true)\n  }\n  \n  const mouseLift = () => {\n      setPr(false)\n      setCh([])\n      let ans= prompt(\"Size:\")\n      console.log(ans +\"\")\n  }\n  \n  const mouseEnter =(aRow,aCol)=> {\n       if(!pr) return \n      const newAr = ch.slice()\n      newAr.push({aRow,aCol})\n      setCh(newAr)\n       const newGrid = updateGrid(gr,row,col)\n      setGr(newGrid)\n  }\n   */\n  //let extra = isP ? 'bground' : ''\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `myTile `\n    /*onMouseDown = {() => mouseDown(row,col)}\n    onMouseUp = {() => mouseLift()}\n    onMouseEnter = { () => mouseEnter(row,col) }>\n    */\n\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 9\n  }, this);\n}\n\n_c = Tile;\nexport default Tile;\n\nvar _c;\n\n$RefreshReg$(_c, \"Tile\");","map":{"version":3,"sources":["/Users/juvenal/Desktop/projects/StructureVisualizer/structure-vis/src/DataStructureVisualizer/Tile.js"],"names":["React","Tile","props","col","row","sType","sId","ch","setCh","pr","setPr","gr","setGr","isP"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;;;AAEA,SAASC,IAAT,CAAcC,KAAd,EAAqB;AACjB,MAAI;AAACC,IAAAA,GAAD;AAAKC,IAAAA,GAAL;AAASC,IAAAA,KAAT;AAAeC,IAAAA,GAAf;AAAmBC,IAAAA,EAAnB;AAAsBC,IAAAA,KAAtB;AAA4BC,IAAAA,EAA5B;AAA+BC,IAAAA,KAA/B;AAAqCC,IAAAA,EAArC;AAAwCC,IAAAA,KAAxC;AAA8CC,IAAAA;AAA9C,MAAqDX,KAAzD,CADiB,CAEjB;;AAGA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AASI;;AACA,sBACI;AAAK,IAAA,SAAS,EAAK;AACd;AACb;AACA;AACA;;AAJQ;AAAA;AAAA;AAAA;AAAA,UADJ;AASH;;KA1DQD,I;AA4DT,eAAeA,IAAf","sourcesContent":["import React from 'react'\n\nfunction Tile(props) {\n    let {col,row,sType,sId,ch,setCh,pr,setPr,gr,setGr,isP} = props\n    //console.log(col +\" \"+ row+\" \"+sType+ \" \"+sId)\n\n\n    /*const updateGrid = (grid, row, col) => {\n        const newGrid = grid.slice();\n        const tile = newGrid[row][col];\n        const newTile= {\n          ...tile,\n          isPicked: !isP,\n        };\n        newGrid[row][col] = newTile;\n        return newGrid;\n      };\n\n    const mouseDown = (aRow,aCol) => {\n        const newAr = ch.slice()\n        newAr.push({aRow,aCol})\n        setCh(newAr)\n\n        const newGrid = updateGrid(gr,row,col)\n        setGr(newGrid)\n\n        setPr(true)\n    }\n    \n    const mouseLift = () => {\n        setPr(false)\n        setCh([])\n        let ans= prompt(\"Size:\")\n        console.log(ans +\"\")\n    }\n    \n    const mouseEnter =(aRow,aCol)=> {\n\n        if(!pr) return \n        const newAr = ch.slice()\n        newAr.push({aRow,aCol})\n        setCh(newAr)\n\n        const newGrid = updateGrid(gr,row,col)\n        setGr(newGrid)\n    }\n\n    */\n   \n    \n    //let extra = isP ? 'bground' : ''\n    return (\n        <div className = {`myTile `} \n             /*onMouseDown = {() => mouseDown(row,col)}\n             onMouseUp = {() => mouseLift()}\n             onMouseEnter = { () => mouseEnter(row,col) }>\n             */>\n        \n        </div>\n    )\n}\n\nexport default Tile\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}