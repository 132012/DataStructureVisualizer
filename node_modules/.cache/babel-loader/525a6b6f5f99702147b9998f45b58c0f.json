{"ast":null,"code":"var _jsxFileName = \"/Users/juvenal/Desktop/projects/StructureVisualizer/structure-vis/src/DataStructureVisualizer/Tile.js\";\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Tile(props) {\n  const {\n    col,\n    row,\n    sType,\n    sId,\n    st,\n    setSt,\n    ch,\n    setCh,\n    gr,\n    setGr,\n    isP,\n    op,\n    setOp,\n    type,\n    count,\n    setCount,\n    txt,\n    aKey\n  } = props;\n\n  const stackGrid = size => {\n    if (row - size >= -1) {\n      //const newGrid = gr.slice();\n      cons;\n      let tile,\n          newTile,\n          arow,\n          coor = [];\n\n      for (let i = 0; i < size; i++) {\n        arow = row - i;\n        tile = newGrid[arow][col];\n        if (tile.strId !== 0) return;\n        newTile = { ...tile,\n          isPicked: !isP,\n          strType: type.STACK,\n          strId: count\n        };\n        newGrid[arow][col] = newTile;\n        coor.push([arow, col]);\n      }\n\n      console.log(\"WHAAAAAAT\");\n      console.log(st);\n      setGr(newGrid);\n      let newCount = count + 1;\n      setCount(newCount);\n      const newSt = st.slice(); //copy list of data structues\n\n      let top = 0;\n      newSt.push({\n        id: count,\n        type: \"stack\",\n        tile: coor,\n        top: top\n      });\n      setSt(newSt);\n      setOp(\"\");\n    }\n  };\n\n  const arrayGrid = size => {\n    //setOp(\"\")\n    if (col + size <= 39) {\n      const newGrid = gr.slice();\n      let tile,\n          newTile,\n          acol,\n          coor = [];\n\n      for (let i = 0; i < size; i++) {\n        tile = newGrid[row][col + i];\n        if (tile.strId !== 0) return;\n        newTile = { ...tile,\n          isPicked: !isP,\n          strType: type.ARRAY,\n          strId: count\n        };\n        newGrid[row][col + i] = newTile;\n        acol = col + i;\n        coor.push([row, acol]);\n      }\n\n      setGr(newGrid);\n      let newCount = count + 1;\n      setCount(newCount);\n      const newSt = st.slice(); //copy list of data structues\n\n      newSt.push({\n        id: count,\n        type: \"array\",\n        tile: coor\n      });\n      setSt(newSt);\n      console.log(st);\n      setOp(\"\");\n    }\n  };\n\n  const queueGrid = size => {\n    if (col - size >= -1) {\n      const newGrid = gr.slice();\n      let tile,\n          newTile,\n          acol,\n          coor = [];\n\n      for (let i = 0; i < size; i++) {\n        acol = col - i;\n        tile = newGrid[row][acol];\n        if (tile.strId !== 0) return;\n        newTile = { ...tile,\n          isPicked: !isP,\n          strType: type.QUEUE,\n          strId: count\n        };\n        newGrid[row][acol] = newTile;\n        coor.push([row, acol]);\n      }\n\n      setGr(newGrid);\n      let newCount = count + 1;\n      setCount(newCount);\n      const newSt = st.slice(); //copy list of data structues\n\n      newSt.push({\n        id: count,\n        type: \"queue\",\n        tile: coor\n      });\n      setSt(newSt);\n      setOp(\"\");\n    }\n  };\n\n  const mapGrid = size => {\n    if (col + 2 <= 39 && row + size <= 17) {\n      const newGrid = gr.slice();\n      let tile,\n          newTile,\n          coor = [],\n          arr,\n          r,\n          c;\n\n      for (let i = 0; i < size; i++) {\n        arr = [];\n\n        for (let j = 0; j < 3; j++) {\n          r = row + i;\n          c = col + j;\n          tile = newGrid[r][c];\n          if (tile.strId !== 0) return;\n          newTile = { ...tile,\n            isPicked: !isP,\n            strType: type.MAP,\n            strId: count\n          };\n          newGrid[r][c] = newTile; //update tile in copy grid\n\n          arr.push([r, c]); //pushes for single key/value\n        }\n\n        coor.push(arr);\n      }\n\n      setGr(newGrid);\n      let newCount = count + 1;\n      setCount(newCount);\n      const newSt = st.slice(); //copy list of data structues\n\n      newSt.push({\n        id: count,\n        type: \"map\",\n        tile: coor\n      });\n      setSt(newSt);\n      setOp(\"\");\n    }\n  };\n\n  const treeGrid = root => {\n    //setOp(\"\")\n    console.log(root);\n    const newGrid = gr.slice();\n    let tile,\n        newTile,\n        coor = []; // create  root tile\n\n    tile = newGrid[row][col];\n    newTile = { ...tile,\n      isPicked: !isP,\n      txt: `${root}`,\n      strType: type.TREE,\n      strId: count,\n      myKey: aKey\n    };\n    newGrid[row][col] = newTile;\n    coor.push([row, col]);\n    setGr(newGrid);\n    let newCount = count + 1;\n    setCount(newCount);\n    const newSt = st.slice(); //copy list of data structues\n\n    newSt.push({\n      id: count,\n      type: \"tree\",\n      tile: coor\n    });\n    setSt(newSt);\n    setOp(\"\");\n  };\n\n  const graphGrid = () => {\n    //setOp(\"\")\n    const newGrid = gr.slice();\n    let tile,\n        newTile,\n        coor = []; // create  vertex tile\n\n    tile = newGrid[row][col];\n    newTile = { ...tile,\n      isPicked: !isP,\n      txt: `0`,\n      strType: type.GRAPH,\n      strId: count,\n      myKey: aKey\n    };\n    newGrid[row][col] = newTile;\n    coor.push([row, col]);\n    setGr(newGrid);\n    let newCount = count + 1;\n    setCount(newCount);\n    const newSt = st.slice(); //copy list of data structues\n\n    let edg = [];\n    edg.push([]);\n    newSt.push({\n      id: count,\n      type: \"graph\",\n      tile: coor,\n      edges: edg\n    }); //edges = [[],[],[]]\n\n    setSt(newSt);\n    setOp(\"\");\n  };\n\n  const vertexGrid = () => {\n    //setOp(\"\")\n    const newGrid = gr.slice();\n    let tile, newTile;\n    const coor = st.find(e => e.id === ch.id); //find correct graph from all structures\n\n    let myStruc = coor.tile; //array of coordinates of graph [[,],[,],[,]]\n    // create  root tile\n\n    tile = newGrid[row][col];\n    newTile = { ...tile,\n      txt: `${myStruc.length}`,\n      strType: type.GRAPH,\n      strId: ch.id,\n      myKey: aKey\n    };\n    newGrid[row][col] = newTile;\n    myStruc.push([row, col]);\n    let edges = coor.edges;\n    edges.push([]);\n    setGr(newGrid);\n    const newSt = st.filter(e => e.id !== ch.id).slice(); //copy list of data structures without my graph\n\n    const myNewSt = { ...coor,\n      tile: myStruc,\n      edges: edges\n    };\n    newSt.push(myNewSt);\n    setSt(newSt); //setOp(\"\")\n  };\n\n  const click = () => {\n    if (sId === 0) {\n      if (op !== \"\") {\n        if (op === \"Vertex\") vertexGrid();else if (op === \"Graph\") graphGrid();else {\n          let size = parseInt(prompt(\"Size/root:\"), 10);\n          if (op === \"Array\") arrayGrid(size);else if (op === \"Stack\") stackGrid(size);else if (op === \"Queue\") queueGrid(size);else if (op === \"HashMap\") mapGrid(size);else if (op === \"Tree\") treeGrid(size);\n        }\n      }\n    } else {\n      setCh({\n        id: sId,\n        type: sType\n      });\n      console.log(ch);\n    }\n  };\n\n  const extra = sId === ch.id ? ' highlight' : '';\n  const main = sType === `` ? `` : sType === type.ARRAY ? `array helper` : sType === type.STACK ? `stack helper` : sType === type.QUEUE ? `queue helper` : sType === type.MAP ? `map helper` : sType === type.TREE ? `tree helper` : `graph helper`;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: `${aKey}`,\n    className: ` myTile ${main} ${extra} `,\n    onClick: () => click(),\n    children: txt\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 293,\n    columnNumber: 9\n  }, this);\n}\n\n_c = Tile;\nexport default Tile;\n\nvar _c;\n\n$RefreshReg$(_c, \"Tile\");","map":{"version":3,"sources":["/Users/juvenal/Desktop/projects/StructureVisualizer/structure-vis/src/DataStructureVisualizer/Tile.js"],"names":["React","Tile","props","col","row","sType","sId","st","setSt","ch","setCh","gr","setGr","isP","op","setOp","type","count","setCount","txt","aKey","stackGrid","size","cons","tile","newTile","arow","coor","i","newGrid","strId","isPicked","strType","STACK","push","console","log","newCount","newSt","slice","top","id","arrayGrid","acol","ARRAY","queueGrid","QUEUE","mapGrid","arr","r","c","j","MAP","treeGrid","root","TREE","myKey","graphGrid","GRAPH","edg","edges","vertexGrid","find","e","myStruc","length","filter","myNewSt","click","parseInt","prompt","extra","main"],"mappings":"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","sourcesContent":["import React from 'react'\n\nfunction Tile(props) {\n    const {col,row,sType,sId,st,setSt,ch,setCh,gr,setGr,isP,op,setOp,type,count,setCount,txt,aKey} = props\n\n\n    const stackGrid = ( size) => {\n        if((row -size) >= -1){\n\n        //const newGrid = gr.slice();\n        cons\n        let tile,newTile,arow,coor =[]\n        \n        for(let i =0;i<size;i++){\n            arow =row-i\n            tile = newGrid[arow][col]\n            if(tile.strId !== 0) \n                return\n            newTile= {\n              ...tile,\n              isPicked: !isP,\n              strType: type.STACK,\n              strId:count\n            };\n\n            newGrid[arow][col] = newTile\n            coor.push([arow,col])\n        }\n        console.log(\"WHAAAAAAT\")\n        console.log(st)\n        setGr(newGrid)\n        let newCount = count +1;\n        setCount(newCount)\n\n        const newSt = st.slice() //copy list of data structues\n        let top =0\n        newSt.push({id: count,type:\"stack\", tile: coor,top: top})\n        setSt(newSt)\n        setOp(\"\")\n\n        }\n      }\n      \n    const arrayGrid = (size) =>{\n        //setOp(\"\")\n        if((col +size) <= 39){\n\n            const newGrid = gr.slice()\n            let tile, newTile,acol,coor =[]\n            \n\n            for(let i =0;i<size;i++){\n                tile = newGrid[row][col+i]\n                if(tile.strId !== 0) \n                    return\n                newTile= {\n                ...tile,\n                isPicked: !isP,\n                strType: type.ARRAY,\n                strId:count\n                };\n\n                newGrid[row][col+i] = newTile\n                acol =col+i\n                coor.push([row,acol])\n            }\n            setGr(newGrid)\n            let newCount = count +1;\n            setCount(newCount)\n\n            const newSt = st.slice() //copy list of data structues\n            newSt.push({id: count,type:\"array\", tile: coor})\n            setSt(newSt)\n            console.log(st)\n            setOp(\"\")\n\n        }\n\n    }\n\n    const queueGrid = (size) => {\n        if((col -size) >= -1){\n\n            const newGrid = gr.slice();\n            let tile, newTile,acol,coor =[]\n            for(let i =0;i<size;i++){\n                acol = col-i\n                tile = newGrid[row][acol];\n                if(tile.strId !== 0) \n                    return\n                newTile= {\n                ...tile,\n                isPicked: !isP,\n                strType: type.QUEUE,\n                strId:count\n\n                };\n\n                newGrid[row][acol] = newTile;\n                coor.push([row,acol])\n            }\n            setGr(newGrid)\n            let newCount = count +1;\n            setCount(newCount)\n\n            const newSt = st.slice() //copy list of data structues\n            newSt.push({id: count,type:\"queue\", tile: coor})\n            setSt(newSt)\n            setOp(\"\")\n\n        }\n    }\n    const mapGrid = (size) => {\n        if((col +2) <= 39  && (row +size) <= 17){\n            const newGrid = gr.slice();\n            let tile, newTile,coor =[],arr,r,c\n            for(let i = 0; i<size;i++){\n                arr =[]\n                for(let j = 0;j<3; j++){\n                    r=row+i\n                    c=col+j\n                    tile = newGrid[r][c]\n                    if(tile.strId !== 0) \n                        return\n                    newTile= {\n                    ...tile,\n                    isPicked: !isP,\n                    strType: type.MAP, \n                    strId:count\n\n                    }\n                newGrid[r][c] = newTile; //update tile in copy grid\n                \n                arr.push([r,c]) //pushes for single key/value\n\n                \n                }\n                coor.push(arr)\n            }\n            setGr(newGrid)\n            let newCount = count +1;\n            setCount(newCount)\n\n            const newSt = st.slice() //copy list of data structues\n            newSt.push({id: count,type:\"map\", tile: coor})\n            setSt(newSt)\n            setOp(\"\")\n\n        }\n    }\n\n    const treeGrid = (root) =>{\n        //setOp(\"\")\n        \n            console.log(root)\n            const newGrid = gr.slice()\n            let tile, newTile,coor =[]\n\n            // create  root tile\n            tile = newGrid[row][col]\n            newTile= {\n            ...tile,\n            isPicked: !isP,\n            txt:`${root}`,\n            strType: type.TREE,\n            strId:count,\n            myKey: aKey\n            };\n\n            newGrid[row][col] = newTile\n            coor.push([row,col])\n\n            setGr(newGrid)\n            let newCount = count +1;\n            setCount(newCount)\n            const newSt = st.slice() //copy list of data structues\n            newSt.push({id: count, type:\"tree\",tile: coor})\n            setSt(newSt)\n            setOp(\"\")\n            \n    }\n\n    const graphGrid = () =>{\n        //setOp(\"\")\n        \n            const newGrid = gr.slice()\n            let tile, newTile,coor =[]\n\n            // create  vertex tile\n            tile = newGrid[row][col]\n            newTile= {\n            ...tile,\n            isPicked: !isP,\n            txt:`0`,\n            strType: type.GRAPH,\n            strId:count,\n            myKey: aKey\n            };\n\n            newGrid[row][col] = newTile\n            coor.push([row,col])\n\n            setGr(newGrid)\n            let newCount = count +1;\n            setCount(newCount)\n            const newSt = st.slice() //copy list of data structues\n            let edg = []\n            edg.push([])\n            newSt.push({id: count, type:\"graph\",tile: coor, edges:edg})//edges = [[],[],[]]\n            setSt(newSt)\n            setOp(\"\")\n\n            \n    }\n\n    const vertexGrid = () =>{\n        //setOp(\"\")\n        \n            const newGrid = gr.slice()\n            let tile, newTile\n            const coor = (st.find(e => e.id === ch.id)) //find correct graph from all structures\n            let myStruc = coor.tile //array of coordinates of graph [[,],[,],[,]]\n\n            // create  root tile\n            tile = newGrid[row][col]\n            newTile= {\n            ...tile,\n            txt:`${myStruc.length}`,\n            strType: type.GRAPH,\n            strId:ch.id,\n            myKey: aKey\n            };\n\n            newGrid[row][col] = newTile\n            myStruc.push([row,col])\n\n            let edges = coor.edges\n            edges.push([])\n\n            setGr(newGrid)\n            const newSt = st.filter((e => e.id !== ch.id)).slice() //copy list of data structures without my graph\n            const myNewSt = {...coor,tile:myStruc,edges:edges}\n            newSt.push(myNewSt)\n            setSt(newSt)\n            //setOp(\"\")\n\n            \n    }\n\n\n\n\n    \n    const click =() =>{\n        if(sId ===0){\n            if(op !== \"\"){\n                if(op===\"Vertex\")\n                    vertexGrid()\n                else if(op === \"Graph\")\n                    graphGrid()\n                else{\n                    let size= parseInt(prompt(\"Size/root:\"),10)\n\n                    if(op === \"Array\")\n                        arrayGrid(size)\n                    else if(op === \"Stack\")\n                        stackGrid(size)\n                    else if(op === \"Queue\")\n                        queueGrid(size)\n                    else if(op === \"HashMap\")\n                        mapGrid(size)\n                    else if(op === \"Tree\")\n                        treeGrid(size)\n                    \n            }\n            }\n        }\n        else{\n            setCh({id:sId , type:sType})\n            console.log(ch)\n\n        }\n    }\n\n    const extra = sId === ch.id ? ' highlight' : ''\n    const main = sType === ``? ``:\n                sType ===type.ARRAY ? `array helper` :\n                sType ===type.STACK ? `stack helper` :\n                sType ===type.QUEUE ? `queue helper` :\n                sType ===type.MAP ? `map helper` :\n                sType ===type.TREE ? `tree helper` :`graph helper` \n    return (\n        <div id={`${aKey}`} className = {` myTile ${main} ${extra} `} \n            onClick = {() => click()} >\n                {txt}\n        </div>\n    )\n}\n\nexport default Tile\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}