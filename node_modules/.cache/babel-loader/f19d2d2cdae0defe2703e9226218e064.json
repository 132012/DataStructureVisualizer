{"ast":null,"code":"var _jsxFileName = \"/Users/juvenal/Desktop/projects/StructureVisualizer/structure-vis/src/DataStructureVisualizer/Grid.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport Tile from './Tile';\nimport ArrayOp from './StrucFuncs/ArrayOp';\nimport StackOp from './StrucFuncs/StackOp';\nimport QueueOp from './StrucFuncs/QueueOp';\nimport HashMapOp from './StrucFuncs/HashMapOp';\nimport TreeOp from './StrucFuncs/TreeOp';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Grid(props) {\n  _s();\n\n  const [grid, setGrid] = useState([]);\n  const [curStruc, setCurStruc] = useState([]); //all current structures in the grid\n\n  const [chosen, setChosen] = useState({}); //id/type of Structure clicked\n\n  const [counter, setCounter] = useState(1); //generate new  structure id\n\n  const {\n    op,\n    setOp\n  } = props;\n  const type = {\n    ARRAY: \"Array\",\n    STACK: \"Stack\",\n    QUEUE: \"Queue\",\n    MAP: \"HashMap\",\n    TREE: \"Tree\",\n    GRAPH: \"Graph\"\n  };\n  useEffect(() => {\n    const newGrid = initializeGrid();\n    setGrid(newGrid);\n  }, []);\n  useEffect(() => {\n    //connecting lines\n    let trees = curStruc.filter(e => e.type === \"tree\"); //all tree structures\n\n    trees.map(e => {\n      let coor = e.tile,\n          r,\n          c,\n          rr,\n          cc,\n          j,\n          k;\n\n      for (let i = 0; i < coor.size;) {\n        [r, c] = coor[i];\n        j = 2 * i + 1;\n\n        if (!(typeof coor[j] === \"undefined\")) {\n          [rr, cc] = coor[j];\n          let {\n            x1,\n            y1\n          } = getAbsPosition(document.getElementById(`#${r},${c}`)); //parent\n\n          let {\n            x2,\n            y2\n          } = getAbsPosition(document.getElementById(`#${rr},${cc}`)); //child\n\n          line = /*#__PURE__*/_jsxDEV(\"svg\", {\n            width: \"500\",\n            height: \"500\",\n            children: /*#__PURE__*/_jsxDEV(\"line\", {\n              x1: `${x1}`,\n              y1: `${y1}`,\n              x2: `${x2}`,\n              y2: `${y2}`,\n              stroke: \"red\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 43,\n              columnNumber: 57\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 43,\n            columnNumber: 27\n          }, this);\n        }\n\n        k = 2 * i + 1;\n\n        if (!(typeof coor[k] === \"undefined\")) {\n          [rr, cc] = coor[k];\n          let {\n            x1,\n            y1\n          } = getAbsPosition(document.getElementById(`#${r},${c}`)); //parent\n\n          let {\n            x2,\n            y2\n          } = getAbsPosition(document.getElementById(`#${rr},${cc}`)); //child\n\n          line = /*#__PURE__*/_jsxDEV(\"svg\", {\n            width: \"500\",\n            height: \"500\",\n            children: /*#__PURE__*/_jsxDEV(\"line\", {\n              x1: `${x1}`,\n              y1: `${y1}`,\n              x2: `${x2}`,\n              y2: `${y2}`,\n              stroke: \"red\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 51,\n              columnNumber: 57\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 27\n          }, this);\n        }\n      }\n    });\n  }, [curStruc]);\n  let option;\n\n  if (op === \"Array\") {\n    option = /*#__PURE__*/_jsxDEV(ArrayOp, {\n      gr: grid,\n      setGr: setGrid,\n      ch: chosen,\n      st: curStruc,\n      type: type,\n      setSt: setCurStruc,\n      count: counter\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 18\n    }, this);\n  } else if (op === \"Stack\") {\n    option = /*#__PURE__*/_jsxDEV(StackOp, {\n      gr: grid,\n      setGr: setGrid,\n      ch: chosen,\n      st: curStruc,\n      type: type,\n      setSt: setCurStruc,\n      count: counter\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 18\n    }, this);\n  } else if (op === \"Queue\") {\n    option = /*#__PURE__*/_jsxDEV(QueueOp, {\n      gr: grid,\n      setGr: setGrid,\n      ch: chosen,\n      st: curStruc,\n      type: type,\n      setSt: setCurStruc,\n      count: counter\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 18\n    }, this);\n  } else if (op === \"HashMap\") {\n    option = /*#__PURE__*/_jsxDEV(HashMapOp, {\n      gr: grid,\n      setGr: setGrid,\n      ch: chosen,\n      st: curStruc,\n      type: type,\n      setSt: setCurStruc,\n      count: counter\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 18\n    }, this);\n  } else if (op === \"Tree\") {\n    option = /*#__PURE__*/_jsxDEV(TreeOp, {\n      gr: grid,\n      setGr: setGrid,\n      ch: chosen,\n      st: curStruc,\n      type: type,\n      setSt: setCurStruc,\n      count: counter\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 18\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"myGrid\",\n    children: [grid.map((row, rId) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"myRow\",\n      children: row.map((tile, tId) => /*#__PURE__*/_jsxDEV(Tile, {\n        col: tile.col,\n        row: tile.row,\n        sType: tile.strType,\n        sId: tile.strId,\n        st: curStruc,\n        setSt: setCurStruc,\n        ch: chosen,\n        setCh: setChosen,\n        gr: grid,\n        setGr: setGrid,\n        isP: tile.isPicked,\n        op: op,\n        setOp: setOp,\n        type: type,\n        count: counter,\n        setCount: setCounter,\n        txt: tile.txt,\n        aKey: rId + \",\" + tId\n      }, rId + \",\" + tId, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 25\n      }, this))\n    }, rId, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 18\n    }, this)), option]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 115,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Grid, \"223Kn2FspqRvxRZLdQtzvTegdkY=\");\n\n_c = Grid;\nexport default Grid;\n\nconst initializeGrid = () => {\n  const grid = [];\n\n  for (let row = 0; row < 17; row++) {\n    const aRow = [];\n\n    for (let col = 0; col < 35; col++) {\n      aRow.push(createTile(col, row));\n    }\n\n    grid.push(aRow);\n  }\n\n  return grid;\n};\n\nconst createTile = (col, row) => {\n  return {\n    col,\n    row,\n    txt: \"\",\n    strType: ``,\n    strId: 0,\n    isPicked: false,\n    myKey: \"\"\n  };\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"Grid\");","map":{"version":3,"sources":["/Users/juvenal/Desktop/projects/StructureVisualizer/structure-vis/src/DataStructureVisualizer/Grid.js"],"names":["React","useState","useEffect","Tile","ArrayOp","StackOp","QueueOp","HashMapOp","TreeOp","Grid","props","grid","setGrid","curStruc","setCurStruc","chosen","setChosen","counter","setCounter","op","setOp","type","ARRAY","STACK","QUEUE","MAP","TREE","GRAPH","newGrid","initializeGrid","trees","filter","e","map","coor","tile","r","c","rr","cc","j","k","i","size","x1","y1","getAbsPosition","document","getElementById","x2","y2","line","option","row","rId","tId","col","strType","strId","isPicked","txt","aRow","push","createTile","myKey"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react'\nimport Tile from './Tile'\nimport ArrayOp from './StrucFuncs/ArrayOp'\nimport StackOp from './StrucFuncs/StackOp'\nimport QueueOp from './StrucFuncs/QueueOp'\nimport HashMapOp from './StrucFuncs/HashMapOp'\nimport TreeOp from './StrucFuncs/TreeOp'\n\nfunction Grid(props) {\n    const [grid,setGrid] = useState([])\n    const [curStruc,setCurStruc] = useState([]) //all current structures in the grid\n    const [chosen,setChosen] = useState({}) //id/type of Structure clicked\n    const [counter,setCounter] = useState(1) //generate new  structure id\n    \n    const {op,setOp} = props \n    const type = {\n        ARRAY: \"Array\",\n        STACK: \"Stack\",\n        QUEUE: \"Queue\",\n        MAP: \"HashMap\",\n        TREE:\"Tree\",\n        GRAPH:\"Graph\"\n    }\n\n\n    useEffect(() => {\n        const newGrid = initializeGrid()\n        setGrid(newGrid)\n    },[])\n    \n    useEffect(() =>{\n            //connecting lines\n        let trees = curStruc.filter(e => e.type===\"tree\") //all tree structures\n        trees.map(e =>{\n            let coor = e.tile,r,c,rr,cc,j,k\n            for(let i =0;i<coor.size;){\n                [r,c] = coor[i]\n                j = 2*i +1\n                if(!(typeof(coor[j]) === \"undefined\")){\n                    [rr,cc] = coor[j]\n                    let {x1,y1} = getAbsPosition(document.getElementById(`#${r},${c}`))          //parent\n                    let {x2,y2} = getAbsPosition(document.getElementById(`#${rr},${cc}`));     //child\n                    line =<svg width=\"500\" height=\"500\"><line x1= {`${x1}`} y1={`${y1}`} x2={`${x2}`} y2={`${y2}`} stroke=\"red\"/></svg>\n                }\n                k = 2*i +1\n\n                if(!(typeof(coor[k]) === \"undefined\")){\n                    [rr,cc] = coor[k]\n                    let {x1,y1} = getAbsPosition(document.getElementById(`#${r},${c}`))          //parent\n                    let {x2,y2} = getAbsPosition(document.getElementById(`#${rr},${cc}`));     //child\n                    line =<svg width=\"500\" height=\"500\"><line x1= {`${x1}`} y1={`${y1}`} x2={`${x2}`} y2={`${y2}`} stroke=\"red\"/></svg>\n                }\n                \n            }\n        })\n        \n\n    },[curStruc])\n\n    let option \n\n    if(op===\"Array\"){\n        option = <ArrayOp \n            gr = {grid}\n            setGr = {setGrid}\n            ch = {chosen}\n            st = {curStruc}\n            type ={type}\n            setSt = {setCurStruc}\n            count = {counter} />\n    }\n    else if(op===\"Stack\"){\n        option = <StackOp \n            gr = {grid}\n            setGr = {setGrid}\n            ch = {chosen}\n            st = {curStruc}\n            type ={type}\n            setSt = {setCurStruc}\n            count = {counter} />\n    }\n    else if(op===\"Queue\"){\n        option = <QueueOp \n            gr = {grid}\n            setGr = {setGrid}\n            ch = {chosen}\n            st = {curStruc}\n            type ={type}\n            setSt = {setCurStruc}\n            count = {counter} />\n    }\n    else if(op===\"HashMap\"){\n        option = <HashMapOp \n            gr = {grid}\n            setGr = {setGrid}\n            ch = {chosen}\n            st = {curStruc}\n            type ={type}\n            setSt = {setCurStruc}\n            count = {counter} />\n    }\n    else if(op===\"Tree\"){\n        option = <TreeOp \n            gr = {grid}\n            setGr = {setGrid}\n            ch = {chosen}\n            st = {curStruc}\n            type ={type}\n            setSt = {setCurStruc}\n            count = {counter} />\n    }\n\n    \n    return (\n        <div className =\"myGrid\">\n            \n            {grid.map((row,rId) =>(\n                 <div className = \"myRow\" key={rId}>\n\n                     {row.map((tile,tId) =>(\n                        <Tile\n                         key ={rId+\",\"+tId} \n                         col = {tile.col}\n                         row = {tile.row}\n                         sType = {tile.strType}\n                         sId = {tile.strId}\n                         st = {curStruc}\n                         setSt = {setCurStruc}\n                         ch = {chosen}\n                         setCh = {setChosen}\n                         gr = {grid}\n                         setGr = {setGrid}\n                         isP ={tile.isPicked}\n                         op = {op}\n                         setOp ={setOp}\n                         type ={type}\n                         count = {counter}\n                         setCount = {setCounter}\n                         txt = {tile.txt}\n                         aKey ={rId+\",\"+tId}\n                          \n                         />\n                        \n                     ))}\n                 </div>\n            ))}\n                {option}\n                \n            \n            \n        </div>\n    )\n}\n\nexport default Grid\n\nconst initializeGrid = () => {\n    const grid = []\n    for(let row = 0; row <17;row++){\n        const aRow = []\n        for(let col = 0; col<35;col++){\n            aRow.push(createTile(col,row))\n        }\n        grid.push(aRow)\n    }\n    return grid\n}\n\nconst createTile = (col,row) => {\n    return{\n        col,\n        row,\n        txt:\"\",\n        strType: ``,\n        strId: 0,\n        isPicked: false,\n        myKey:\"\"\n    }\n}\n\n"]},"metadata":{},"sourceType":"module"}