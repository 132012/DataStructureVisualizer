{"ast":null,"code":"var _jsxFileName = \"/Users/juvenal/Desktop/projects/StructureVisualizer/structure-vis/src/DataStructureVisualizer/Tile.js\";\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Tile(props) {\n  let {\n    col,\n    row,\n    sType,\n    sId,\n    ch,\n    setCh,\n    pr,\n    setPr,\n    gr,\n    setGr,\n    isP\n  } = props; //console.log(col +\" \"+ row+\" \"+sType+ \" \"+sId)\n\n  const updateGrid = size => {\n    const newGrid = gr.slice();\n\n    for (let i = row; i < size; i--)\n    /*const tile = newGrid[row][col];\n    const newTile= {\n      ...tile,\n      isPicked: !isP,\n    };\n    newGrid[row][col] = newTile;*/\n    return newGrid;\n  };\n  /*\n      const mouseDown = (aRow,aCol) => {\n          const newAr = ch.slice()\n          newAr.push({aRow,aCol})\n          setCh(newAr)\n  \n          const newGrid = updateGrid(gr,row,col)\n          setGr(newGrid)\n  \n          setPr(true)\n      }\n      \n      const mouseLift = () => {\n          setPr(false)\n          setCh([])\n          let ans= prompt(\"Size:\")\n          console.log(ans +\"\")\n      }\n      \n      const mouseEnter =(aRow,aCol)=> {\n  \n          if(!pr) return \n          const newAr = ch.slice()\n          newAr.push({aRow,aCol})\n          setCh(newAr)\n  \n          const newGrid = updateGrid(gr,row,col)\n          setGr(newGrid)\n      }\n  \n      */\n\n\n  const click = () => {\n    let size = prompt(\"Size:\");\n\n    if (row - size >= -1) {\n      const newGrid = updateGrid(size);\n      setGr(newGrid);\n    }\n  }; //let extra = isP ? 'bground' : ''\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    onClick: () => click(),\n    className: `myTile `\n    /*onMouseDown = {() => mouseDown(row,col)}\n    onMouseUp = {() => mouseLift()}\n    onMouseEnter = { () => mouseEnter(row,col) }>\n    */\n\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 9\n  }, this);\n}\n\n_c = Tile;\nexport default Tile;\n\nvar _c;\n\n$RefreshReg$(_c, \"Tile\");","map":{"version":3,"sources":["/Users/juvenal/Desktop/projects/StructureVisualizer/structure-vis/src/DataStructureVisualizer/Tile.js"],"names":["React","Tile","props","col","row","sType","sId","ch","setCh","pr","setPr","gr","setGr","isP","updateGrid","size","newGrid","slice","i","click","prompt"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;;;AAEA,SAASC,IAAT,CAAcC,KAAd,EAAqB;AACjB,MAAI;AAACC,IAAAA,GAAD;AAAKC,IAAAA,GAAL;AAASC,IAAAA,KAAT;AAAeC,IAAAA,GAAf;AAAmBC,IAAAA,EAAnB;AAAsBC,IAAAA,KAAtB;AAA4BC,IAAAA,EAA5B;AAA+BC,IAAAA,KAA/B;AAAqCC,IAAAA,EAArC;AAAwCC,IAAAA,KAAxC;AAA8CC,IAAAA;AAA9C,MAAqDX,KAAzD,CADiB,CAEjB;;AAGA,QAAMY,UAAU,GAAKC,IAAF,IAAW;AAC1B,UAAMC,OAAO,GAAGL,EAAE,CAACM,KAAH,EAAhB;;AACA,SAAI,IAAIC,CAAC,GAAEd,GAAX,EAAec,CAAC,GAACH,IAAjB,EAAsBG,CAAC,EAAvB;AACA;AACR;AACA;AACA;AACA;AACA;AACQ,WAAOF,OAAP;AACD,GAVH;AAWJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACI,QAAMG,KAAK,GAAE,MAAK;AACd,QAAIJ,IAAI,GAAEK,MAAM,CAAC,OAAD,CAAhB;;AACA,QAAIhB,GAAG,GAAGW,IAAP,IAAgB,CAAC,CAApB,EAAsB;AAClB,YAAMC,OAAO,GAAGF,UAAU,CAACC,IAAD,CAA1B;AACAH,MAAAA,KAAK,CAACI,OAAD,CAAL;AAEH;AACJ,GAPD,CA/CiB,CAwDjB;;;AACA,sBACI;AAAK,IAAA,OAAO,EAAI,MAAMG,KAAK,EAA3B;AAA+B,IAAA,SAAS,EAAK;AACxC;AACb;AACA;AACA;;AAJQ;AAAA;AAAA;AAAA;AAAA,UADJ;AASH;;KAlEQlB,I;AAoET,eAAeA,IAAf","sourcesContent":["import React from 'react'\n\nfunction Tile(props) {\n    let {col,row,sType,sId,ch,setCh,pr,setPr,gr,setGr,isP} = props\n    //console.log(col +\" \"+ row+\" \"+sType+ \" \"+sId)\n\n\n    const updateGrid = ( size) => {\n        const newGrid = gr.slice();\n        for(let i =row;i<size;i--)\n        /*const tile = newGrid[row][col];\n        const newTile= {\n          ...tile,\n          isPicked: !isP,\n        };\n        newGrid[row][col] = newTile;*/\n        return newGrid;\n      };\n/*\n    const mouseDown = (aRow,aCol) => {\n        const newAr = ch.slice()\n        newAr.push({aRow,aCol})\n        setCh(newAr)\n\n        const newGrid = updateGrid(gr,row,col)\n        setGr(newGrid)\n\n        setPr(true)\n    }\n    \n    const mouseLift = () => {\n        setPr(false)\n        setCh([])\n        let ans= prompt(\"Size:\")\n        console.log(ans +\"\")\n    }\n    \n    const mouseEnter =(aRow,aCol)=> {\n\n        if(!pr) return \n        const newAr = ch.slice()\n        newAr.push({aRow,aCol})\n        setCh(newAr)\n\n        const newGrid = updateGrid(gr,row,col)\n        setGr(newGrid)\n    }\n\n    */\n    const click =() =>{\n        let size= prompt(\"Size:\")\n        if((row - size) >= -1){\n            const newGrid = updateGrid(size)\n            setGr(newGrid)\n\n        }\n    }\n    \n    //let extra = isP ? 'bground' : ''\n    return (\n        <div onClick = {() => click()} className = {`myTile `} \n             /*onMouseDown = {() => mouseDown(row,col)}\n             onMouseUp = {() => mouseLift()}\n             onMouseEnter = { () => mouseEnter(row,col) }>\n             */>\n        \n        </div>\n    )\n}\n\nexport default Tile\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}