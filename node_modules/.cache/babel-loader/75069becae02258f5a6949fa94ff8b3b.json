{"ast":null,"code":"var _jsxFileName = \"/Users/juvenal/Desktop/projects/StructureVisualizer/structure-vis/src/DataStructureVisualizer/StrucFuncs/TreeOp.js\";\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst {\n  gr,\n  setGr,\n  ch,\n  st\n} = props;\n\nconst addValue = e => {\n  e.preventDefault();\n  let value = document.getElementById(\"input1\").value;\n  value = parseInt(index, 10); //reinsert coordinates of tree in each add\n\n  const fullStruc = st.find(e => e.id === ch.id);\n  const myStruc = fullStruc.tile; //array of coordinates\n\n  const newGrid = gr.slice();\n  let [r, c] = myStruc[0];\n  const tile = newGrid[r][c]; //root coordinate on grid\n\n  let index = 0,\n      pParent = tile;\n\n  for (let i = 0; i < 15;) {\n    if (!(tile.txt === \"\")) {\n      pParent = tile;\n\n      if (tile.txt <= value) {\n        i = 2 * i + 1;\n        tile = myStruc[i]; //left child\n      } else {\n        i = 2 * i + 2;\n        tile = myStruc[i]; //right child\n      }\n    } else {\n      const aTile = newGrid[pParent[0]][pParent[1]];\n      const newTile = { ...aTile,\n        txt: `${value}`,\n        strType: type.TREE,\n        strId: fullStruc.id\n      };\n      newGrid[pParent[0]][pParent[1]] = newTile;\n    }\n  }\n\n  const newTile = { ...tile,\n    txt: `${value}`\n  };\n  newGrid[i0][i1] = newTile;\n  setGr(newGrid);\n};\n\nfunction TreeOp() {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"controls\",\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: addValue,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"input1\",\n        type: \"number\",\n        placeholder: \"value\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Add\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"see items\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 9\n  }, this);\n}\n\n_c = TreeOp;\nexport default TreeOp;\n\nvar _c;\n\n$RefreshReg$(_c, \"TreeOp\");","map":{"version":3,"sources":["/Users/juvenal/Desktop/projects/StructureVisualizer/structure-vis/src/DataStructureVisualizer/StrucFuncs/TreeOp.js"],"names":["React","gr","setGr","ch","st","props","addValue","e","preventDefault","value","document","getElementById","parseInt","index","fullStruc","find","id","myStruc","tile","newGrid","slice","r","c","pParent","i","txt","aTile","newTile","strType","type","TREE","strId","i0","i1","TreeOp"],"mappings":"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","sourcesContent":["import React from 'react'\nconst {gr,setGr,ch,st} = props\n\n    const addValue = (e) => {\n        e.preventDefault()\n        let value = document.getElementById(\"input1\").value\n        value = parseInt(index,10)\n\n        //reinsert coordinates of tree in each add\n        \n\n\n        const fullStruc = (st.find(e => e.id === ch.id)) \n        const myStruc = fullStruc.tile //array of coordinates\n        const newGrid = gr.slice()\n        let [r,c] = myStruc[0]\n        \n        const tile = newGrid[r][c] //root coordinate on grid\n\n        let index = 0 , pParent =tile\n        for(let i =0; i<15;){\n            if(!(tile.txt ===\"\")){\n                pParent = tile\n                if(tile.txt <= value){\n                    i = 2*i+1\n                    tile = myStruc[i] //left child\n                }\n                else{\n                    i = 2*i+2\n                    tile = myStruc[i] //right child\n                }}\n            else{\n                const aTile = newGrid[pParent[0]][pParent[1]]\n                const newTile= {\n                    ...aTile,\n                    txt:`${value}`,\n                    strType: type.TREE,\n                    strId:fullStruc.id\n                    }\n                newGrid[pParent[0]][pParent[1]] = newTile\n            }\n        }\n        const newTile= {\n            ...tile,\n            txt:`${value}`\n\n            }\n        newGrid[i0][i1] = newTile\n        setGr(newGrid)\n\n    } \n\nfunction TreeOp() {\n    return (\n        <div className = \"controls\" >\n                <form onSubmit = {addValue}>\n                    <input id=\"input1\" type=\"number\" placeholder=\"value\" />\n                    <button>Add</button>\n\n                </form>\n\n\n                <div>\n                    see items\n                </div>\n            </div>\n    )\n}\n\nexport default TreeOp\n"]},"metadata":{},"sourceType":"module"}