{"ast":null,"code":"var _jsxFileName = \"/Users/juvenal/Desktop/projects/StructureVisualizer/structure-vis/src/DataStructureVisualizer/StrucFuncs/StackOp.js\";\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction StackOp(props) {\n  const {\n    gr,\n    setGr,\n    ch,\n    st\n  } = props;\n\n  const pushValue = e => {\n    e.preventDefault();\n    const value = document.getElementById(\"input1\").value;\n    console.log(st);\n    console.log(ch.id);\n    const myStruc = st.find(e => e.id === ch.id).tile; //array of coordinates\n\n    let top = -1;\n\n    for (let i = 0; i < myStruc.length; i++) {\n      let [row, col] = myStruc[i];\n      let a = gr[row][col];\n\n      if (a.txt === \"\") {\n        top = i;\n        break;\n      }\n    }\n\n    if (top > -1) {\n      const newGrid = gr.slice();\n      const [r, c] = myStruc[top];\n      const tile = newGrid[r][c];\n      const newTile = { ...tile,\n        txt: `${value}`\n      };\n      newGrid[r][c] = newTile;\n      setGr(newGrid);\n    }\n  };\n\n  const popValue = e => {\n    e.preventDefault();\n    console.log(st);\n    console.log(ch.id);\n    const myStruc = st.find(e => e.id === ch.id).tile; //array of coordinates\n\n    let top = -1;\n\n    for (let i = myStruc.length - 1; i >= 0; i--) {\n      let [row, col] = myStruc[i];\n      let a = gr[row][col];\n\n      if (!(a.txt === \"\")) {\n        top = i;\n        break;\n      }\n    }\n\n    if (top > -1) {\n      const newGrid = gr.slice();\n      const [r, c] = myStruc[top];\n      const tile = newGrid[r][c];\n      const newTile = { ...tile,\n        txt: ``\n      };\n      newGrid[r][c] = newTile;\n      setGr(newGrid);\n    }\n  };\n\n  let autoOn = false;\n\n  const auto = e => {\n    e.preventDefault();\n    auto = !auto;\n    let act;\n\n    while (auto) {}\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"controls\",\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: pushValue,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"input1\",\n        type: \"text\",\n        placeholder: \"value\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Push\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: popValue,\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Pop\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"see items\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 9\n  }, this);\n}\n\n_c = StackOp;\nexport default StackOp;\n\nvar _c;\n\n$RefreshReg$(_c, \"StackOp\");","map":{"version":3,"sources":["/Users/juvenal/Desktop/projects/StructureVisualizer/structure-vis/src/DataStructureVisualizer/StrucFuncs/StackOp.js"],"names":["React","StackOp","props","gr","setGr","ch","st","pushValue","e","preventDefault","value","document","getElementById","console","log","id","myStruc","find","tile","top","i","length","row","col","a","txt","newGrid","slice","r","c","newTile","popValue","autoOn","auto","act"],"mappings":"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","sourcesContent":["import React from 'react'\n\nfunction StackOp(props) {\n    const {gr,setGr,ch,st} = props\n\n    const pushValue = (e) => {\n        e.preventDefault()\n        const value = document.getElementById(\"input1\").value\n        \n        console.log( st)\n        console.log( ch.id)\n\n        const myStruc = (st.find(e => e.id === ch.id).tile) //array of coordinates\n        let top =-1\n        for(let i =0;i<myStruc.length;i++){\n            let [row,col] = myStruc[i]\n            let a = ((gr[row][col]))\n            if(a.txt === \"\"){\n                top = i\n                break\n            }\n        }\n\n        if(top > -1){\n            const newGrid = gr.slice()\n            const [r,c] = myStruc[top]\n            const tile = newGrid[r][c] \n            const newTile= {\n                ...tile,\n                txt:`${value}`\n\n                }\n            newGrid[r][c] = newTile\n            setGr(newGrid)\n        }\n\n\n    } \n\n    const popValue = (e) => {\n        e.preventDefault()\n        \n        console.log( st)\n        console.log( ch.id)\n\n        const myStruc = (st.find(e => e.id === ch.id).tile) //array of coordinates\n        let top =-1\n        for(let i =myStruc.length -1;i>=0;i--){\n            let [row,col] = myStruc[i]\n            let a = ((gr[row][col]))\n            if(!(a.txt === \"\")){\n                top = i\n                break\n            }\n        }\n\n        if(top > -1){\n            const newGrid = gr.slice()\n            const [r,c] = myStruc[top]\n            const tile = newGrid[r][c] \n            const newTile= {\n                ...tile,\n                txt:``\n\n                }\n            newGrid[r][c] = newTile\n            setGr(newGrid)\n        }\n\n\n    }\n\n    let autoOn =false\n    const auto = (e) => {\n        e.preventDefault()\n        auto = !auto\n        let act\n        while(auto){\n            \n        }\n\n    }\n    return (\n        <div className = \"controls\" >\n                <form onSubmit = {pushValue}>\n                    <input id=\"input1\" type=\"text\" placeholder=\"value\" />\n                    <button>Push</button>\n\n                </form>\n\n                <form onSubmit = {popValue} >\n             \n                    <button>Pop</button>\n\n                </form>\n                <div>\n                    see items\n                </div>\n        </div> \n    )\n}\n\nexport default StackOp\n"]},"metadata":{},"sourceType":"module"}