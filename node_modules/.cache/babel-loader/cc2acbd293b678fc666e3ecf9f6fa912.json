{"ast":null,"code":"var _jsxFileName = \"/Users/juvenal/Desktop/projects/StructureVisualizer/structure-vis/src/DataStructureVisualizer/StrucFuncs/GraphOp.js\";\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction GraphOp(props) {\n  const {\n    gr,\n    setGr,\n    ch,\n    st,\n    type,\n    setSt,\n    setOp\n  } = props;\n  let line;\n\n  const addVertex = e => {\n    e.preventDefault();\n    setOp(\"Graph\");\n    const fullStruc = st.find(e => e.id === ch.id); //[id,type,[coor]]\n\n    let myStruc = fullStruc.tile; //array of coordinates\n\n    let [r, c] = myStruc[0];\n    const newGrid = gr.slice();\n    let i;\n\n    for (i = 0; i < 15;) {\n      console.log(\"in there\");\n\n      if (gr[r][c].txt > value) {\n        i = 2 * i + 1;\n        if (typeof myStruc[i] === \"undefined\") break;\n        r = myStruc[i][0]; //left child\n\n        c = myStruc[i][1]; //left child\n      } else {\n        i = 2 * i + 2;\n        if (typeof myStruc[i] === \"undefined\") break;\n        r = myStruc[i][0]; //right child\n\n        c = myStruc[i][1]; //right child\n      }\n    }\n\n    if (i > 14) return; //reached tree depth limit\n\n    let newR,\n        newC,\n        offset = [0, 4, 4, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1];\n    let g = gr[r][c]; //parent\n\n    if (g.txt > value) {\n      newR = r + 1;\n      newC = c - offset[i];\n    } else {\n      newR = r + 1;\n      newC = c + offset[i];\n    }\n\n    const aTile = newGrid[newR][newC]; //child\n\n    if (typeof aTile == \"undefined\" || !(aTile.strType === \"\")) return; //tile is already being used\n\n    const newTile = { ...aTile,\n      txt: `${value}`,\n      strType: type.TREE,\n      strId: fullStruc.id,\n      myKey: g.myKey + \"\" + newC //for unique keys\n\n    };\n    newGrid[newR][newC] = newTile;\n    setGr(newGrid);\n    const newSt = st.filter(e => !(e.id === fullStruc.id)).slice(); //list of data structures without tree\n\n    myStruc[i] = [newR, newC];\n    newSt.push({\n      id: ch.id,\n      type: \"tree\",\n      tile: myStruc\n    });\n    setSt(newSt);\n    console.log(st);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"controls\",\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: addVertex,\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Add Vertex\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: addVertex,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"input1\",\n        type: \"number\",\n        placeholder: \"from\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"input2\",\n        type: \"number\",\n        placeholder: \"to\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"input3\",\n        type: \"number\",\n        placeholder: \"weight\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Add Edge\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 9\n  }, this);\n}\n\n_c = GraphOp;\nexport default GraphOp;\n\nvar _c;\n\n$RefreshReg$(_c, \"GraphOp\");","map":{"version":3,"sources":["/Users/juvenal/Desktop/projects/StructureVisualizer/structure-vis/src/DataStructureVisualizer/StrucFuncs/GraphOp.js"],"names":["React","GraphOp","props","gr","setGr","ch","st","type","setSt","setOp","line","addVertex","e","preventDefault","fullStruc","find","id","myStruc","tile","r","c","newGrid","slice","i","console","log","txt","value","newR","newC","offset","g","aTile","strType","newTile","TREE","strId","myKey","newSt","filter","push"],"mappings":"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","sourcesContent":["import React from 'react'\n\nfunction GraphOp(props) {\n    const {gr,setGr,ch,st,type,setSt,setOp} = props\n\n    let line\n    const addVertex = (e) => {\n        e.preventDefault()\n        setOp(\"Graph\")\n\n        \n\n        const fullStruc = (st.find(e => e.id === ch.id)) //[id,type,[coor]]\n        let myStruc = fullStruc.tile //array of coordinates\n        let [r,c] = myStruc[0]\n        const newGrid = gr.slice()\n        \n        let i\n        for(i =0; i<15;){\n            \n                console.log(\"in there\")\n                if(gr[r][c].txt > value){\n                    i = 2*i+1 \n\n                    if(typeof(myStruc[i])===\"undefined\")\n                        break\n                    r = myStruc[i][0] //left child\n                    c = myStruc[i][1] //left child\n                }\n                else{\n                    i = 2*i+2\n                    if(typeof(myStruc[i])===\"undefined\")\n                        break\n                    \n                    r = myStruc[i][0] //right child\n                    c = myStruc[i][1] //right child\n                }\n            \n            }\n        if(i>14) return  //reached tree depth limit\n        let newR,newC, offset = [0,4,4,2,2,2,2,1,1,1,1,1,1,1,1]\n        let g = gr[r][c] //parent\n        if(g.txt > value){\n            newR = r +1\n            newC = c - offset[i]\n        }\n        else{\n            newR = r +1\n            newC = c + offset[i]\n        }\n        const aTile = newGrid[newR][newC]//child\n        if(typeof(aTile) == \"undefined\" || !(aTile.strType === \"\")) return //tile is already being used\n        const newTile= {\n            ...aTile,\n            txt:`${value}`,\n            strType: type.TREE,\n            strId:fullStruc.id,\n            myKey: g.myKey +\"\"+newC //for unique keys\n            }\n        newGrid[newR][newC] = newTile\n        setGr(newGrid)\n        const newSt = st.filter(e => !(e.id ===fullStruc.id)).slice()//list of data structures without tree\n        myStruc[i]=[newR,newC]\n        newSt.push({id:ch.id,type:\"tree\",tile:myStruc})\n        setSt(newSt)\n        console.log(st)\n    }\n\n    return (\n        <div className = \"controls\" >\n                <form onSubmit = {addVertex}>\n                    <button>Add Vertex</button>\n\n                </form>\n\n                <form onSubmit = {addVertex}>\n                    <input id=\"input1\" type=\"number\" placeholder=\"from\" />\n                    <input id=\"input2\" type=\"number\" placeholder=\"to\" />\n                    <input id=\"input3\" type=\"number\" placeholder=\"weight\" />\n                    <button>Add Edge</button>\n\n                </form>\n            </div>\n    )\n}\n\nexport default GraphOp\n"]},"metadata":{},"sourceType":"module"}