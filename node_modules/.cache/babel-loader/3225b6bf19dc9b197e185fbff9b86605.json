{"ast":null,"code":"var _jsxFileName = \"/Users/juvenal/Desktop/projects/StructureVisualizer/structure-vis/src/DataStructureVisualizer/Grid.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport Tile from './Tile';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Grid() {\n  _s();\n\n  const [grid, setGrid] = useState([]);\n  const [curStruc, setCurStruc] = useState([]); //all current structures in the grid\n\n  const [clicked, setClicked] = useState([]); //all blocks currently clicked/hovered\n\n  useEffect(() => {\n    const newGrid = initializeGrid();\n    setGrid(newGrid);\n  }, []);\n\n  const mouseDown = (row, col) => {};\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"myGrid\",\n    children: grid.map((row, rId) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"myRow\",\n      children: row.map((tile, tId) => /*#__PURE__*/_jsxDEV(Tile, {\n        col: tile.col\n      }, tId, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 25\n      }, this))\n    }, rId, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 18\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Grid, \"b46DJ+WJ/tPqgvbSVRE39EO0yTc=\");\n\n_c = Grid;\nexport default Grid;\n\nconst initializeGrid = () => {\n  const grid = [];\n\n  for (let row = 0; row < 20; row++) {\n    const aRow = [];\n\n    for (let col = 0; col < 40; col++) {\n      aRow.push(createTile(col, row));\n    }\n\n    grid.push(aRow);\n  }\n\n  return grid;\n};\n\nconst createTile = (col, row) => {\n  return {\n    col,\n    row,\n    strType: null,\n    strId: null\n  };\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"Grid\");","map":{"version":3,"sources":["/Users/juvenal/Desktop/projects/StructureVisualizer/structure-vis/src/DataStructureVisualizer/Grid.js"],"names":["React","useState","useEffect","Tile","Grid","grid","setGrid","curStruc","setCurStruc","clicked","setClicked","newGrid","initializeGrid","mouseDown","row","col","map","rId","tile","tId","aRow","push","createTile","strType","strId"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAAyC,OAAzC;AACA,OAAOC,IAAP,MAAiB,QAAjB;;;AAEA,SAASC,IAAT,GAAgB;AAAA;;AACZ,QAAM,CAACC,IAAD,EAAMC,OAAN,IAAiBL,QAAQ,CAAC,EAAD,CAA/B;AACA,QAAM,CAACM,QAAD,EAAUC,WAAV,IAAyBP,QAAQ,CAAC,EAAD,CAAvC,CAFY,CAEgC;;AAC5C,QAAM,CAACQ,OAAD,EAASC,UAAT,IAAuBT,QAAQ,CAAC,EAAD,CAArC,CAHY,CAG8B;;AAE1CC,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMS,OAAO,GAAGC,cAAc,EAA9B;AACAN,IAAAA,OAAO,CAACK,OAAD,CAAP;AACH,GAHQ,EAGP,EAHO,CAAT;;AAKA,QAAME,SAAS,GAAE,CAACC,GAAD,EAAKC,GAAL,KAAY,CAE5B,CAFD;;AAMA,sBACI;AAAK,IAAA,SAAS,EAAE,QAAhB;AAAA,cAEKV,IAAI,CAACW,GAAL,CAAS,CAACF,GAAD,EAAKG,GAAL,kBACL;AAAK,MAAA,SAAS,EAAG,OAAjB;AAAA,gBACKH,GAAG,CAACE,GAAJ,CAAQ,CAACE,IAAD,EAAMC,GAAN,kBACN,QAAC,IAAD;AAAiB,QAAA,GAAG,EAAID,IAAI,CAACH;AAA7B,SAAYI,GAAZ;AAAA;AAAA;AAAA;AAAA,cADF;AADL,OAA8BF,GAA9B;AAAA;AAAA;AAAA;AAAA,YADJ;AAFL;AAAA;AAAA;AAAA;AAAA,UADJ;AAcH;;GA9BQb,I;;KAAAA,I;AAgCT,eAAeA,IAAf;;AAEA,MAAMQ,cAAc,GAAG,MAAM;AACzB,QAAMP,IAAI,GAAG,EAAb;;AACA,OAAI,IAAIS,GAAG,GAAG,CAAd,EAAiBA,GAAG,GAAE,EAAtB,EAAyBA,GAAG,EAA5B,EAA+B;AAC3B,UAAMM,IAAI,GAAG,EAAb;;AACA,SAAI,IAAIL,GAAG,GAAG,CAAd,EAAiBA,GAAG,GAAC,EAArB,EAAwBA,GAAG,EAA3B,EAA8B;AAC1BK,MAAAA,IAAI,CAACC,IAAL,CAAUC,UAAU,CAACP,GAAD,EAAKD,GAAL,CAApB;AACH;;AACDT,IAAAA,IAAI,CAACgB,IAAL,CAAUD,IAAV;AACH;;AACD,SAAOf,IAAP;AACH,CAVD;;AAYA,MAAMiB,UAAU,GAAG,CAACP,GAAD,EAAKD,GAAL,KAAa;AAC5B,SAAM;AACFC,IAAAA,GADE;AAEFD,IAAAA,GAFE;AAGFS,IAAAA,OAAO,EAAE,IAHP;AAIFC,IAAAA,KAAK,EAAE;AAJL,GAAN;AAOH,CARD","sourcesContent":["import React, {useState, useEffect} from 'react'\nimport Tile from './Tile'\n\nfunction Grid() {\n    const [grid,setGrid] = useState([])\n    const [curStruc,setCurStruc] = useState([]) //all current structures in the grid\n    const [clicked,setClicked] = useState([]) //all blocks currently clicked/hovered\n\n    useEffect(() => {\n        const newGrid = initializeGrid()\n        setGrid(newGrid)\n    },[])\n\n    const mouseDown= (row,col) =>{\n        \n    }\n\n    \n    \n    return (\n        <div className =\"myGrid\">\n            \n            {grid.map((row,rId) =>(\n                 <div className = \"myRow\" key={rId}>\n                     {row.map((tile,tId) =>(\n                        <Tile key ={tId} col = {tile.col}/>\n                        \n                     ))}\n                 </div>\n            ))}\n            \n        </div>\n    )\n}\n\nexport default Grid\n\nconst initializeGrid = () => {\n    const grid = []\n    for(let row = 0; row <20;row++){\n        const aRow = []\n        for(let col = 0; col<40;col++){\n            aRow.push(createTile(col,row))\n        }\n        grid.push(aRow)\n    }\n    return grid\n}\n\nconst createTile = (col,row) => {\n    return{\n        col,\n        row,\n        strType: null,\n        strId: null,\n\n    }\n}\n"]},"metadata":{},"sourceType":"module"}