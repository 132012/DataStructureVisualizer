{"ast":null,"code":"var _jsxFileName = \"/Users/juvenal/Desktop/projects/StructureVisualizer/structure-vis/src/DataStructureVisualizer/Tile.js\";\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Tile({\n  props\n}) {\n  const {\n    col,\n    row,\n    sType,\n    sId,\n    ch,\n    setCh\n  } = props;\n\n  const mouseDown = (aRow, aCol) => {\n    const newAr = ch.slice();\n    newAr.push({\n      aRow,\n      aCol\n    });\n    setCh({\n      cTiles: newAr,\n      hold: true\n    });\n  };\n\n  const mouseLift = () => {\n    //pop up\n    setChosen({\n      hold: false\n    });\n  };\n\n  const mouseEnter = (aRow, aCol) => {\n    if (!chosen.hold) return;\n    const newAr = chosen.slice();\n    newAr.push({\n      aRow,\n      aCol\n    });\n    setChosen({\n      cTiles: newAr\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"myTile\",\n    onMouseDown: mouseDown(row, col),\n    onMouseUp: mouseLift(),\n    onMouseEnter: mouseEnter()\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 9\n  }, this);\n}\n\n_c = Tile;\nexport default Tile;\n\nvar _c;\n\n$RefreshReg$(_c, \"Tile\");","map":{"version":3,"sources":["/Users/juvenal/Desktop/projects/StructureVisualizer/structure-vis/src/DataStructureVisualizer/Tile.js"],"names":["React","Tile","props","col","row","sType","sId","ch","setCh","mouseDown","aRow","aCol","newAr","slice","push","cTiles","hold","mouseLift","setChosen","mouseEnter","chosen"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;;;AAEA,SAASC,IAAT,CAAc;AAACC,EAAAA;AAAD,CAAd,EAAuB;AACnB,QAAM;AAACC,IAAAA,GAAD;AAAKC,IAAAA,GAAL;AAASC,IAAAA,KAAT;AAAeC,IAAAA,GAAf;AAAmBC,IAAAA,EAAnB;AAAsBC,IAAAA;AAAtB,MAA+BN,KAArC;;AAEA,QAAMO,SAAS,GAAG,CAACC,IAAD,EAAMC,IAAN,KAAe;AAC7B,UAAMC,KAAK,GAAGL,EAAE,CAACM,KAAH,EAAd;AACAD,IAAAA,KAAK,CAACE,IAAN,CAAW;AAACJ,MAAAA,IAAD;AAAMC,MAAAA;AAAN,KAAX;AACAH,IAAAA,KAAK,CAAC;AAACO,MAAAA,MAAM,EAACH,KAAR;AAAcI,MAAAA,IAAI,EAAC;AAAnB,KAAD,CAAL;AACH,GAJD;;AAMA,QAAMC,SAAS,GAAG,MAAM;AACpB;AACAC,IAAAA,SAAS,CAAC;AAACF,MAAAA,IAAI,EAAC;AAAN,KAAD,CAAT;AACH,GAHD;;AAKA,QAAMG,UAAU,GAAE,CAACT,IAAD,EAAMC,IAAN,KAAc;AAC5B,QAAG,CAACS,MAAM,CAACJ,IAAX,EAAiB;AACjB,UAAMJ,KAAK,GAAGQ,MAAM,CAACP,KAAP,EAAd;AACAD,IAAAA,KAAK,CAACE,IAAN,CAAW;AAACJ,MAAAA,IAAD;AAAMC,MAAAA;AAAN,KAAX;AACAO,IAAAA,SAAS,CAAC;AAACH,MAAAA,MAAM,EAACH;AAAR,KAAD,CAAT;AACH,GALD;;AAOA,sBACI;AAAK,IAAA,SAAS,EAAG,QAAjB;AACK,IAAA,WAAW,EAAIH,SAAS,CAACL,GAAD,EAAKD,GAAL,CAD7B;AAEK,IAAA,SAAS,EAAIc,SAAS,EAF3B;AAGK,IAAA,YAAY,EAAIE,UAAU;AAH/B;AAAA;AAAA;AAAA;AAAA,UADJ;AASH;;KA9BQlB,I;AAgCT,eAAeA,IAAf","sourcesContent":["import React from 'react'\n\nfunction Tile({props}) {\n    const {col,row,sType,sId,ch,setCh} = props\n\n    const mouseDown = (aRow,aCol) => {\n        const newAr = ch.slice()\n        newAr.push({aRow,aCol})\n        setCh({cTiles:newAr,hold:true})\n    }\n    \n    const mouseLift = () => {\n        //pop up\n        setChosen({hold:false})\n    }\n    \n    const mouseEnter =(aRow,aCol)=> {\n        if(!chosen.hold) return \n        const newAr = chosen.slice()\n        newAr.push({aRow,aCol})\n        setChosen({cTiles:newAr})\n    }\n    \n    return (\n        <div className = \"myTile\" \n             onMouseDown = {mouseDown(row,col)}\n             onMouseUp = {mouseLift()}\n             onMouseEnter = {mouseEnter()}>\n             \n        \n        </div>\n    )\n}\n\nexport default Tile\n\n"]},"metadata":{},"sourceType":"module"}