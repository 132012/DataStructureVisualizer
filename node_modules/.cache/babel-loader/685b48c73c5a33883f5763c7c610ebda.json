{"ast":null,"code":"var _jsxFileName = \"/Users/juvenal/Desktop/projects/StructureVisualizer/structure-vis/src/DataStructureVisualizer/StrucFuncs/GraphOp.js\";\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst PriorityQueue = require('priorityqueuejs');\n\nfunction GraphOp(props) {\n  const {\n    gr,\n    setGr,\n    ch,\n    st,\n    type,\n    setSt,\n    setOp\n  } = props;\n\n  const addVertex = e => {\n    e.preventDefault();\n    setOp(\"Vertex\");\n  };\n\n  const addEdge = e => {\n    e.preventDefault();\n    let from = document.getElementById(\"input1\").value;\n    let to = document.getElementById(\"input2\").value;\n    let weight = document.getElementById(\"input3\").value;\n    let dir = document.getElementById(\"directed\").checked;\n    let fromInt = parseInt(from, 10);\n    let toInt = parseInt(to, 10);\n    if (from === to) return; // still need to do when self loop\n\n    const myStruc = st.find(e => e.id === ch.id); //my graph structure\n\n    const edges = myStruc.edges;\n    const coor = myStruc.tile;\n    from = coor[from];\n    from = from.join();\n    to = coor[to];\n    to = to.join();\n    if (!from || !to) return; //if faulty info is given\n    //edges.push([from,to,weight,dir])\n\n    console.log(edges);\n    console.log(fromInt + \"  \" + toInt);\n    edges[fromInt][toInt] = [from, to, weight, dir, fromInt, toInt];\n    if (dir === false) edges[toInt][fromInt] = [to, from, weight, dir, toInt, fromInt];\n    const newSt = st.filter(e => e.id !== ch.id).slice(); //copy list of data structures without my graph\n\n    const myNewSt = { ...myStruc,\n      edges: edges\n    };\n    newSt.push(myNewSt);\n    setSt(newSt);\n  };\n\n  let message = \"\";\n\n  const dijkstra = async e => {\n    e.preventDefault();\n    let start = document.getElementById(\"str\").value;\n    start = parseInt(start, 10);\n    let end = document.getElementById(\"end\").value;\n    end = parseInt(end, 10);\n    if (start === end) return;\n    console.log(end);\n    let distances = {};\n    let prev = {};\n    var queue = new PriorityQueue((a, b) => {\n      return b.cost - a.cost;\n    });\n    const myStrucAll = st.find(e => e.id === ch.id);\n    const edges = myStrucAll.edges.slice();\n    distances[start] = 0; //if(!edges[start]) return //if initial node has no neighbors\n\n    queue.enq({\n      tile: start,\n      cost: 0\n    });\n    const myStruc = myStrucAll.tile;\n\n    for (let i = 0; i < edges.length; i++) {\n      if (i !== start) distances[i] = Infinity;\n      prev[i] = null;\n    }\n\n    let til1, til2, neighbor;\n\n    while (!queue.isEmpty()) {\n      let min = queue.deq();\n      let currTile = min.tile;\n      let weight = min.cost;\n      til1 = document.getElementById(myStruc[currTile].join());\n      til1.classList.add(\"look\");\n      console.log(edges[currTile]);\n\n      for (let i = 1; i < edges[currTile].length; i++) {\n        console.log(currTile + \"    \" + i + \"     \" + typeof edges[currTile][i]);\n\n        if (typeof edges[currTile][i] === \"undefined\" || i === currTile) {\n          continue;\n        }\n\n        neighbor = edges[currTile][i];\n        let alt = distances[currTile] + parseInt(neighbor[2], 10);\n        let n = neighbor[5];\n        til2 = document.getElementById(myStruc[n].join());\n        til2.classList.add(\"look-1\");\n        await new Promise(r => setTimeout(r, 300));\n        til2.classList.remove(\"look-1\");\n\n        if (alt < distances[n]) {\n          distances[n] = alt;\n          prev[n] = currTile;\n\n          if (edges[n]) {\n            //if tile has neighbors\n            queue.enq({\n              tile: n,\n              cost: distances[n]\n            });\n            console.log(queue);\n          }\n        }\n      }\n\n      til1.classList.remove(\"look\");\n    }\n\n    let path = [end];\n    console.log(end);\n\n    do {\n      if (prev[end] === null) {}\n\n      break;\n      end = prev[end];\n      path.push(end);\n      console.log(path);\n    } while (end !== start && prev[end] !== null);\n\n    if (end !== start) return;\n    let til3;\n\n    for (let j = 0; j < 3; j++) {\n      for (let i = path.length - 1; i >= 0; i--) {\n        til3 = document.getElementById(myStruc[path[i]].join());\n        til3.classList.add(\"look-2\");\n        await new Promise(r => setTimeout(r, 500));\n        til3.classList.remove(\"look-2\");\n      }\n\n      await new Promise(r => setTimeout(r, 1500));\n    } //console.log(distances)\n\n\n    console.log(prev); //light up answers 3 times\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"controls\",\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: addVertex,\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Add Vertex\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: addEdge,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"input1\",\n        type: \"number\",\n        placeholder: \"from\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"input2\",\n        type: \"number\",\n        placeholder: \"to\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"input3\",\n        type: \"number\",\n        placeholder: \"weight\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"directed\",\n        type: \"checkbox\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: \" Directed\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Add Edge\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: dijkstra,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"str\",\n        type: \"number\",\n        placeholder: \"from\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"end\",\n        type: \"number\",\n        placeholder: \"to\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Dijkstra\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 145,\n    columnNumber: 9\n  }, this);\n}\n\n_c = GraphOp;\nexport default GraphOp;\n\nvar _c;\n\n$RefreshReg$(_c, \"GraphOp\");","map":{"version":3,"sources":["/Users/juvenal/Desktop/projects/StructureVisualizer/structure-vis/src/DataStructureVisualizer/StrucFuncs/GraphOp.js"],"names":["React","PriorityQueue","require","GraphOp","props","gr","setGr","ch","st","type","setSt","setOp","addVertex","e","preventDefault","addEdge","from","document","getElementById","value","to","weight","dir","checked","fromInt","parseInt","toInt","myStruc","find","id","edges","coor","tile","join","console","log","newSt","filter","slice","myNewSt","push","message","dijkstra","start","end","distances","prev","queue","a","b","cost","myStrucAll","enq","i","length","Infinity","til1","til2","neighbor","isEmpty","min","deq","currTile","classList","add","alt","n","Promise","r","setTimeout","remove","path","til3","j"],"mappings":"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","sourcesContent":["import React from 'react'\nconst PriorityQueue = require('priorityqueuejs');\n\n\nfunction GraphOp(props) {\n    const {gr,setGr,ch,st,type,setSt,setOp} = props\n\n    const addVertex = (e) => {\n        e.preventDefault()\n        setOp(\"Vertex\")\n\n        \n    }\n\n    const addEdge = (e) => {\n        e.preventDefault()\n        let from = document.getElementById(\"input1\").value\n        let to = document.getElementById(\"input2\").value\n        let weight = document.getElementById(\"input3\").value\n        let dir = document.getElementById(\"directed\").checked\n        let fromInt= parseInt(from,10)\n        let toInt= parseInt(to,10)\n\n        if(from === to) return  // still need to do when self loop\n\n        const myStruc = (st.find(e => e.id === ch.id)) //my graph structure\n        const edges  = myStruc.edges\n        const coor = myStruc.tile  \n        from = coor[from]\n        from = from.join()\n        to = coor[to]\n        to = to.join()\n        if(!from || !to )return //if faulty info is given\n        //edges.push([from,to,weight,dir])\n        console.log(edges)\n        console.log(fromInt+\"  \"+toInt)\n        edges[fromInt][toInt] = [from,to,weight,dir,fromInt,toInt]\n        if(dir ===false)\n            edges[toInt][fromInt] = [to,from,weight,dir,toInt,fromInt]\n\n        const newSt = st.filter((e => e.id !== ch.id)).slice() //copy list of data structures without my graph\n        const myNewSt = {...myStruc,edges:edges}\n        newSt.push(myNewSt)\n        setSt(newSt)\n\n\n    } \n    let message = \"\"\n    const dijkstra = async(e) => {\n        e.preventDefault()\n\n        \n        let start = document.getElementById(\"str\").value\n        start= parseInt(start,10)\n        let end = document.getElementById(\"end\").value\n        end= parseInt(end,10)\n        if(start === end) return\n        console.log(end)\n        let distances = {}\n\n        let prev  ={}\n        var queue = new PriorityQueue((a, b)=> {\n            return b.cost - a.cost;\n          });\n        \n        const myStrucAll =  (st.find(e => e.id === ch.id))\n        const edges = myStrucAll.edges.slice()\n\n        distances[start] = 0\n        //if(!edges[start]) return //if initial node has no neighbors\n        queue.enq({tile:start,cost:0})\n\n\n        const myStruc = myStrucAll.tile\n\n        for(let i =0;i<edges.length;i++){\n            if(i !== start) distances[i] = Infinity\n            prev[i] = null\n        }\n        let til1,til2,neighbor\n        while(!queue.isEmpty()){\n            let min = queue.deq()\n            let currTile = min.tile\n            let weight = min.cost\n\n            til1 = document.getElementById(myStruc[currTile].join())\n            til1.classList.add(\"look\")\n            console.log(edges[currTile])\n            for(let i =1;i<edges[currTile].length;i++){\n                console.log(currTile+\"    \"+i+\"     \"+typeof(edges[currTile][i]))\n\n                if(typeof(edges[currTile][i]) === \"undefined\" || i === currTile ){\n                    continue}\n                neighbor = edges[currTile][i]\n                let alt = distances[currTile] + parseInt(neighbor[2],10)\n                let n = neighbor[5]\n                til2 = document.getElementById(myStruc[n].join())\n                til2.classList.add(\"look-1\")\n                await new Promise(r => setTimeout(r, 300))\n                til2.classList.remove(\"look-1\")\n                if(alt < distances[n]){\n                    distances[n] = alt\n                    prev[n] = currTile\n                    if(edges[n]){ //if tile has neighbors\n                        queue.enq({tile:n, cost:distances[n]})\n                        console.log(queue)\n                    }\n                }\n            }\n            \n            til1.classList.remove(\"look\")\n\n\n        }\n        let path = [end]\n        console.log(end)\n       do{\n        if(prev[end] === null){}\n            break\n            end = prev[end]\n            path.push(end)\n        \n        \n            console.log(path)\n        }while(end !== start && prev[end]!== null)\n        if(end !==start) return\n        let til3\n        for(let j =0;j<3;j++){\n            for(let i =path.length-1;i>= 0;i--){\n                til3 = document.getElementById(myStruc[path[i]].join())\n                til3.classList.add(\"look-2\")\n                await new Promise(r => setTimeout(r, 500))\n                til3.classList.remove(\"look-2\")\n            }\n            await new Promise(r => setTimeout(r, 1500))\n\n        }\n\n        //console.log(distances)\n        console.log(prev)\n        //light up answers 3 times\n    }\n\n    return (\n        <div className = \"controls\" >\n                <form onSubmit = {addVertex}>\n                    <button>Add Vertex</button>\n\n                </form>\n\n                <form onSubmit = {addEdge}>\n                    <input id=\"input1\" type=\"number\" placeholder=\"from\" />\n                    <input id=\"input2\" type=\"number\" placeholder=\"to\" />\n                    <input id=\"input3\" type=\"number\" placeholder=\"weight\" />\n                    <input id=\"directed\" type=\"checkbox\" />\n                    <label > Directed</label>\n  \n                    <button>Add Edge</button>\n\n                </form>\n                <form onSubmit = {dijkstra}>\n                    <input id=\"str\" type=\"number\" placeholder=\"from\" />\n                    <input id=\"end\" type=\"number\" placeholder=\"to\"/>\n                    <button >Dijkstra</button>\n                    <p>{message}</p>\n                </form>\n                \n            </div>\n    )\n}\n\nexport default GraphOp\n"]},"metadata":{},"sourceType":"module"}