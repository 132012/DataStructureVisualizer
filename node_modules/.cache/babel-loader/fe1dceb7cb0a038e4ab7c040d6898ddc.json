{"ast":null,"code":"var _jsxFileName = \"/Users/juvenal/Desktop/projects/StructureVisualizer/structure-vis/src/DataStructureVisualizer/Tile.js\";\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Tile(props) {\n  let {\n    col,\n    row,\n    sType,\n    sId,\n    ch,\n    setCh,\n    pr,\n    setPr,\n    gr,\n    setGr,\n    isP\n  } = props; //console.log(col +\" \"+ row+\" \"+sType+ \" \"+sId)\n\n  const updateGrid = size => {\n    const newGrid = gr.slice();\n    let tile;\n\n    for (let i = row, j = 0; i < size; i--, j++) {\n      tile = newGrid[row - j][col];\n      const newTile = { ...tile,\n        isPicked: !isP\n      };\n      newGrid[row - j][col] = newTile;\n    }\n    /*const tile = newGrid[row][col];\n    const newTile= {\n      ...tile,\n      isPicked: !isP,\n    };\n    newGrid[row][col] = newTile;*/\n\n\n    return newGrid;\n  };\n  /*\n      const mouseDown = (aRow,aCol) => {\n          const newAr = ch.slice()\n          newAr.push({aRow,aCol})\n          setCh(newAr)\n  \n          const newGrid = updateGrid(gr,row,col)\n          setGr(newGrid)\n  \n          setPr(true)\n      }\n      \n      const mouseLift = () => {\n          setPr(false)\n          setCh([])\n          let ans= prompt(\"Size:\")\n          console.log(ans +\"\")\n      }\n      \n      const mouseEnter =(aRow,aCol)=> {\n  \n          if(!pr) return \n          const newAr = ch.slice()\n          newAr.push({aRow,aCol})\n          setCh(newAr)\n  \n          const newGrid = updateGrid(gr,row,col)\n          setGr(newGrid)\n      }\n  \n      */\n\n\n  const click = () => {\n    let size = prompt(\"Size:\");\n\n    if (row - size >= -1) {\n      const newGrid = updateGrid(size);\n      setGr(newGrid);\n    }\n\n    console.log(\"hello\");\n  };\n\n  let extra = isP ? 'bground' : '';\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `myTile ${extra}`,\n    onClick: () => click()\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 9\n  }, this);\n}\n\n_c = Tile;\nexport default Tile;\n\nvar _c;\n\n$RefreshReg$(_c, \"Tile\");","map":{"version":3,"sources":["/Users/juvenal/Desktop/projects/StructureVisualizer/structure-vis/src/DataStructureVisualizer/Tile.js"],"names":["React","Tile","props","col","row","sType","sId","ch","setCh","pr","setPr","gr","setGr","isP","updateGrid","size","newGrid","slice","tile","i","j","newTile","isPicked","click","prompt","console","log","extra"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;;;AAEA,SAASC,IAAT,CAAcC,KAAd,EAAqB;AACjB,MAAI;AAACC,IAAAA,GAAD;AAAKC,IAAAA,GAAL;AAASC,IAAAA,KAAT;AAAeC,IAAAA,GAAf;AAAmBC,IAAAA,EAAnB;AAAsBC,IAAAA,KAAtB;AAA4BC,IAAAA,EAA5B;AAA+BC,IAAAA,KAA/B;AAAqCC,IAAAA,EAArC;AAAwCC,IAAAA,KAAxC;AAA8CC,IAAAA;AAA9C,MAAqDX,KAAzD,CADiB,CAEjB;;AAGA,QAAMY,UAAU,GAAKC,IAAF,IAAW;AAC1B,UAAMC,OAAO,GAAGL,EAAE,CAACM,KAAH,EAAhB;AACA,QAAIC,IAAJ;;AACA,SAAI,IAAIC,CAAC,GAAEf,GAAP,EAAYgB,CAAC,GAAE,CAAnB,EAAqBD,CAAC,GAACJ,IAAvB,EAA4BI,CAAC,IAAIC,CAAC,EAAlC,EAAqC;AACjCF,MAAAA,IAAI,GAAGF,OAAO,CAACZ,GAAG,GAACgB,CAAL,CAAP,CAAejB,GAAf,CAAP;AACA,YAAMkB,OAAO,GAAE,EACb,GAAGH,IADU;AAEbI,QAAAA,QAAQ,EAAE,CAACT;AAFE,OAAf;AAIAG,MAAAA,OAAO,CAACZ,GAAG,GAACgB,CAAL,CAAP,CAAejB,GAAf,IAAsBkB,OAAtB;AACH;AACD;AACR;AACA;AACA;AACA;AACA;;;AACQ,WAAOL,OAAP;AACD,GAlBH;AAmBJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACI,QAAMO,KAAK,GAAE,MAAK;AACd,QAAIR,IAAI,GAAES,MAAM,CAAC,OAAD,CAAhB;;AACA,QAAIpB,GAAG,GAAGW,IAAP,IAAgB,CAAC,CAApB,EAAsB;AAClB,YAAMC,OAAO,GAAGF,UAAU,CAACC,IAAD,CAA1B;AACAH,MAAAA,KAAK,CAACI,OAAD,CAAL;AACH;;AACDS,IAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AAEH,GARD;;AAUA,MAAIC,KAAK,GAAGd,GAAG,GAAG,SAAH,GAAe,EAA9B;AACA,sBACI;AAAK,IAAA,SAAS,EAAK,UAASc,KAAM,EAAlC;AACI,IAAA,OAAO,EAAI,MAAMJ,KAAK;AAD1B;AAAA;AAAA;AAAA;AAAA,UADJ;AAOH;;KAzEQtB,I;AA2ET,eAAeA,IAAf","sourcesContent":["import React from 'react'\n\nfunction Tile(props) {\n    let {col,row,sType,sId,ch,setCh,pr,setPr,gr,setGr,isP} = props\n    //console.log(col +\" \"+ row+\" \"+sType+ \" \"+sId)\n\n\n    const updateGrid = ( size) => {\n        const newGrid = gr.slice();\n        let tile;\n        for(let i =row, j =0;i<size;i--, j++){\n            tile = newGrid[row-j][col];\n            const newTile= {\n              ...tile,\n              isPicked: !isP,\n            };\n            newGrid[row-j][col] = newTile;\n        }\n        /*const tile = newGrid[row][col];\n        const newTile= {\n          ...tile,\n          isPicked: !isP,\n        };\n        newGrid[row][col] = newTile;*/\n        return newGrid;\n      };\n/*\n    const mouseDown = (aRow,aCol) => {\n        const newAr = ch.slice()\n        newAr.push({aRow,aCol})\n        setCh(newAr)\n\n        const newGrid = updateGrid(gr,row,col)\n        setGr(newGrid)\n\n        setPr(true)\n    }\n    \n    const mouseLift = () => {\n        setPr(false)\n        setCh([])\n        let ans= prompt(\"Size:\")\n        console.log(ans +\"\")\n    }\n    \n    const mouseEnter =(aRow,aCol)=> {\n\n        if(!pr) return \n        const newAr = ch.slice()\n        newAr.push({aRow,aCol})\n        setCh(newAr)\n\n        const newGrid = updateGrid(gr,row,col)\n        setGr(newGrid)\n    }\n\n    */\n    const click =() =>{\n        let size= prompt(\"Size:\")\n        if((row - size) >= -1){\n            const newGrid = updateGrid(size)\n            setGr(newGrid)\n        }\n        console.log(\"hello\")\n\n    }\n    \n    let extra = isP ? 'bground' : ''\n    return (\n        <div className = {`myTile ${extra}`} \n            onClick = {() => click()} \n             >\n        \n        </div>\n    )\n}\n\nexport default Tile\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}