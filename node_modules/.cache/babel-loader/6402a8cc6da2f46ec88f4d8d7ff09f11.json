{"ast":null,"code":"var _jsxFileName = \"/Users/juvenal/Desktop/projects/StructureVisualizer/structure-vis/src/DataStructureVisualizer/Tile.js\";\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Tile(props) {\n  const {\n    col,\n    row,\n    sType,\n    sId,\n    st,\n    setSt,\n    ch,\n    setCh,\n    gr,\n    setGr,\n    isP,\n    op,\n    setOp,\n    type,\n    count,\n    setCount\n  } = props; //console.log(col +\" \"+ row+\" \"+sType+ \" \"+sId)\n\n  const stackGrid = size => {\n    if (row - size >= -1) {\n      const newGrid = gr.slice();\n      let tile, newTile;\n\n      for (let i = 0; i < size; i++) {\n        tile = newGrid[row - i][col];\n        newTile = { ...tile,\n          isPicked: !isP,\n          strType: type.STACK\n        };\n        newGrid[row - i][col] = newTile;\n      }\n\n      setGr(newGrid);\n    }\n  };\n\n  const arrayGrid = size => {\n    //setOp(\"\")\n    if (col + size <= 45) {\n      const newGrid = gr.slice();\n      let tile,\n          newTile,\n          acol,\n          coor = [];\n\n      for (let i = 0; i < size; i++) {\n        tile = newGrid[row][col + i];\n        newTile = { ...tile,\n          isPicked: !isP,\n          strType: type.ARRAY,\n          strId: count\n        };\n        newGrid[row][col + i] = newTile;\n        acol = col + i;\n        coor.push({\n          row,\n          acol\n        });\n      }\n\n      setGr(newGrid);\n      let newCount = count + 1;\n      setCount(newCount);\n      const newSt = st.slice(); //copy list of data structues\n\n      newSt.push({\n        id: count,\n        tile: coor\n      });\n      setSt(newSt);\n      console.log(st);\n    }\n  };\n\n  const queueGrid = size => {\n    if (col - size >= -1) {\n      const newGrid = gr.slice();\n      let tile, newTile;\n\n      for (let i = 0; i < size; i++) {\n        tile = newGrid[row][col - i];\n        newTile = { ...tile,\n          isPicked: !isP,\n          strType: type.QUEUE\n        };\n        newGrid[row][col - i] = newTile;\n      }\n\n      setGr(newGrid);\n    }\n  };\n\n  const mapGrid = size => {\n    if (col + 2 <= 44 && row + size <= 20) {\n      console.log(\"no\");\n      const newGrid = gr.slice();\n      let tile, newTile;\n\n      for (let i = 0; i < 3; i++) {\n        for (let j = 0; j < size; j++) {\n          tile = newGrid[row + j][col + i];\n          newTile = { ...tile,\n            isPicked: !isP,\n            strType: type.MAP\n          };\n          newGrid[row + j][col + i] = newTile;\n        }\n      }\n\n      setGr(newGrid);\n    }\n  };\n  /*\n      const mouseDown = (aRow,aCol) => {\n          const newAr = ch.slice()\n          newAr.push({aRow,aCol})\n          setCh(newAr)\n  \n          const newGrid = updateGrid(gr,row,col)\n          setGr(newGrid)\n  \n          setPr(true)\n      }\n      \n      const mouseLift = () => {\n          setPr(false)\n          setCh([])\n          let ans= prompt(\"Size:\")\n          console.log(ans +\"\")\n      }\n      \n      const mouseEnter =(aRow,aCol)=> {\n  \n          if(!pr) return \n          const newAr = ch.slice()\n          newAr.push({aRow,aCol})\n          setCh(newAr)\n  \n          const newGrid = updateGrid(gr,row,col)\n          setGr(newGrid)\n      }\n  \n      */\n\n\n  const click = () => {\n    if (sId === 0) {\n      if (op !== \"\") {\n        let size = parseInt(prompt(\"Size:\"), 10);\n        if (op === \"Array\") arrayGrid(size);else if (op === \"Stack\") stackGrid(size);else if (op === \"Queue\") queueGrid(size);else if (op === \"HashMap\") mapGrid(size);else if (op === \"Tree\") console.log(\"nothing yet\");else if (op === \"Graph\") console.log(\"nothing yet\");\n      }\n    } else {\n      setch;\n    }\n  };\n\n  let extra = isP ? 'bground' : '';\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `myTile ${extra}`,\n    onClick: () => click()\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 160,\n    columnNumber: 9\n  }, this);\n}\n\n_c = Tile;\nexport default Tile;\n\nvar _c;\n\n$RefreshReg$(_c, \"Tile\");","map":{"version":3,"sources":["/Users/juvenal/Desktop/projects/StructureVisualizer/structure-vis/src/DataStructureVisualizer/Tile.js"],"names":["React","Tile","props","col","row","sType","sId","st","setSt","ch","setCh","gr","setGr","isP","op","setOp","type","count","setCount","stackGrid","size","newGrid","slice","tile","newTile","i","isPicked","strType","STACK","arrayGrid","acol","coor","ARRAY","strId","push","newCount","newSt","id","console","log","queueGrid","QUEUE","mapGrid","j","MAP","click","parseInt","prompt","setch","extra"],"mappings":"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","sourcesContent":["import React from 'react'\n\nfunction Tile(props) {\n    const {col,row,sType,sId,st,setSt,ch,setCh,gr,setGr,isP,op,setOp,type,count,setCount} = props\n    //console.log(col +\" \"+ row+\" \"+sType+ \" \"+sId)\n\n\n    const stackGrid = ( size) => {\n        if((row -size) >= -1){\n\n        const newGrid = gr.slice();\n        let tile,newTile;\n        for(let i =0;i<size;i++){\n            tile = newGrid[row-i][col];\n            newTile= {\n              ...tile,\n              isPicked: !isP,\n              strType: type.STACK\n            };\n\n            newGrid[row-i][col] = newTile;\n        }\n         setGr(newGrid)\n        }\n      }\n      \n    const arrayGrid = (size) =>{\n        //setOp(\"\")\n        if((col +size) <= 45){\n\n            const newGrid = gr.slice()\n            let tile, newTile,acol,coor =[]\n            \n\n            for(let i =0;i<size;i++){\n                tile = newGrid[row][col+i]\n                newTile= {\n                ...tile,\n                isPicked: !isP,\n                strType: type.ARRAY,\n                strId:count\n                };\n\n                newGrid[row][col+i] = newTile\n                acol =col+i\n                coor.push({row,acol})\n            }\n            setGr(newGrid)\n            let newCount = count +1;\n            setCount(newCount)\n\n            const newSt = st.slice() //copy list of data structues\n            newSt.push({id: count, tile: coor})\n            setSt(newSt)\n            console.log(st)\n        }\n\n    }\n\n    const queueGrid = (size) => {\n        if((col -size) >= -1){\n\n            const newGrid = gr.slice();\n            let tile, newTile;\n            for(let i =0;i<size;i++){\n                tile = newGrid[row][col-i];\n                newTile= {\n                ...tile,\n                isPicked: !isP,\n                strType: type.QUEUE\n\n                };\n\n                newGrid[row][col-i] = newTile;\n            }\n            setGr(newGrid)\n        }\n    }\n    const mapGrid = (size) => {\n        if((col +2) <= 44  && (row +size) <= 20){\n            console.log(\"no\")\n            const newGrid = gr.slice();\n            let tile, newTile;\n            for(let i = 0; i<3;i++){\n                for(let j = 0;j<size; j++){\n                    tile = newGrid[row+j][col+i];\n                newTile= {\n                ...tile,\n                isPicked: !isP,\n                strType: type.MAP\n\n                };\n\n                newGrid[row+j][col+i] = newTile;\n                }\n            }\n            setGr(newGrid)\n\n        }\n    }\n\n\n/*\n    const mouseDown = (aRow,aCol) => {\n        const newAr = ch.slice()\n        newAr.push({aRow,aCol})\n        setCh(newAr)\n\n        const newGrid = updateGrid(gr,row,col)\n        setGr(newGrid)\n\n        setPr(true)\n    }\n    \n    const mouseLift = () => {\n        setPr(false)\n        setCh([])\n        let ans= prompt(\"Size:\")\n        console.log(ans +\"\")\n    }\n    \n    const mouseEnter =(aRow,aCol)=> {\n\n        if(!pr) return \n        const newAr = ch.slice()\n        newAr.push({aRow,aCol})\n        setCh(newAr)\n\n        const newGrid = updateGrid(gr,row,col)\n        setGr(newGrid)\n    }\n\n    */\n    \n    const click =() =>{\n        if(sId ===0){\n            if(op !== \"\"){\n                let size= parseInt(prompt(\"Size:\"),10)\n                if(op === \"Array\")\n                    arrayGrid(size)\n                else if(op === \"Stack\")\n                    stackGrid(size)\n                else if(op === \"Queue\")\n                    queueGrid(size)\n                else if(op === \"HashMap\")\n                    mapGrid(size)\n                else if(op === \"Tree\")\n                    console.log(\"nothing yet\")\n                else if(op === \"Graph\")\n                    console.log(\"nothing yet\")\n            }\n        }\n        else{\n            setch\n        }\n    }\n    \n    let extra = isP ? 'bground' : ''\n    return (\n        <div className = {`myTile ${extra}`} \n            onClick = {() => click()} >\n        \n        </div>\n    )\n}\n\nexport default Tile\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}